(window.webpackJsonp=window.webpackJsonp||[]).push([["a4f7"],{"67X/":function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/date-io-customization",function(){var e=t("n18a");return{page:e.default||e}}])},"8H5F":function(e,a,t){var n=t("0HwX"),r=t("GCLZ"),o=t("qA3Z"),i=t("/6KZ"),l=t("fGh/"),m=t("ADe/");i(i.S,"Reflect",{get:function e(a,t){var i,s,u=arguments.length<3?a:arguments[2];return m(a)===u?a[t]:(i=n.f(a,t))?o(i,"value")?i.value:void 0!==i.get?i.get.call(u):void 0:l(s=r(a))?e(s,t,u):void 0}})},B3z7:function(e,a,t){"use strict";t.r(a),t.d(a,"default",function(){return k}),t.d(a,"raw",function(){return x}),t.d(a,"relativePath",function(){return M});var n=t("hDBU"),r=t("7mTa"),o=t.n(r),i=t("LkAs"),l=t("Moms"),m=t("tvLF"),s=t.n(m),u=t("R/ia"),c=t.n(u),p=t("hZod");function d(e,a,t){return(d="undefined"!=typeof Reflect&&c.a?c.a:function(e,a,t){var n=function(e,a){for(;!Object.prototype.hasOwnProperty.call(e,a)&&null!==(e=Object(p.default)(e)););return e}(e,a);if(n){var r=s()(n,a);return r.get?r.get.call(t):r.value}})(e,a,t||e)}var T=t("tEuJ"),f=t("bMj6"),D=t("mXGw"),g=t("kebl"),h=t("1O2t"),b=t("/KD0");function y(e){var a=function(){if("undefined"==typeof Reflect||!o.a)return!1;if(o.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(o()(Date,[],function(){})),!0}catch(e){return!1}}();return function(){var t,n=Object(p.default)(e);if(a){var r=Object(p.default)(this).constructor;t=o()(n,arguments,r)}else t=n.apply(this,arguments);return Object(f.default)(this,t)}}var v=function(e){Object(T.default)(t,e);var a=y(t);function t(){return Object(i.default)(this,t),a.apply(this,arguments)}return Object(l.default)(t,[{key:"getYearRange",value:function(e,a){return d(Object(p.default)(t.prototype),"getYearRange",this).call(this,e,a).reverse()}}]),t}(t("fGNF").a);function k(){var e=D.useState(new Date),a=Object(n.default)(e,2),t=a[0],r=a[1];return D.createElement(h.b,{dateAdapter:v},D.createElement(b.a,{openTo:"year",value:t,onChange:function(e){return r(e)},renderInput:function(e){return D.createElement(g.a,e)}}))}var x='import * as React from "react";\nimport TextField from "@material-ui/core/TextField";\nimport { LocalizationProvider, DatePicker } from "@material-ui/pickers";\nimport DateFnsAdapter from "@material-ui/pickers/adapter/date-fns";\n\nclass OverriddenAdapter extends DateFnsAdapter {\n  getYearRange(start: Date, end: Date) {\n    return super.getYearRange(start, end).reverse();\n  }\n}\n\nexport default function OverrideLogicExample() {\n  const [value, setValue] = React.useState<Date | null>(new Date());\n\n  return (\n    <LocalizationProvider dateAdapter={OverriddenAdapter}>\n      <DatePicker\n        openTo="year"\n        value={value}\n        onChange={(newValue) => setValue(newValue)}\n        renderInput={(props) => <TextField {...props} />}\n      />\n    </LocalizationProvider>\n  );\n}\n',M="pages/guides/OverrideLogic.example.tsx"},HSMe:function(e,a){e.exports='import { SupportOptionRange } from "prettier";\n\n/**\n * Localized output will of course vary based on the locale and date library used. Inline examples here are based on\n * using `moment` with the `en-US` locale.\n */\nexport interface DateIOFormats<TLibFormatToken = string> {\n  /** Localized full date @example "Jan 1, 2019" */\n  fullDate: TLibFormatToken;\n  /** Partially localized full date with weekday, useful for text-to-speech accessibility @example "Tuesday, January 1, 2019" */\n  fullDateWithWeekday: TLibFormatToken;\n  /** Date format string with month and day of month @example "1 January" */\n  normalDate: TLibFormatToken;\n  /** Date format string with weekday, month and day of month @example "Wed, Jan 1" */\n  normalDateWithWeekday: TLibFormatToken;\n  /** Shorter day format @example "Jan 1" */\n  shortDate: TLibFormatToken;\n  /** Year format string @example "2019" */\n  year: TLibFormatToken;\n  /** Month format string @example "January" */\n  month: TLibFormatToken;\n  /** Short month format string @example "Jan" */\n  monthShort: TLibFormatToken;\n  /** Short month format string @example "January 2018" */\n  monthAndYear: TLibFormatToken;\n  /** Month with date format string @example "January 1" */\n  monthAndDate: TLibFormatToken;\n  /** Weekday format string @example "Wednesday" */\n  weekday: TLibFormatToken;\n  /** Short weekday format string @example "Wed" */\n  weekdayShort: TLibFormatToken;\n  /** Day format string @example "1" */\n  dayOfMonth: TLibFormatToken;\n  /** Hours format string @example "11" */\n  hours12h: TLibFormatToken;\n  /** Hours format string @example "23" */\n  hours24h: TLibFormatToken;\n  /** Minutes format string @example "44" */\n  minutes: TLibFormatToken;\n  /** Seconds format string @example "00" */\n  seconds: TLibFormatToken;\n  /** Full time localized format string @example "11:44 PM" for US, "23:44" for Europe */\n  fullTime: TLibFormatToken;\n  /** Not localized full time format string @example "11:44 PM" */\n  fullTime12h: TLibFormatToken;\n  /** Not localized full time format string @example "23:44" */\n  fullTime24h: TLibFormatToken;\n  /** Date & time format string with localized time @example "Jan 1, 2018 11:44 PM" */\n  fullDateTime: TLibFormatToken;\n  /** Not localized date & Time format 12h @example "Jan 1, 2018 11:44 PM" */\n  fullDateTime12h: TLibFormatToken;\n  /** Not localized date & Time format 24h @example "Jan 1, 2018 23:44" */\n  fullDateTime24h: TLibFormatToken;\n  /** Localized keyboard input friendly date format @example "02/13/2020 */\n  keyboardDate: TLibFormatToken;\n  /** Localized keyboard input friendly date/time format @example "02/13/2020 23:44" */\n  keyboardDateTime: TLibFormatToken;\n  /** Partially localized keyboard input friendly date/time 12h format @example "02/13/2020 11:44 PM" */\n  keyboardDateTime12h: TLibFormatToken;\n  /** Partially localized keyboard input friendly date/time 24h format @example "02/13/2020 23:44" */\n  keyboardDateTime24h: TLibFormatToken;\n}\n\nexport interface IUtils<TDate> {\n  formats: DateIOFormats<any>;\n  locale?: any;\n  moment?: any;\n  dayjs?: any;\n  /** Name of the library that is used right now */\n  lib: string;\n\n  // constructor (options?: { formats?: DateIOFormats, locale?: any, instance?: any });\n\n  date(value?: any): TDate | null;\n  toJsDate(value: TDate): Date;\n  parse(value: string, format: string): TDate | null;\n\n  getCurrentLocaleCode(): string;\n  is12HourCycleInCurrentLocale(): boolean;\n  /** Returns user readable format (taking into account localized format tokens), useful to render helper text for input (e.g. placeholder). For luxon always returns empty string. */\n  getFormatHelperText(format: string): string;\n\n  isNull(value: TDate | null): boolean;\n  isValid(value: any): boolean;\n  getDiff(value: TDate, comparing: TDate | string): number;\n  isEqual(value: any, comparing: any): boolean;\n\n  isSameDay(value: TDate, comparing: TDate): boolean;\n  isSameMonth(value: TDate, comparing: TDate): boolean;\n  isSameYear(value: TDate, comparing: TDate): boolean;\n  isSameHour(value: TDate, comparing: TDate): boolean;\n\n  isAfter(value: TDate, comparing: TDate): boolean;\n  isAfterDay(value: TDate, comparing: TDate): boolean;\n  isAfterYear(value: TDate, comparing: TDate): boolean;\n\n  isBeforeDay(value: TDate, comparing: TDate): boolean;\n  isBeforeYear(value: TDate, comparing: TDate): boolean;\n  isBefore(value: TDate, comparing: TDate): boolean;\n\n  isWithinRange(value: TDate, range: [TDate, TDate]): boolean;\n\n  startOfMonth(value: TDate): TDate;\n  endOfMonth(value: TDate): TDate;\n  startOfWeek(value: TDate): TDate;\n  endOfWeek(value: TDate): TDate;\n\n  addDays(value: TDate, count: number): TDate;\n  addMonths(value: TDate, count: number): TDate;\n\n  startOfDay(value: TDate): TDate;\n  endOfDay(value: TDate): TDate;\n\n  format(value: TDate, formatKey: keyof DateIOFormats): string;\n  formatByString(value: TDate, formatString: string): string;\n  formatNumber(numberToFormat: string): string;\n\n  getHours(value: TDate): number;\n  setHours(value: TDate, count: number): TDate;\n\n  getMinutes(value: TDate): number;\n  setMinutes(value: TDate, count: number): TDate;\n\n  getSeconds(value: TDate): number;\n  setSeconds(value: TDate, count: number): TDate;\n\n  getMonth(value: TDate): number;\n  setMonth(value: TDate, count: number): TDate;\n  getNextMonth(value: TDate): TDate;\n  getPreviousMonth(value: TDate): TDate;\n\n  getMonthArray(value: TDate): TDate[];\n\n  getYear(value: TDate): number;\n  setYear(value: TDate, count: number): TDate;\n\n  mergeDateAndTime(date: TDate, time: TDate): TDate;\n\n  getWeekdays(): string[];\n  getWeekArray(date: TDate): TDate[][];\n  getYearRange(start: TDate, end: TDate): TDate[];\n\n  /** Allow to customize displaying "am/pm" strings */\n  getMeridiemText(ampm: "am" | "pm"): string;\n}\n'},LJWA:function(e,a,t){t("8H5F"),e.exports=t("TaGV").Reflect.get},"R/ia":function(e,a,t){e.exports=t("LJWA")},VK7u:function(e,a,t){"use strict";t.r(a),t.d(a,"default",function(){return p}),t.d(a,"raw",function(){return d}),t.d(a,"relativePath",function(){return T});var n=t("z3IF"),r=t("hDBU"),o=t("mXGw"),i=t("Jin1"),l=t("kebl"),m=t("1O2t"),s=t("/KD0"),u=t("fGNF"),c={normalDate:"d MMM yyy",keyboardDate:"d MMM yyy"};function p(){var e=o.useState(new Date),a=Object(r.default)(e,2),t=a[0],p=a[1];return o.createElement(m.b,{dateAdapter:u.a,locale:i.a,dateFormats:c},o.createElement(s.a,{clearable:!0,value:t,onChange:function(e){return p(e)},clearText:"vider",cancelText:"annuler",renderInput:function(e){return o.createElement(l.a,Object(n.a)({helperText:"Localization done right"},e))}}))}var d='import * as React from "react";\nimport frLocale from "date-fns/locale/fr";\nimport TextField from "@material-ui/core/TextField";\nimport { DatePicker, LocalizationProvider } from "@material-ui/pickers";\nimport DateFnsAdapter from "@material-ui/pickers/adapter/date-fns";\n\nconst formats = {\n  normalDate: "d MMM yyy",\n  keyboardDate: "d MMM yyy",\n};\n\nexport default function DateFnsLocalizationExample() {\n  const [value, setValue] = React.useState<Date | null>(new Date());\n\n  return (\n    <LocalizationProvider dateAdapter={DateFnsAdapter} locale={frLocale} dateFormats={formats}>\n      <DatePicker\n        clearable\n        value={value}\n        onChange={(newValue) => setValue(newValue)}\n        clearText="vider"\n        cancelText="annuler"\n        renderInput={(props) => <TextField helperText="Localization done right" {...props} />}\n      />\n    </LocalizationProvider>\n  );\n}\n',T="pages/guides/Formats.example.tsx"},n18a:function(e,a,t){"use strict";t.r(a);var n=t("2Fjn"),r=t("mXGw"),o=t.n(r),i=t("dDab"),l=t("7H8X"),m=t("Oyko"),s=t("14KL"),u=t("WGnI"),c=t("HSMe"),p=t.n(c),d=t("VK7u"),T=t("B3z7");a.default=function(e){var a=e.components;Object(n.a)(e,["components"]);return o.a.createElement(i.MDXTag,{name:"wrapper",components:a},o.a.createElement(u.b,{title:"Customize date management logic"}),o.a.createElement(i.MDXTag,{name:"h2",components:a},o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"h2",props:{id:"customization-date-management-logic",className:"anchor-link"}}),"Customization date management logic",o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"h2",props:{href:"#customization-date-management-logic",className:"anchor-link-style"}},"#")),o.a.createElement(i.MDXTag,{name:"p",components:a},"For some reason, like timezone management and localization you may need to control how datepickers are working\nwith your date management library."),o.a.createElement(l.a,null),o.a.createElement(i.MDXTag,{name:"h4",components:a},o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"h4",props:{id:"global-formats-customization",className:"anchor-link"}}),"Global formats customization",o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"h4",props:{href:"#global-formats-customization",className:"anchor-link-style"}},"#")),o.a.createElement(i.MDXTag,{name:"p",components:a},"All the formats used by the datepicker can be changed by ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"libFormats")," prop in ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"LocalizationProvider"),".\nFind all availble formats in ",o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"#utils-interface"}},"Adapter interface")),o.a.createElement(s.a,{source:d}),o.a.createElement(i.MDXTag,{name:"h4",components:a},o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"h4",props:{id:"override-date-logic",className:"anchor-link"}}),"Override date logic",o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"h4",props:{href:"#override-date-logic",className:"anchor-link-style"}},"#")),o.a.createElement(i.MDXTag,{name:"p",components:a},"It is also possible to extend any adapter we providing and change the logic of date manipulations.\nSimply extend exported version of ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"date-io")," adapter, and make it work as you need accordingly to ",o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"#utils-interface"}},"used interface")),o.a.createElement(i.MDXTag,{name:"blockquote",components:a},o.a.createElement(i.MDXTag,{name:"p",components:a,parentName:"blockquote"},"You can use ES6 class syntax or override values with the help of ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},".prototype")," Object property.")),o.a.createElement(s.a,{source:T}),o.a.createElement(i.MDXTag,{name:"h4",components:a},o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"h4",props:{id:"utils-interface",className:"anchor-link"}}),"Utils interface",o.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"h4",props:{href:"#utils-interface",className:"anchor-link-style"}},"#")),o.a.createElement(i.MDXTag,{name:"p",components:a},o.a.createElement(i.MDXTag,{name:"em",components:a,parentName:"p"},"Note")," TDate - date object passed from the state (moment, native Date or Luxon`s DateTime)"),o.a.createElement(m.a,{language:"ts",children:p.a}))}}},[["67X/","5d41","9da1"]]]);