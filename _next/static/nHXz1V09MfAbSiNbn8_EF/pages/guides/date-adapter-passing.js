(window.webpackJsonp=window.webpackJsonp||[]).push([["5ab6"],{"+SVw":function(e,a,t){"use strict";t.r(a);var n=t("2Fjn"),r=t("mXGw"),o=t.n(r),p=t("dDab"),c=t("7H8X"),s=(t("Oyko"),t("14KL")),l=t("WGnI"),m=t("4D4E");a.default=function(e){var a=e.components;Object(n.a)(e,["components"]);return o.a.createElement(p.MDXTag,{name:"wrapper",components:a},o.a.createElement(l.b,{title:"Customize date management logic"}),o.a.createElement(p.MDXTag,{name:"h2",components:a},o.a.createElement(p.MDXTag,{name:"a",components:a,parentName:"h2",props:{id:"passing-date-adapter-down-to-pickers",className:"anchor-link"}}),"Passing date adapter down to pickers",o.a.createElement(p.MDXTag,{name:"a",components:a,parentName:"h2",props:{href:"#passing-date-adapter-down-to-pickers",className:"anchor-link-style"}},"#")),o.a.createElement(p.MDXTag,{name:"p",components:a},"There are a couple of ways to pass date-io adapter to pickers components."),o.a.createElement(c.a,null),o.a.createElement(p.MDXTag,{name:"h4",components:a},o.a.createElement(p.MDXTag,{name:"a",components:a,parentName:"h4",props:{id:"context-vs-dateadapter-prop",className:"anchor-link"}}),"Context vs dateAdapter prop",o.a.createElement(p.MDXTag,{name:"a",components:a,parentName:"h4",props:{href:"#context-vs-dateadapter-prop",className:"anchor-link-style"}},"#")),o.a.createElement(p.MDXTag,{name:"p",components:a},"Recomended way to pass date adapter is using our ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"LocalizationProvider")," and pass it through the context.\nAlso there is a ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"dateAdapter")," prop available, it allows to get rid of additional context."),o.a.createElement(p.MDXTag,{name:"p",components:a},"But you need to understand a few things:"),o.a.createElement(p.MDXTag,{name:"ul",components:a},o.a.createElement(p.MDXTag,{name:"li",components:a,parentName:"ul"},o.a.createElement(p.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"dateAdapter")," will create a new context instance inside the date-picker, it may impact rendering performance if you have a lot of pickers on the screen"),o.a.createElement(p.MDXTag,{name:"li",components:a,parentName:"ul"},"You must make sure your adapter is properly memoized before passing it down\n(if not â€“ all components tree inside any picker will always rerender on your component change)")),o.a.createElement(s.a,{source:m}))}},"4D4E":function(e,a,t){"use strict";t.r(a),t.d(a,"default",function(){return d}),t.d(a,"raw",function(){return u}),t.d(a,"relativePath",function(){return f});var n=t("z3IF"),r=t("hDBU"),o=t("mXGw"),p=t("8fbb"),c=t("4IId"),s=t("kebl"),l=t("/KD0"),m=t("fGNF"),i=new m.a({locale:p.a});function d(){var e=o.useState(c.a),a=Object(r.default)(e,1)[0],t=o.useState(new Date),p=Object(r.default)(t,2),d=p[0],u=p[1],f=o.useMemo(function(){return new m.a({locale:a})},[a]);return o.createElement(o.Fragment,null,o.createElement(l.a,{renderInput:function(e){return o.createElement(s.a,e)},value:d,onChange:function(e){return u(e)},dateAdapter:i}),o.createElement(l.a,{value:d,onChange:function(e){return u(e)},dateAdapter:f,renderInput:function(e){return o.createElement(s.a,Object(n.a)({helperText:"In case you need to generate adapter from state"},e))}}))}var u='import * as React from "react";\nimport ruLocale from "date-fns/locale/ru";\nimport deLocale from "date-fns/locale/de";\nimport TextField from "@material-ui/core/TextField";\nimport { DatePicker } from "@material-ui/pickers";\nimport DateFnsAdapter from "@material-ui/pickers/adapter/date-fns";\n\nconst staticDateAdapter = new DateFnsAdapter({ locale: ruLocale });\n\nexport default function UsingDateAdapterProp() {\n  const [locale] = React.useState(deLocale);\n  const [value, setValue] = React.useState<Date | null>(new Date());\n\n  const memoizedDateAdapter = React.useMemo(() => {\n    return new DateFnsAdapter({ locale });\n  }, [locale]);\n\n  return (\n    <React.Fragment>\n      <DatePicker\n        renderInput={(props) => <TextField {...props} />}\n        value={value}\n        onChange={(newValue) => setValue(newValue)}\n        dateAdapter={staticDateAdapter}\n      />\n      <DatePicker\n        value={value}\n        onChange={(newValue) => setValue(newValue)}\n        dateAdapter={memoizedDateAdapter}\n        renderInput={(props) => (\n          <TextField helperText="In case you need to generate adapter from state" {...props} />\n        )}\n      />\n    </React.Fragment>\n  );\n}\n',f="pages/guides/DateAdapterProp.example.tsx"},yTRv:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/date-adapter-passing",function(){var e=t("+SVw");return{page:e.default||e}}])}},[["yTRv","5d41","9da1"]]]);