{"version":3,"file":"static/chunks/pickers.js","sources":["webpack:///../node_modules/@material-ui/pickers/src/DatePicker/DatePicker.ts","webpack:///../node_modules/@material-ui/pickers/src/DatePicker/DatePickerToolbar.tsx","webpack:///../node_modules/@material-ui/pickers/src/DatePicker/index.ts","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/DateRangeDelimiter.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/DateRangePicker.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/DateRangePickerDay.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/DateRangePickerInput.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/DateRangePickerToolbar.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/DateRangePickerView.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/DateRangePickerViewDesktop.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/DateRangePickerViewMobile.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateRangePicker/date-range-manager.ts","webpack:///../node_modules/@material-ui/pickers/src/DateTimePicker/DateTimePicker.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateTimePicker/DateTimePickerTabs.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateTimePicker/DateTimePickerToolbar.tsx","webpack:///../node_modules/@material-ui/pickers/src/DateTimePicker/date-time-utils.ts","webpack:///../node_modules/@material-ui/pickers/src/DateTimePicker/index.ts","webpack:///../node_modules/@material-ui/pickers/src/LocalizationProvider.tsx","webpack:///../node_modules/@material-ui/pickers/src/Picker/Picker.tsx","webpack:///../node_modules/@material-ui/pickers/src/Picker/makePickerWithState.tsx","webpack:///../node_modules/@material-ui/pickers/src/TimePicker/TimePicker.tsx","webpack:///../node_modules/@material-ui/pickers/src/TimePicker/TimePickerToolbar.tsx","webpack:///../node_modules/@material-ui/pickers/src/TimePicker/index.tsx","webpack:///../node_modules/@material-ui/pickers/src/_helpers/date-utils.ts","webpack:///../node_modules/@material-ui/pickers/src/_helpers/text-field-helper.ts","webpack:///../node_modules/@material-ui/pickers/src/_helpers/time-utils.ts","webpack:///../node_modules/@material-ui/pickers/src/_helpers/utils.ts","webpack:///../node_modules/@material-ui/pickers/src/_shared/ArrowSwitcher.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/KeyboardDateInput.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/PickerToolbar.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/PickersModalDialog.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/PickersPopper.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/PureDateInput.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/ToolbarButton.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/ToolbarText.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/date-helpers-hooks.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/useCanAutoFocus.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/useIsLandscape.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/useKeyDown.ts","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/useMaskedInput.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/useOpenState.ts","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/usePickerState.ts","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/useUtils.ts","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/useValidation.ts","webpack:///../node_modules/@material-ui/pickers/src/_shared/hooks/useViews.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/icons/ArrowDropDown.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/icons/ArrowLeft.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/icons/ArrowRight.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/icons/CalendarIcon.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/icons/Clock.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/icons/DateRange.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/icons/Pen.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/icons/Time.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/withDateAdapterProp.tsx","webpack:///../node_modules/@material-ui/pickers/src/_shared/withDefaultProps.tsx","webpack:///../node_modules/@material-ui/pickers/src/constants/dimensions.ts","webpack:///../node_modules/@material-ui/pickers/src/constants/prop-types.ts","webpack:///../node_modules/@material-ui/pickers/src/index.ts","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/Calendar.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/CalendarHeader.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/CalendarView.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/Day.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/FadeTransitionGroup.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/Month.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/MonthSelection.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/SlideTransition.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/Year.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/YearSelection.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Calendar/useCalendarState.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Clock/Clock.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Clock/ClockNumber.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Clock/ClockNumbers.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Clock/ClockPointer.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/Clock/ClockView.tsx","webpack:///../node_modules/@material-ui/pickers/src/views/MobileKeyboardInputView.tsx","webpack:///../node_modules/@material-ui/pickers/src/wrappers/DesktopTooltipWrapper.tsx","webpack:///../node_modules/@material-ui/pickers/src/wrappers/DesktopWrapper.tsx","webpack:///../node_modules/@material-ui/pickers/src/wrappers/MobileWrapper.tsx","webpack:///../node_modules/@material-ui/pickers/src/wrappers/ResponsiveWrapper.tsx","webpack:///../node_modules/@material-ui/pickers/src/wrappers/StaticWrapper.tsx","webpack:///../node_modules/@material-ui/pickers/src/wrappers/Wrapper.tsx","webpack:///../node_modules/@material-ui/pickers/src/wrappers/WrapperVariantContext.tsx","webpack:///../node_modules/@material-ui/pickers/src/wrappers/makeWrapperComponent.tsx"],"sourcesContent":["import { useUtils } from '../_shared/hooks/useUtils';\nimport { DatePickerToolbar } from './DatePickerToolbar';\nimport { WithViewsProps } from '../Picker/SharedPickerProps';\nimport { ResponsiveWrapper } from '../wrappers/ResponsiveWrapper';\nimport { useParsedDate, OverrideParsableDateProps } from '../_shared/hooks/date-helpers-hooks';\nimport { ExportedCalendarViewProps } from '../views/Calendar/CalendarView';\nimport { MobileWrapper, DesktopWrapper, StaticWrapper, SomeWrapper } from '../wrappers/Wrapper';\nimport { makeValidationHook, ValidationProps } from '../_shared/hooks/useValidation';\nimport { ParsableDate, defaultMinDate, defaultMaxDate } from '../constants/prop-types';\nimport {\n  makePickerWithStateAndWrapper,\n  AllPickerProps,\n  SharedPickerProps,\n} from '../Picker/makePickerWithState';\nimport { getFormatAndMaskByViews, DateValidationError, validateDate } from '../_helpers/date-utils';\n\nexport type DatePickerView = 'year' | 'date' | 'month';\n\nexport interface BaseDatePickerProps<TDate>\n  extends WithViewsProps<'year' | 'date' | 'month'>,\n    ValidationProps<DateValidationError, ParsableDate>,\n    OverrideParsableDateProps<TDate, ExportedCalendarViewProps<TDate>, 'minDate' | 'maxDate'> {}\n\nconst datePickerConfig = {\n  useValidation: makeValidationHook<\n    DateValidationError,\n    ParsableDate,\n    BaseDatePickerProps<unknown>\n  >(validateDate),\n  DefaultToolbarComponent: DatePickerToolbar,\n  useInterceptProps: ({\n    openTo = 'date',\n    views = ['year', 'date'],\n    minDate: __minDate = defaultMinDate,\n    maxDate: __maxDate = defaultMaxDate,\n    ...other\n  }: AllPickerProps<BaseDatePickerProps<unknown>>) => {\n    const utils = useUtils();\n    const minDate = useParsedDate(__minDate);\n    const maxDate = useParsedDate(__maxDate);\n\n    return {\n      views,\n      openTo,\n      minDate,\n      maxDate,\n      ...getFormatAndMaskByViews(views, utils),\n      ...other,\n    };\n  },\n};\n\ntype DatePickerComponent<TWrapper extends SomeWrapper> = <TDate>(\n  props: BaseDatePickerProps<TDate> & SharedPickerProps<TDate, TWrapper>\n) => JSX.Element;\n\nexport const DatePicker = makePickerWithStateAndWrapper<BaseDatePickerProps<unknown>>(\n  ResponsiveWrapper,\n  {\n    name: 'MuiDatePicker',\n    ...datePickerConfig,\n  }\n) as DatePickerComponent<typeof ResponsiveWrapper>;\n\nexport type DatePickerProps = React.ComponentProps<typeof DatePicker>;\n\nexport const MobileDatePicker = makePickerWithStateAndWrapper<BaseDatePickerProps<unknown>>(\n  MobileWrapper,\n  {\n    name: 'MuiMobileDatePicker',\n    ...datePickerConfig,\n  }\n) as DatePickerComponent<typeof MobileWrapper>;\n\nexport type MobileDatePickerProps = React.ComponentProps<typeof MobileDatePicker>;\n\nexport const DesktopDatePicker = makePickerWithStateAndWrapper<BaseDatePickerProps<unknown>>(\n  DesktopWrapper,\n  {\n    name: 'MuiDesktopDatePicker',\n    ...datePickerConfig,\n  }\n);\n\nexport type DesktopDatePickerProps = React.ComponentProps<typeof DesktopDatePicker>;\n\nexport const StaticDatePicker = makePickerWithStateAndWrapper<BaseDatePickerProps<unknown>>(\n  StaticWrapper,\n  {\n    name: 'MuiStaticDatePicker',\n    ...datePickerConfig,\n  }\n) as DatePickerComponent<typeof StaticWrapper>;\n\nexport type StaticDatePickerProps = React.ComponentProps<typeof StaticDatePicker>;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PickerToolbar from '../_shared/PickerToolbar';\nimport { DatePickerView } from './DatePicker';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { withDefaultProps } from '../_shared/withDefaultProps';\nimport { ToolbarComponentProps } from '../Picker/SharedPickerProps';\nimport { isYearAndMonthViews, isYearOnlyView } from '../_helpers/date-utils';\n\nconst muiPickersComponentConfig = { name: 'MuiPickersDatePickerToolbar' };\n\nexport const useStyles = makeStyles(\n  {\n    root: {},\n    dateTitleLandscape: {\n      margin: 'auto 16px auto auto',\n    },\n    penIcon: {\n      position: 'relative',\n      top: 4,\n    },\n  },\n  muiPickersComponentConfig\n);\n\nexport const DatePickerToolbar: React.FC<ToolbarComponentProps> = withDefaultProps(\n  muiPickersComponentConfig,\n  ({\n    date,\n    views,\n    isLandscape,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    onChange,\n    toolbarPlaceholder = '––',\n    toolbarTitle = 'SELECT DATE',\n    ...other\n  }) => {\n    const utils = useUtils();\n    const classes = useStyles();\n\n    const dateText = React.useMemo(() => {\n      if (!date) {\n        return toolbarPlaceholder;\n      }\n\n      if (toolbarFormat) {\n        return utils.formatByString(date, toolbarFormat);\n      }\n\n      if (isYearOnlyView(views as DatePickerView[])) {\n        return utils.format(date, 'year');\n      }\n\n      if (isYearAndMonthViews(views as DatePickerView[])) {\n        return utils.format(date, 'month');\n      }\n\n      // Little localization hack (Google is doing the same for android native pickers):\n      // For english localization it is convenient to include weekday into the date \"Mon, Jun 1\"\n      // For other locales using strings like \"June 1\", without weekday\n      return /en/.test(utils.getCurrentLocaleCode())\n        ? utils.format(date, 'normalDateWithWeekday')\n        : utils.format(date, 'normalDate');\n    }, [date, toolbarFormat, toolbarPlaceholder, utils, views]);\n\n    return (\n      <PickerToolbar\n        className={classes.root}\n        toolbarTitle={toolbarTitle}\n        isMobileKeyboardViewOpen={isMobileKeyboardViewOpen}\n        toggleMobileKeyboardView={toggleMobileKeyboardView}\n        isLandscape={isLandscape}\n        penIconClassName={classes.penIcon}\n        {...other}\n      >\n        <Typography\n          variant=\"h4\"\n          data-mui-test=\"datepicker-toolbar-date\"\n          align={isLandscape ? 'left' : 'center'}\n          className={clsx({ [classes.dateTitleLandscape]: isLandscape })}\n        >\n          {dateText}\n        </Typography>\n      </PickerToolbar>\n    );\n  }\n);\n","export * from './DatePicker';\n","import Typography from '@material-ui/core/Typography';\nimport { styled } from '@material-ui/core/styles';\nimport { withDefaultProps } from '../_shared/withDefaultProps';\n\nexport const DateRangeDelimiter = withDefaultProps(\n  { name: 'MuiPickersDateRangeDelimiter' },\n  styled(Typography)({\n    margin: '0 16px',\n  })\n);\n\nexport type DateRangeDelimiterProps = React.ComponentProps<typeof DateRangeDelimiter>;\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { MobileWrapper } from '../wrappers/MobileWrapper';\nimport { withDefaultProps } from '../_shared/withDefaultProps';\nimport { useParsedDate } from '../_shared/hooks/date-helpers-hooks';\nimport { withDateAdapterProp } from '../_shared/withDateAdapterProp';\nimport { makeWrapperComponent } from '../wrappers/makeWrapperComponent';\nimport { ResponsiveTooltipWrapper } from '../wrappers/ResponsiveWrapper';\nimport { defaultMinDate, defaultMaxDate, date } from '../constants/prop-types';\nimport { DesktopTooltipWrapper } from '../wrappers/DesktopTooltipWrapper';\nimport { SomeWrapper, ExtendWrapper, StaticWrapper } from '../wrappers/Wrapper';\nimport { RangeInput, AllSharedDateRangePickerProps, DateRange } from './RangeTypes';\nimport { makeValidationHook, ValidationProps } from '../_shared/hooks/useValidation';\nimport { usePickerState, PickerStateValueManager } from '../_shared/hooks/usePickerState';\nimport { DateRangePickerView, ExportedDateRangePickerViewProps } from './DateRangePickerView';\nimport {\n  DateRangePickerInput,\n  ExportedDateRangePickerInputProps,\n  DateRangeInputProps,\n} from './DateRangePickerInput';\nimport {\n  parseRangeInputValue,\n  validateDateRange,\n  DateRangeValidationError,\n} from '../_helpers/date-utils';\n\nexport interface BaseDateRangePickerProps<TDate>\n  extends ExportedDateRangePickerViewProps<TDate>,\n    ValidationProps<DateRangeValidationError, RangeInput<TDate>>,\n    ExportedDateRangePickerInputProps {\n  /**\n   * Text for start input label and toolbar placeholder\n   *\n   * @default \"Start\"\n   */\n  startText?: React.ReactNode;\n  /**\n   * Text for end input label and toolbar placeholder\n   *\n   * @default \"end\"\n   */\n  endText?: React.ReactNode;\n}\n\ntype RangePickerComponent<TWrapper extends SomeWrapper> = <TDate>(\n  props: BaseDateRangePickerProps<TDate> &\n    ExtendWrapper<TWrapper> &\n    AllSharedDateRangePickerProps<TDate> &\n    React.RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport const useDateRangeValidation = makeValidationHook<\n  DateRangeValidationError,\n  RangeInput,\n  BaseDateRangePickerProps<any>\n>(validateDateRange, {\n  defaultValidationError: [null, null],\n  isSameError: (a, b) => a[1] === b[1] && a[0] === b[0],\n});\n\nexport function makeRangePicker<TWrapper extends SomeWrapper>(\n  name: string,\n  Wrapper: TWrapper\n): RangePickerComponent<TWrapper> {\n  const WrapperComponent = makeWrapperComponent<DateRangeInputProps>(Wrapper, {\n    KeyboardDateInputComponent: DateRangePickerInput,\n    PureDateInputComponent: DateRangePickerInput,\n  });\n\n  const rangePickerValueManager: PickerStateValueManager<any, any> = {\n    emptyValue: [null, null],\n    parseInput: parseRangeInputValue,\n    areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1]),\n  };\n\n  function RangePickerWithStateAndWrapper<TDate>({\n    calendars,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: __minDate = defaultMinDate as TDate,\n    maxDate: __maxDate = defaultMaxDate as TDate,\n    ...other\n  }: BaseDateRangePickerProps<TDate> &\n    AllSharedDateRangePickerProps<TDate> &\n    ExtendWrapper<TWrapper>) {\n    const utils = useUtils();\n    const minDate = useParsedDate(__minDate);\n    const maxDate = useParsedDate(__maxDate);\n    const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState<\n      'start' | 'end'\n    >('start');\n\n    const pickerStateProps = {\n      ...other,\n      value,\n      onChange,\n      inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    };\n\n    const restProps = {\n      ...other,\n      minDate,\n      maxDate,\n    };\n\n    const { pickerProps, inputProps, wrapperProps } = usePickerState<\n      RangeInput<TDate>,\n      DateRange<TDate>\n    >(pickerStateProps, rangePickerValueManager);\n\n    const validationError = useDateRangeValidation(value, restProps);\n\n    const DateInputProps = {\n      ...inputProps,\n      ...restProps,\n      currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd,\n      startText,\n      endText,\n      mask,\n      validationError,\n    };\n\n    return (\n      <WrapperComponent wrapperProps={wrapperProps} DateInputProps={DateInputProps} {...restProps}>\n        <DateRangePickerView<any>\n          open={wrapperProps.open}\n          DateInputProps={DateInputProps}\n          calendars={calendars}\n          currentlySelectingRangeEnd={currentlySelectingRangeEnd}\n          setCurrentlySelectingRangeEnd={setCurrentlySelectingRangeEnd}\n          startText={startText}\n          endText={endText}\n          {...pickerProps}\n          {...restProps}\n        />\n      </WrapperComponent>\n    );\n  }\n\n  RangePickerWithStateAndWrapper.propTypes = {\n    value: PropTypes.arrayOf(date).isRequired,\n    onChange: PropTypes.func.isRequired,\n    startText: PropTypes.node,\n    endText: PropTypes.node,\n  } as any;\n\n  const FinalPickerComponent = withDefaultProps(\n    { name },\n    withDateAdapterProp(RangePickerWithStateAndWrapper)\n  );\n\n  // @ts-ignore @see lib/src/Picker/makePickerWithState.tsx:95\n  return React.forwardRef<\n    HTMLDivElement,\n    React.ComponentProps<typeof RangePickerWithStateAndWrapper>\n  >((props, ref) => <FinalPickerComponent {...(props as any)} forwardedRef={ref} />);\n}\n\nexport const DateRangePicker = makeRangePicker(\n  'MuiPickersDateRangePicker',\n  ResponsiveTooltipWrapper\n);\n\nexport type DateRangePickerProps = React.ComponentProps<typeof DateRangePicker>;\n\nexport const DesktopDateRangePicker = makeRangePicker(\n  'MuiDesktopDateRangePicker',\n  DesktopTooltipWrapper\n);\n\nexport type DesktopDateRangePickerProps = React.ComponentProps<typeof DesktopDateRangePicker>;\n\nexport const MobileDateRangePicker = makeRangePicker('MuiMobileDateRangePicker', MobileWrapper);\n\nexport type MobileDateRangePickerProps = React.ComponentProps<typeof MobileDateRangePicker>;\n\nexport const StaticDateRangePicker = makeRangePicker('MuiStaticDateRangePicker', StaticWrapper);\n\nexport type StaticDateRangePickerProps = React.ComponentProps<typeof StaticDateRangePicker>;\n\nexport { DateRangeDelimiter } from './DateRangeDelimiter';\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport { DAY_MARGIN } from '../constants/dimensions';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { Day, DayProps, areDayPropsEqual } from '../views/Calendar/Day';\n\nexport interface DateRangeDayProps<TDate> extends DayProps<TDate> {\n  isHighlighting: boolean;\n  isEndOfHighlighting: boolean;\n  isStartOfHighlighting: boolean;\n  isPreviewing: boolean;\n  isEndOfPreviewing: boolean;\n  isStartOfPreviewing: boolean;\n}\n\nconst endBorderStyle = {\n  borderTopRightRadius: '50%',\n  borderBottomRightRadius: '50%',\n};\n\nconst startBorderStyle = {\n  borderTopLeftRadius: '50%',\n  borderBottomLeftRadius: '50%',\n};\n\nconst useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      '&:first-child $rangeIntervalDayPreview': {\n        ...startBorderStyle,\n        borderLeftColor: theme.palette.divider,\n      },\n      '&:last-child $rangeIntervalDayPreview': {\n        ...endBorderStyle,\n        borderRightColor: theme.palette.divider,\n      },\n    },\n    rangeIntervalDayHighlight: {\n      borderRadius: 0,\n      color: theme.palette.primary.contrastText,\n      backgroundColor: fade(theme.palette.primary.light, 0.6),\n      '&:first-child': startBorderStyle,\n      '&:last-child': endBorderStyle,\n    },\n    rangeIntervalDayHighlightStart: {\n      ...startBorderStyle,\n      paddingLeft: 0,\n      marginLeft: DAY_MARGIN / 2,\n    },\n    rangeIntervalDayHighlightEnd: {\n      ...endBorderStyle,\n      paddingRight: 0,\n      marginRight: DAY_MARGIN / 2,\n    },\n    day: {\n      // Required to overlap preview border\n      transform: 'scale(1.1)',\n      '& > *': {\n        transform: 'scale(0.9)',\n      },\n    },\n    dayOutsideRangeInterval: {\n      '&:hover': {\n        border: `1px solid ${theme.palette.grey[500]}`,\n      },\n    },\n    dayInsideRangeInterval: {\n      color: theme.palette.getContrastText(fade(theme.palette.primary.light, 0.6)),\n    },\n    notSelectedDate: {\n      backgroundColor: 'transparent',\n    },\n    rangeIntervalPreview: {\n      // replace default day component margin with transparent border to avoid jumping on preview\n      border: '2px solid transparent',\n    },\n    rangeIntervalDayPreview: {\n      borderRadius: 0,\n      border: `2px dashed ${theme.palette.divider}`,\n      borderLeftColor: 'transparent',\n      borderRightColor: 'transparent',\n\n      '&$rangeIntervalDayPreviewStart': {\n        borderLeftColor: theme.palette.divider,\n        ...startBorderStyle,\n      },\n      '&$rangeIntervalDayPreviewEnd': {\n        borderRightColor: theme.palette.divider,\n        ...endBorderStyle,\n      },\n    },\n    rangeIntervalDayPreviewStart: {},\n    rangeIntervalDayPreviewEnd: {},\n  }),\n  { name: 'MuiPickersDateRangeDay' }\n);\n\nexport function PureDateRangeDay<TDate>(props: DateRangeDayProps<TDate>) {\n  const {\n    className,\n    day,\n    inCurrentMonth,\n    isEndOfHighlighting,\n    isEndOfPreviewing,\n    isHighlighting,\n    isPreviewing,\n    isStartOfHighlighting,\n    isStartOfPreviewing,\n    selected,\n    ...other\n  } = props;\n  const utils = useUtils();\n  const classes = useStyles();\n\n  const isEndOfMonth = utils.isSameDay(day, utils.endOfMonth(day));\n  const isStartOfMonth = utils.isSameDay(day, utils.startOfMonth(day));\n\n  const shouldRenderHighlight = isHighlighting && inCurrentMonth;\n  const shouldRenderPreview = isPreviewing && inCurrentMonth;\n\n  return (\n    <div\n      data-mui-test={shouldRenderHighlight ? 'DateRangeHighlight' : undefined}\n      className={clsx(classes.root, {\n        [classes.rangeIntervalDayHighlight]: shouldRenderHighlight,\n        [classes.rangeIntervalDayHighlightEnd]: isEndOfHighlighting || isEndOfMonth,\n        [classes.rangeIntervalDayHighlightStart]: isStartOfHighlighting || isStartOfMonth,\n      })}\n    >\n      <div\n        data-mui-test={shouldRenderPreview ? 'DateRangePreview' : undefined}\n        className={clsx(classes.rangeIntervalPreview, {\n          [classes.rangeIntervalDayPreview]: shouldRenderPreview,\n          [classes.rangeIntervalDayPreviewEnd]: isEndOfPreviewing || isEndOfMonth,\n          [classes.rangeIntervalDayPreviewStart]: isStartOfPreviewing || isStartOfMonth,\n        })}\n      >\n        <Day<any>\n          {...other}\n          disableMargin\n          allowSameDateSelection\n          allowKeyboardControl={false}\n          day={day}\n          selected={selected}\n          inCurrentMonth={inCurrentMonth}\n          data-mui-test=\"DateRangeDay\"\n          className={clsx(\n            classes.day,\n            {\n              [classes.notSelectedDate]: !selected,\n              [classes.dayOutsideRangeInterval]: !isHighlighting,\n              [classes.dayInsideRangeInterval]: !selected && isHighlighting,\n            },\n            className\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nPureDateRangeDay.displayName = 'DateRangeDay';\n\nexport const DateRangeDay = React.memo(PureDateRangeDay, (prevProps, nextProps) => {\n  return (\n    prevProps.isHighlighting === nextProps.isHighlighting &&\n    prevProps.isEndOfHighlighting === nextProps.isEndOfHighlighting &&\n    prevProps.isStartOfHighlighting === nextProps.isStartOfHighlighting &&\n    prevProps.isPreviewing === nextProps.isPreviewing &&\n    prevProps.isEndOfPreviewing === nextProps.isEndOfPreviewing &&\n    prevProps.isStartOfPreviewing === nextProps.isStartOfPreviewing &&\n    areDayPropsEqual(prevProps, nextProps)\n  );\n}) as typeof PureDateRangeDay;\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { RangeInput, DateRange, CurrentlySelectingRangeEndProps } from './RangeTypes';\nimport { useMaskedInput } from '../_shared/hooks/useMaskedInput';\nimport { DateRangeValidationError } from '../_helpers/date-utils';\nimport { WrapperVariantContext } from '../wrappers/WrapperVariantContext';\nimport { mergeRefs, executeInTheNextEventLoopTick } from '../_helpers/utils';\nimport { DateInputProps, MuiTextFieldProps } from '../_shared/PureDateInput';\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      display: 'flex',\n      alignItems: 'baseline',\n      [theme.breakpoints.down('xs')]: {\n        flexDirection: 'column',\n        alignItems: 'center',\n      },\n    },\n    toLabelDelimiter: {\n      margin: '8px 0',\n      [theme.breakpoints.up('sm')]: {\n        margin: '0 16px',\n      },\n    },\n  }),\n  { name: 'MuiPickersDateRangePickerInput' }\n);\n\nexport interface ExportedDateRangePickerInputProps {\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   * renderInput={(startProps, endProps) => (\n       <React.Fragment>\n         <TextField {...startProps} />\n         <Typography> to <Typography>\n         <TextField {...endProps} />\n       </React.Fragment>;\n     )}\n     />\n   * ````\n   */\n  renderInput: (startProps: MuiTextFieldProps, endProps: MuiTextFieldProps) => React.ReactElement;\n}\n\nexport interface DateRangeInputProps\n  extends ExportedDateRangePickerInputProps,\n    CurrentlySelectingRangeEndProps,\n    Omit<\n      DateInputProps<RangeInput<any>, DateRange<any>>,\n      'validationError' | 'renderInput' | 'forwardedRef'\n    > {\n  startText: React.ReactNode;\n  endText: React.ReactNode;\n  forwardedRef?: React.Ref<HTMLDivElement>;\n  containerRef?: React.Ref<HTMLDivElement>;\n  validationError: DateRangeValidationError;\n}\n\nexport const DateRangePickerInput: React.FC<DateRangeInputProps> = ({\n  containerRef,\n  currentlySelectingRangeEnd,\n  disableOpenPicker,\n  endText,\n  forwardedRef,\n  onBlur,\n  onChange,\n  open,\n  openPicker,\n  rawValue,\n  rawValue: [start, end],\n  readOnly,\n  renderInput,\n  setCurrentlySelectingRangeEnd,\n  startText,\n  TextFieldProps,\n  validationError: [startValidationError, endValidationError],\n  ...other\n}) => {\n  const utils = useUtils();\n  const classes = useStyles();\n  const startRef = React.useRef<HTMLInputElement>(null);\n  const endRef = React.useRef<HTMLInputElement>(null);\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n\n  React.useEffect(() => {\n    if (!open) {\n      return;\n    }\n\n    if (currentlySelectingRangeEnd === 'start') {\n      startRef.current?.focus();\n    } else if (currentlySelectingRangeEnd === 'end') {\n      endRef.current?.focus();\n    }\n  }, [currentlySelectingRangeEnd, open]);\n\n  // TODO: rethink this approach. We do not need to wait for calendar to be updated to rerender input (looks like freezing)\n  // TODO: so simply break 1 react's commit phase in 2 (first for input and second for calendars) by executing onChange in the next tick\n  const lazyHandleChangeCallback = React.useCallback(\n    (...args: Parameters<typeof onChange>) =>\n      executeInTheNextEventLoopTick(() => onChange(...args)),\n    [onChange]\n  );\n\n  const handleStartChange = (date: unknown, inputString?: string) => {\n    lazyHandleChangeCallback([date, utils.date(end)], inputString);\n  };\n\n  const handleEndChange = (date: unknown, inputString?: string) => {\n    lazyHandleChangeCallback([utils.date(start), date], inputString);\n  };\n\n  const openRangeStartSelection = () => {\n    if (setCurrentlySelectingRangeEnd) {\n      setCurrentlySelectingRangeEnd('start');\n    }\n    if (!disableOpenPicker) {\n      openPicker();\n    }\n  };\n\n  const openRangeEndSelection = () => {\n    if (setCurrentlySelectingRangeEnd) {\n      setCurrentlySelectingRangeEnd('end');\n    }\n    if (!disableOpenPicker) {\n      openPicker();\n    }\n  };\n\n  const openOnFocus = wrapperVariant === 'desktop';\n  const startInputProps = useMaskedInput({\n    ...other,\n    readOnly,\n    rawValue: start,\n    onChange: handleStartChange,\n    label: startText,\n    validationError: startValidationError !== null,\n    TextFieldProps: {\n      ...TextFieldProps,\n      ref: startRef,\n      variant: 'outlined',\n      focused: open && currentlySelectingRangeEnd === 'start',\n    },\n    inputProps: {\n      onClick: !openOnFocus ? openRangeStartSelection : undefined,\n      onFocus: openOnFocus ? openRangeStartSelection : undefined,\n    },\n  });\n\n  const endInputProps = useMaskedInput({\n    ...other,\n    readOnly,\n    label: endText,\n    rawValue: end,\n    onChange: handleEndChange,\n    validationError: endValidationError !== null,\n    TextFieldProps: {\n      ...TextFieldProps,\n      ref: endRef,\n      variant: 'outlined',\n      focused: open && currentlySelectingRangeEnd === 'end',\n    },\n    inputProps: {\n      onClick: !openOnFocus ? openRangeEndSelection : undefined,\n      onFocus: openOnFocus ? openRangeEndSelection : undefined,\n    },\n  });\n\n  return (\n    <div onBlur={onBlur} className={classes.root} ref={mergeRefs([containerRef, forwardedRef])}>\n      {renderInput(startInputProps, endInputProps)}\n    </div>\n  );\n};\n\nDateRangePickerInput.propTypes = {\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  getOpenDialogAriaText: PropTypes.func,\n  mask: PropTypes.string,\n  OpenPickerButtonProps: PropTypes.object,\n  openPickerIcon: PropTypes.node,\n  renderInput: PropTypes.func.isRequired,\n  rifmFormatter: PropTypes.func,\n};\n","import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PickerToolbar from '../_shared/PickerToolbar';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { ToolbarButton } from '../_shared/ToolbarButton';\nimport { withDefaultProps } from '../_shared/withDefaultProps';\nimport { ToolbarComponentProps } from '../Picker/SharedPickerProps';\nimport { DateRange, CurrentlySelectingRangeEndProps } from './RangeTypes';\n\nconst muiComponentConfig = { name: 'MuiPickersDateRangePickerToolbarProps' };\nexport const useStyles = makeStyles(\n  {\n    root: {},\n    penIcon: {\n      position: 'relative',\n      top: 4,\n    },\n    dateTextContainer: {\n      display: 'flex',\n    },\n  },\n  muiComponentConfig\n);\n\ninterface DateRangePickerToolbarProps\n  extends CurrentlySelectingRangeEndProps,\n    Pick<\n      ToolbarComponentProps,\n      'isMobileKeyboardViewOpen' | 'toggleMobileKeyboardView' | 'toolbarTitle' | 'toolbarFormat'\n    > {\n  date: DateRange;\n  startText: React.ReactNode;\n  endText: React.ReactNode;\n  currentlySelectingRangeEnd: 'start' | 'end';\n  setCurrentlySelectingRangeEnd: (newSelectingEnd: 'start' | 'end') => void;\n}\n\nexport const DateRangePickerToolbar: React.FC<DateRangePickerToolbarProps> = withDefaultProps(\n  muiComponentConfig,\n  ({\n    currentlySelectingRangeEnd,\n    date: [start, end],\n    endText,\n    isMobileKeyboardViewOpen,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    toolbarTitle = 'SELECT DATE RANGE',\n  }) => {\n    const utils = useUtils();\n    const classes = useStyles();\n\n    const startDateValue = start\n      ? utils.formatByString(start, toolbarFormat || utils.formats.shortDate)\n      : startText;\n\n    const endDateValue = end\n      ? utils.formatByString(end, toolbarFormat || utils.formats.shortDate)\n      : endText;\n\n    return (\n      <PickerToolbar\n        className={classes.root}\n        toolbarTitle={toolbarTitle}\n        isMobileKeyboardViewOpen={isMobileKeyboardViewOpen}\n        toggleMobileKeyboardView={toggleMobileKeyboardView}\n        isLandscape={false}\n        penIconClassName={classes.penIcon}\n      >\n        <div className={classes.dateTextContainer}>\n          <ToolbarButton\n            variant={start !== null ? 'h5' : 'h6'}\n            value={startDateValue}\n            selected={currentlySelectingRangeEnd === 'start'}\n            onClick={() => setCurrentlySelectingRangeEnd('start')}\n          />\n          <Typography variant=\"h5\">&nbsp;{'–'}&nbsp;</Typography>\n          <ToolbarButton\n            variant={end !== null ? 'h5' : 'h6'}\n            value={endDateValue}\n            selected={currentlySelectingRangeEnd === 'end'}\n            onClick={() => setCurrentlySelectingRangeEnd('end')}\n          />\n        </div>\n      </PickerToolbar>\n    );\n  }\n);\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { isRangeValid } from '../_helpers/date-utils';\nimport { BasePickerProps } from '../typings/BasePicker';\nimport { calculateRangeChange } from './date-range-manager';\nimport { useUtils, useNow } from '../_shared/hooks/useUtils';\nimport { SharedPickerProps } from '../Picker/SharedPickerProps';\nimport { DateRangePickerToolbar } from './DateRangePickerToolbar';\nimport { useParsedDate } from '../_shared/hooks/date-helpers-hooks';\nimport { useCalendarState } from '../views/Calendar/useCalendarState';\nimport { DateRangePickerViewMobile } from './DateRangePickerViewMobile';\nimport { defaultMaxDate, defaultMinDate } from '../constants/prop-types';\nimport { WrapperVariantContext } from '../wrappers/WrapperVariantContext';\nimport { MobileKeyboardInputView } from '../views/MobileKeyboardInputView';\nimport { DateRangePickerInput, DateRangeInputProps } from './DateRangePickerInput';\nimport { RangeInput, DateRange, CurrentlySelectingRangeEndProps } from './RangeTypes';\nimport { ExportedCalendarViewProps, defaultReduceAnimations } from '../views/Calendar/CalendarView';\nimport {\n  DateRangePickerViewDesktop,\n  ExportedDesktopDateRangeCalendarProps,\n} from './DateRangePickerViewDesktop';\n\ntype BaseCalendarPropsToReuse<TDate> = Omit<\n  ExportedCalendarViewProps<TDate>,\n  'onYearChange' | 'renderDay'\n>;\n\nexport interface ExportedDateRangePickerViewProps<TDate>\n  extends BaseCalendarPropsToReuse<TDate>,\n    ExportedDesktopDateRangeCalendarProps<TDate>,\n    Omit<BasePickerProps, 'value' | 'onChange'> {\n  /**\n   * if `true` after selecting `start` date  calendar will not automatically switch to the month of `end` date\n   *\n   * @default false\n   */\n  disableAutoMonthSwitching?: boolean;\n}\n\ninterface DateRangePickerViewProps<TDate>\n  extends CurrentlySelectingRangeEndProps,\n    ExportedDateRangePickerViewProps<TDate>,\n    SharedPickerProps<RangeInput<TDate>, DateRange<TDate>, DateRangeInputProps> {\n  open: boolean;\n  startText: React.ReactNode;\n  endText: React.ReactNode;\n}\n\nexport function DateRangePickerView<TDate>(props: DateRangePickerViewProps<TDate>) {\n  const {\n    calendars = 2,\n    className,\n    currentlySelectingRangeEnd,\n    date,\n    DateInputProps,\n    disableAutoMonthSwitching = false,\n    disableFuture,\n    disableHighlightToday,\n    disablePast,\n    endText,\n    isMobileKeyboardViewOpen,\n    maxDate: unparsedMaxDate = defaultMaxDate,\n    minDate: unparsedMinDate = defaultMinDate,\n    onDateChange,\n    onMonthChange,\n    open,\n    reduceAnimations = defaultReduceAnimations,\n    setCurrentlySelectingRangeEnd,\n    shouldDisableDate,\n    showToolbar,\n    startText,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    toolbarTitle,\n    ...other\n  } = props;\n\n  const now = useNow<TDate>();\n  const utils = useUtils<TDate>();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const minDate = useParsedDate(unparsedMinDate) as TDate;\n  const maxDate = useParsedDate(unparsedMaxDate) as TDate;\n\n  const [start, end] = date;\n  const {\n    changeMonth,\n    calendarState,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    changeFocusedDay,\n  } = useCalendarState({\n    date: start || end || now,\n    minDate,\n    maxDate,\n    reduceAnimations,\n    disablePast,\n    disableFuture,\n    onMonthChange,\n    shouldDisableDate,\n    disableSwitchToMonthOnDayFocus: true,\n  });\n\n  const toShowToolbar = showToolbar ?? wrapperVariant !== 'desktop';\n\n  const scrollToDayIfNeeded = (day: TDate | null) => {\n    if (!day || !utils.isValid(day) || isDateDisabled(day)) {\n      return;\n    }\n\n    const currentlySelectedDate = currentlySelectingRangeEnd === 'start' ? start : end;\n    if (currentlySelectedDate === null) {\n      // do not scroll if one of ages is not selected\n      return;\n    }\n\n    const displayingMonthRange = wrapperVariant === 'mobile' ? 0 : calendars - 1;\n    const currentMonthNumber = utils.getMonth(calendarState.currentMonth);\n    const requestedMonthNumber = utils.getMonth(day);\n\n    if (\n      !utils.isSameYear(calendarState.currentMonth, day) ||\n      requestedMonthNumber < currentMonthNumber ||\n      requestedMonthNumber > currentMonthNumber + displayingMonthRange\n    ) {\n      const newMonth =\n        currentlySelectingRangeEnd === 'start'\n          ? currentlySelectedDate\n          : // If need to focus end, scroll to the state when \"end\" is displaying in the last calendar\n            utils.addMonths(currentlySelectedDate, -displayingMonthRange);\n\n      changeMonth(newMonth);\n    }\n  };\n\n  React.useEffect(() => {\n    if (disableAutoMonthSwitching || !open) {\n      return;\n    }\n\n    scrollToDayIfNeeded(currentlySelectingRangeEnd === 'start' ? start : end);\n  }, [currentlySelectingRangeEnd, date]); // eslint-disable-line\n\n  const handleChange = React.useCallback(\n    (newDate: TDate | null) => {\n      const { nextSelection, newRange } = calculateRangeChange({\n        newDate,\n        utils,\n        range: date,\n        currentlySelectingRangeEnd,\n      });\n\n      setCurrentlySelectingRangeEnd(nextSelection);\n\n      const isFullRangeSelected =\n        currentlySelectingRangeEnd === 'end' && isRangeValid(utils, newRange);\n\n      onDateChange(\n        newRange as DateRange<TDate>,\n        wrapperVariant,\n        isFullRangeSelected ? 'finish' : 'partial'\n      );\n    },\n    [\n      currentlySelectingRangeEnd,\n      date,\n      onDateChange,\n      setCurrentlySelectingRangeEnd,\n      utils,\n      wrapperVariant,\n    ]\n  );\n\n  const renderView = () => {\n    const sharedCalendarProps = {\n      date,\n      isDateDisabled,\n      changeFocusedDay,\n      onChange: handleChange,\n      reduceAnimations,\n      disableHighlightToday,\n      onMonthSwitchingAnimationEnd,\n      changeMonth,\n      currentlySelectingRangeEnd,\n      disableFuture,\n      disablePast,\n      minDate,\n      maxDate,\n      ...calendarState,\n      ...other,\n    };\n\n    switch (wrapperVariant) {\n      case 'desktop': {\n        return <DateRangePickerViewDesktop calendars={calendars} {...sharedCalendarProps} />;\n      }\n\n      default: {\n        return <DateRangePickerViewMobile {...sharedCalendarProps} />;\n      }\n    }\n  };\n\n  return (\n    <div className={className}>\n      {toShowToolbar && (\n        <DateRangePickerToolbar\n          date={date}\n          isMobileKeyboardViewOpen={isMobileKeyboardViewOpen}\n          toggleMobileKeyboardView={toggleMobileKeyboardView}\n          currentlySelectingRangeEnd={currentlySelectingRangeEnd}\n          setCurrentlySelectingRangeEnd={setCurrentlySelectingRangeEnd}\n          startText={startText}\n          endText={endText}\n          toolbarTitle={toolbarTitle}\n          toolbarFormat={toolbarFormat}\n        />\n      )}\n\n      {isMobileKeyboardViewOpen ? (\n        <MobileKeyboardInputView>\n          <DateRangePickerInput disableOpenPicker ignoreInvalidInputs {...DateInputProps} />\n        </MobileKeyboardInputView>\n      ) : (\n        renderView()\n      )}\n    </div>\n  );\n}\n\nDateRangePickerView.propTypes = {\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  disableAutoMonthSwitching: PropTypes.bool,\n};\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DateRange } from './RangeTypes';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { calculateRangePreview } from './date-range-manager';\nimport { Calendar, CalendarProps } from '../views/Calendar/Calendar';\nimport { DateRangeDay, DateRangeDayProps } from './DateRangePickerDay';\nimport { defaultMinDate, defaultMaxDate } from '../constants/prop-types';\nimport { ArrowSwitcher, ExportedArrowSwitcherProps } from '../_shared/ArrowSwitcher';\nimport {\n  usePreviousMonthDisabled,\n  useNextMonthDisabled,\n} from '../_shared/hooks/date-helpers-hooks';\nimport {\n  isWithinRange,\n  isStartOfRange,\n  isEndOfRange,\n  DateValidationProps,\n} from '../_helpers/date-utils';\n\nexport interface ExportedDesktopDateRangeCalendarProps<TDate> {\n  /**\n   * How many calendars render on **desktop** DateRangePicker.\n   *\n   * @default 2\n   */\n  calendars?: 1 | 2 | 3;\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, DateRangeDayProps) => <DateRangePickerDay {...DateRangeDayProps} />\n   */\n  renderDay?: (date: TDate, DateRangeDayProps: DateRangeDayProps<TDate>) => JSX.Element;\n}\n\ninterface DesktopDateRangeCalendarProps<TDate>\n  extends ExportedDesktopDateRangeCalendarProps<TDate>,\n    Omit<CalendarProps<TDate>, 'renderDay'>,\n    DateValidationProps<TDate>,\n    ExportedArrowSwitcherProps {\n  date: DateRange<TDate | null>;\n  changeMonth: (date: TDate) => void;\n  currentlySelectingRangeEnd: 'start' | 'end';\n}\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n    rangeCalendarContainer: {\n      '&:not(:last-child)': {\n        borderRight: `2px solid ${theme.palette.divider}`,\n      },\n    },\n    calendar: {\n      minWidth: 312,\n      minHeight: 288,\n    },\n    arrowSwitcher: {\n      padding: '16px 16px 8px 16px',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n    },\n  }),\n  { name: 'MuiPickersDesktopDateRangeCalendar' }\n);\n\nfunction getCalendarsArray(calendars: ExportedDesktopDateRangeCalendarProps<unknown>['calendars']) {\n  switch (calendars) {\n    case 1:\n      return [0];\n    case 2:\n      return [0, 0];\n    case 3:\n      return [0, 0, 0];\n    // this will not work in IE11, but allows to support any amount of calendars\n    default:\n      return new Array(calendars).fill(0);\n  }\n}\n\nexport function DateRangePickerViewDesktop<TDate>(props: DesktopDateRangeCalendarProps<TDate>) {\n  const {\n    date,\n    calendars = 2,\n    changeMonth,\n    leftArrowButtonProps,\n    leftArrowButtonText,\n    leftArrowIcon,\n    rightArrowButtonProps,\n    rightArrowButtonText,\n    rightArrowIcon,\n    onChange,\n    disableFuture,\n    disablePast,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    minDate: __minDate,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    maxDate: __maxDate,\n    currentlySelectingRangeEnd,\n    currentMonth,\n    renderDay = (_, dateRangeProps) => <DateRangeDay {...dateRangeProps} />,\n    ...other\n  } = props;\n\n  const utils = useUtils<TDate>();\n  const classes = useStyles();\n  const minDate = __minDate || utils.date(defaultMinDate);\n  const maxDate = __maxDate || utils.date(defaultMaxDate);\n\n  const [rangePreviewDay, setRangePreviewDay] = React.useState<TDate | null>(null);\n\n  const isNextMonthDisabled = useNextMonthDisabled(currentMonth, { disableFuture, maxDate });\n  const isPreviousMonthDisabled = usePreviousMonthDisabled(currentMonth, { disablePast, minDate });\n\n  const previewingRange = calculateRangePreview({\n    utils,\n    range: date,\n    newDate: rangePreviewDay,\n    currentlySelectingRangeEnd,\n  });\n\n  const handleDayChange = React.useCallback(\n    (day: TDate | null) => {\n      setRangePreviewDay(null);\n      onChange(day);\n    },\n    [onChange]\n  );\n\n  const handlePreviewDayChange = (newPreviewRequest: TDate) => {\n    if (!isWithinRange(utils, newPreviewRequest, date)) {\n      setRangePreviewDay(newPreviewRequest);\n    } else {\n      setRangePreviewDay(null);\n    }\n  };\n\n  const CalendarTransitionProps = React.useMemo(\n    () => ({\n      onMouseLeave: () => setRangePreviewDay(null),\n    }),\n    []\n  );\n\n  const selectNextMonth = React.useCallback(() => {\n    changeMonth(utils.getNextMonth(currentMonth));\n  }, [changeMonth, currentMonth, utils]);\n\n  const selectPreviousMonth = React.useCallback(() => {\n    changeMonth(utils.getPreviousMonth(currentMonth));\n  }, [changeMonth, currentMonth, utils]);\n\n  return (\n    <div className={classes.root}>\n      {getCalendarsArray(calendars).map((_, index) => {\n        const monthOnIteration = utils.setMonth(currentMonth, utils.getMonth(currentMonth) + index);\n\n        return (\n          <div key={index} className={classes.rangeCalendarContainer}>\n            <ArrowSwitcher\n              className={classes.arrowSwitcher}\n              onLeftClick={selectPreviousMonth}\n              onRightClick={selectNextMonth}\n              isLeftHidden={index !== 0}\n              isRightHidden={index !== calendars - 1}\n              isLeftDisabled={isPreviousMonthDisabled}\n              isRightDisabled={isNextMonthDisabled}\n              leftArrowButtonProps={leftArrowButtonProps}\n              leftArrowButtonText={leftArrowButtonText}\n              leftArrowIcon={leftArrowIcon}\n              rightArrowButtonProps={rightArrowButtonProps}\n              rightArrowButtonText={rightArrowButtonText}\n              rightArrowIcon={rightArrowIcon}\n              text={utils.format(monthOnIteration, 'monthAndYear')}\n            />\n            <Calendar<TDate>\n              {...other}\n              key={index}\n              date={date}\n              className={classes.calendar}\n              onChange={handleDayChange}\n              currentMonth={monthOnIteration}\n              TransitionProps={CalendarTransitionProps}\n              renderDay={(day, __, DayProps) =>\n                renderDay(day, {\n                  isPreviewing: isWithinRange(utils, day, previewingRange),\n                  isStartOfPreviewing: isStartOfRange(utils, day, previewingRange),\n                  isEndOfPreviewing: isEndOfRange(utils, day, previewingRange),\n                  isHighlighting: isWithinRange(utils, day, date),\n                  isStartOfHighlighting: isStartOfRange(utils, day, date),\n                  isEndOfHighlighting: isEndOfRange(utils, day, date),\n                  onMouseEnter: () => handlePreviewDayChange(day),\n                  ...DayProps,\n                })\n              }\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { CalendarHeader, ExportedCalendarHeaderProps } from '../views/Calendar/CalendarHeader';\nimport { DateRange } from './RangeTypes';\nimport { DateRangeDay } from './DateRangePickerDay';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { Calendar, CalendarProps } from '../views/Calendar/Calendar';\nimport { defaultMinDate, defaultMaxDate } from '../constants/prop-types';\nimport { ExportedDesktopDateRangeCalendarProps } from './DateRangePickerViewDesktop';\nimport {\n  isWithinRange,\n  isStartOfRange,\n  isEndOfRange,\n  DateValidationProps,\n} from '../_helpers/date-utils';\n\nexport interface ExportedMobileDateRangeCalendarProps<TDate>\n  extends Pick<ExportedDesktopDateRangeCalendarProps<TDate>, 'renderDay'> {}\n\ninterface DesktopDateRangeCalendarProps<TDate>\n  extends ExportedMobileDateRangeCalendarProps<TDate>,\n    Omit<CalendarProps<TDate>, 'date' | 'renderDay'>,\n    DateValidationProps<TDate>,\n    ExportedCalendarHeaderProps<TDate> {\n  date: DateRange<TDate>;\n  changeMonth: (date: TDate) => void;\n}\n\nconst onlyDateView = ['date'] as ['date'];\n\nexport function DateRangePickerViewMobile<TDate>(props: DesktopDateRangeCalendarProps<TDate>) {\n  const {\n    changeMonth,\n    date,\n    leftArrowButtonProps,\n    leftArrowButtonText,\n    leftArrowIcon,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    minDate: __minDate,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    maxDate: __maxDate,\n    onChange,\n    rightArrowButtonProps,\n    rightArrowButtonText,\n    rightArrowIcon,\n    renderDay = (_, props) => <DateRangeDay<TDate> {...props} />,\n    ...other\n  } = props;\n\n  const utils = useUtils();\n  const minDate = __minDate || utils.date(defaultMinDate);\n  const maxDate = __maxDate || utils.date(defaultMaxDate);\n\n  return (\n    <React.Fragment>\n      <CalendarHeader\n        view=\"date\"\n        views={onlyDateView}\n        changeView={() => ({})}\n        onMonthChange={changeMonth as any}\n        leftArrowButtonText={leftArrowButtonText}\n        leftArrowButtonProps={leftArrowButtonProps}\n        leftArrowIcon={leftArrowIcon}\n        rightArrowButtonProps={rightArrowButtonProps}\n        rightArrowButtonText={rightArrowButtonText}\n        rightArrowIcon={rightArrowIcon}\n        minDate={minDate}\n        maxDate={maxDate}\n        {...other}\n      />\n      <Calendar<TDate>\n        {...other}\n        date={date}\n        onChange={onChange}\n        renderDay={(day, _, DayProps) =>\n          renderDay(day, {\n            isPreviewing: false,\n            isStartOfPreviewing: false,\n            isEndOfPreviewing: false,\n            isHighlighting: isWithinRange(utils, day, date),\n            isStartOfHighlighting: isStartOfRange(utils, day, date),\n            isEndOfHighlighting: isEndOfRange(utils, day, date),\n            ...DayProps,\n          })\n        }\n      />\n    </React.Fragment>\n  );\n}\n","import { DateRange } from './RangeTypes';\nimport { MuiPickersAdapter } from '../_shared/hooks/useUtils';\n\ninterface CalculateRangeChangeOptions {\n  utils: MuiPickersAdapter;\n  range: DateRange;\n  newDate: unknown;\n  currentlySelectingRangeEnd: 'start' | 'end';\n}\n\nexport function calculateRangeChange({\n  utils,\n  range,\n  newDate: selectedDate,\n  currentlySelectingRangeEnd,\n}: CalculateRangeChangeOptions): { nextSelection: 'start' | 'end'; newRange: DateRange } {\n  const [start, end] = range;\n\n  if (currentlySelectingRangeEnd === 'start') {\n    return Boolean(end) && utils.isAfter(selectedDate, end)\n      ? { nextSelection: 'end', newRange: [selectedDate, null] }\n      : { nextSelection: 'end', newRange: [selectedDate, end] };\n  }\n\n  return Boolean(start) && utils.isBefore(selectedDate, start)\n    ? { nextSelection: 'end', newRange: [selectedDate, null] }\n    : { nextSelection: 'start', newRange: [start, selectedDate] };\n}\n\nexport function calculateRangePreview(options: CalculateRangeChangeOptions): DateRange {\n  if (!options.newDate) {\n    return [null, null];\n  }\n\n  const [start, end] = options.range;\n  const { newRange } = calculateRangeChange(options);\n\n  if (!start || !end) {\n    return newRange;\n  }\n\n  const [previewStart, previewEnd] = newRange;\n  return options.currentlySelectingRangeEnd === 'end' ? [end, previewEnd] : [previewStart, start];\n}\n","import { useUtils } from '../_shared/hooks/useUtils';\nimport { DateTimePickerToolbar } from './DateTimePickerToolbar';\nimport { ExportedClockViewProps } from '../views/Clock/ClockView';\nimport { ResponsiveWrapper } from '../wrappers/ResponsiveWrapper';\nimport { pick12hOr24hFormat } from '../_helpers/text-field-helper';\nimport { useParsedDate, OverrideParsableDateProps } from '../_shared/hooks/date-helpers-hooks';\nimport { ExportedCalendarViewProps } from '../views/Calendar/CalendarView';\nimport { makePickerWithStateAndWrapper, SharedPickerProps } from '../Picker/makePickerWithState';\nimport { DesktopWrapper, MobileWrapper, StaticWrapper, SomeWrapper } from '../wrappers/Wrapper';\nimport { WithViewsProps, AllSharedPickerProps } from '../Picker/SharedPickerProps';\nimport { DateAndTimeValidationError, validateDateAndTime } from './date-time-utils';\nimport { makeValidationHook, ValidationProps } from '../_shared/hooks/useValidation';\nimport { ParsableDate, defaultMinDate, defaultMaxDate } from '../constants/prop-types';\n\nexport type DateTimePickerView = 'year' | 'date' | 'month' | 'hours' | 'minutes' | 'seconds';\n\ntype DateTimePickerViewsProps<TDate> = OverrideParsableDateProps<\n  TDate,\n  ExportedClockViewProps<TDate> & ExportedCalendarViewProps<TDate>,\n  'minDate' | 'maxDate' | 'minTime' | 'maxTime'\n>;\n\nexport interface BaseDateTimePickerProps<TDate>\n  extends WithViewsProps<'year' | 'date' | 'month' | 'hours' | 'minutes'>,\n    ValidationProps<DateAndTimeValidationError, ParsableDate>,\n    DateTimePickerViewsProps<TDate> {\n  /**\n   * To show tabs.\n   */\n  hideTabs?: boolean;\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon?: React.ReactNode;\n  /**\n   * Time tab icon.\n   */\n  timeIcon?: React.ReactNode;\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime?: ParsableDate<TDate>;\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime?: ParsableDate<TDate>;\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat?: string;\n}\n\nfunction useInterceptProps({\n  ampm,\n  inputFormat,\n  maxDate: __maxDate = defaultMaxDate,\n  maxDateTime: __maxDateTime,\n  maxTime: __maxTime,\n  minDate: __minDate = defaultMinDate,\n  minDateTime: __minDateTime,\n  minTime: __minTime,\n  openTo = 'date',\n  orientation = 'portrait',\n  views = ['year', 'date', 'hours', 'minutes'],\n  ...other\n}: BaseDateTimePickerProps<unknown> & AllSharedPickerProps) {\n  const utils = useUtils();\n  const minTime = useParsedDate(__minTime);\n  const maxTime = useParsedDate(__maxTime);\n  const minDate = useParsedDate(__minDate);\n  const maxDate = useParsedDate(__maxDate);\n  const minDateTime = useParsedDate(__minDateTime);\n  const maxDateTime = useParsedDate(__maxDateTime);\n  const willUseAmPm = ampm ?? utils.is12HourCycleInCurrentLocale();\n\n  if (orientation !== 'portrait') {\n    throw new Error('We are not supporting custom orientation for DateTimePicker yet :(');\n  }\n\n  return {\n    openTo,\n    views,\n    ampm: willUseAmPm,\n    ampmInClock: true,\n    orientation,\n    showToolbar: true,\n    showTabs: true,\n    allowSameDateSelection: true,\n    minDate: minDateTime || minDate,\n    minTime: minDateTime || minTime,\n    maxDate: maxDateTime || maxDate,\n    maxTime: maxDateTime || maxTime,\n    disableIgnoringDatePartForTimeValidation: Boolean(minDateTime || maxDateTime),\n    acceptRegex: willUseAmPm ? /[\\dap]/gi : /\\d/gi,\n    mask: '__/__/____ __:__',\n    disableMaskedInput: willUseAmPm,\n    inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n      localized: utils.formats.keyboardDateTime,\n      '12h': utils.formats.keyboardDateTime12h,\n      '24h': utils.formats.keyboardDateTime24h,\n    }),\n    ...other,\n  };\n}\n\nconst useValidation = makeValidationHook<\n  DateAndTimeValidationError,\n  ParsableDate,\n  BaseDateTimePickerProps<unknown>\n>(validateDateAndTime);\n\nconst dateTimePickerConfig = {\n  useInterceptProps,\n  useValidation,\n  DefaultToolbarComponent: DateTimePickerToolbar,\n};\n\ntype DateTimePickerComponent<TWrapper extends SomeWrapper> = <TDate>(\n  props: BaseDateTimePickerProps<TDate> & SharedPickerProps<TDate, TWrapper>\n) => JSX.Element;\n\nexport const DateTimePicker = makePickerWithStateAndWrapper<BaseDateTimePickerProps<unknown>>(\n  ResponsiveWrapper,\n  {\n    name: 'MuiDateTimePicker',\n    ...dateTimePickerConfig,\n  }\n) as DateTimePickerComponent<typeof ResponsiveWrapper>;\n\nexport type DateTimePickerProps = React.ComponentProps<typeof DateTimePicker>;\n\nexport const DesktopDateTimePicker = makePickerWithStateAndWrapper<\n  BaseDateTimePickerProps<unknown>\n>(DesktopWrapper, {\n  name: 'MuiDesktopDateTimePicker',\n  ...dateTimePickerConfig,\n}) as DateTimePickerComponent<typeof DesktopWrapper>;\n\nexport type DesktopDateTimePickerProps = React.ComponentProps<typeof DesktopDateTimePicker>;\n\nexport const MobileDateTimePicker = makePickerWithStateAndWrapper<BaseDateTimePickerProps<unknown>>(\n  MobileWrapper,\n  {\n    name: 'MuiMobileDateTimePicker',\n    ...dateTimePickerConfig,\n  }\n) as DateTimePickerComponent<typeof MobileWrapper>;\n\nexport type MobileDateTimePickerProps = React.ComponentProps<typeof MobileDateTimePicker>;\n\nexport const StaticDateTimePicker = makePickerWithStateAndWrapper<BaseDateTimePickerProps<unknown>>(\n  StaticWrapper,\n  {\n    name: 'MuiStaticDateTimePicker',\n    ...dateTimePickerConfig,\n  }\n) as DateTimePickerComponent<typeof StaticWrapper>;\n\nexport type StaticDateTimePickerProps = React.ComponentProps<typeof StaticDateTimePicker>;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { TimeIcon } from '../_shared/icons/Time';\nimport { DateTimePickerView } from './DateTimePicker';\nimport { DateRangeIcon } from '../_shared/icons/DateRange';\nimport { WrapperVariantContext } from '../wrappers/WrapperVariantContext';\n\nconst viewToTabIndex = (openView: DateTimePickerView) => {\n  if (openView === 'date' || openView === 'year') {\n    return 'date';\n  }\n\n  return 'time';\n};\n\nconst tabIndexToView = (tab: DateTimePickerView) => {\n  if (tab === 'date') {\n    return 'date';\n  }\n\n  return 'hours';\n};\n\nexport interface DateTimePickerTabsProps {\n  dateRangeIcon?: React.ReactNode;\n  onChange: (view: DateTimePickerView) => void;\n  timeIcon?: React.ReactNode;\n  view: DateTimePickerView;\n}\n\nexport const useStyles = makeStyles(\n  (theme) => {\n    const tabsBackground =\n      theme.palette.type === 'light'\n        ? theme.palette.primary.main\n        : theme.palette.background.default;\n\n    return {\n      root: {},\n      modeDesktop: {\n        order: 1,\n      },\n      tabs: {\n        color: theme.palette.getContrastText(tabsBackground),\n        backgroundColor: tabsBackground,\n      },\n    };\n  },\n  { name: 'MuiDateTimePickerTabs' }\n);\n\nconst DateTimePickerTabs: React.FC<DateTimePickerTabsProps> = (props) => {\n  const { dateRangeIcon = <DateRangeIcon />, onChange, timeIcon = <TimeIcon />, view } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const indicatorColor = theme.palette.type === 'light' ? 'secondary' : 'primary';\n\n  const handleChange = (e: React.ChangeEvent<{}>, value: DateTimePickerView) => {\n    if (value !== viewToTabIndex(view)) {\n      onChange(tabIndexToView(value));\n    }\n  };\n\n  return (\n    <Paper className={clsx(classes.root, { [classes.modeDesktop]: wrapperVariant === 'desktop' })}>\n      <Tabs\n        variant=\"fullWidth\"\n        value={viewToTabIndex(view)}\n        onChange={handleChange}\n        className={classes.tabs}\n        indicatorColor={indicatorColor}\n      >\n        <Tab\n          value=\"date\"\n          aria-label=\"pick date\"\n          icon={<React.Fragment>{dateRangeIcon}</React.Fragment>}\n        />\n        <Tab\n          value=\"time\"\n          aria-label=\"pick time\"\n          icon={<React.Fragment>{timeIcon}</React.Fragment>}\n        />\n      </Tabs>\n    </Paper>\n  );\n};\n\nexport default DateTimePickerTabs;\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ToolbarText from '../_shared/ToolbarText';\nimport PickerToolbar from '../_shared/PickerToolbar';\nimport { ToolbarButton } from '../_shared/ToolbarButton';\nimport DateTimePickerTabs from './DateTimePickerTabs';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { DateTimePickerView } from './DateTimePicker';\nimport { withDefaultProps } from '../_shared/withDefaultProps';\nimport { ToolbarComponentProps } from '../Picker/SharedPickerProps';\nimport { WrapperVariantContext } from '../wrappers/WrapperVariantContext';\n\nconst muiComponentConfig = { name: 'MuiDateTimePickerToolbar' };\n\nexport const useStyles = makeStyles(\n  {\n    root: {\n      paddingLeft: 16,\n      paddingRight: 16,\n      justifyContent: 'space-around',\n    },\n    separator: {\n      margin: '0 4px 0 2px',\n      cursor: 'default',\n    },\n    timeContainer: {\n      display: 'flex',\n    },\n    dateContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'flex-start',\n    },\n    timeTypography: {},\n    penIcon: {\n      position: 'absolute',\n      top: 8,\n      right: 8,\n    },\n  },\n  muiComponentConfig\n);\n\nexport const DateTimePickerToolbar: React.FC<ToolbarComponentProps> = withDefaultProps(\n  muiComponentConfig,\n  (props) => {\n    const {\n      ampm,\n      date,\n      dateRangeIcon,\n      hideTabs,\n      isMobileKeyboardViewOpen,\n      onChange,\n      openView,\n      setOpenView,\n      timeIcon,\n      toggleMobileKeyboardView,\n      toolbarFormat,\n      toolbarPlaceholder = '––',\n      toolbarTitle = 'SELECT DATE & TIME',\n      ...other\n    } = props;\n    const utils = useUtils();\n    const classes = useStyles();\n    const wrapperVariant = React.useContext(WrapperVariantContext);\n    const showTabs =\n      wrapperVariant === 'desktop'\n        ? true\n        : !hideTabs && typeof window !== 'undefined' && window.innerHeight > 667;\n\n    const formatHours = (time: unknown) =>\n      ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');\n\n    const dateText = React.useMemo(() => {\n      if (!date) {\n        return toolbarPlaceholder;\n      }\n\n      if (toolbarFormat) {\n        return utils.formatByString(date, toolbarFormat);\n      }\n\n      return utils.format(date, 'shortDate');\n    }, [date, toolbarFormat, toolbarPlaceholder, utils]);\n\n    return (\n      <React.Fragment>\n        {wrapperVariant !== 'desktop' && (\n          <PickerToolbar\n            toolbarTitle={toolbarTitle}\n            penIconClassName={classes.penIcon}\n            className={classes.root}\n            isMobileKeyboardViewOpen={isMobileKeyboardViewOpen}\n            toggleMobileKeyboardView={toggleMobileKeyboardView}\n            {...other}\n            isLandscape={false}\n          >\n            <div className={classes.dateContainer}>\n              <ToolbarButton\n                tabIndex={-1}\n                variant=\"subtitle1\"\n                onClick={() => setOpenView('year')}\n                selected={openView === 'year'}\n                value={date ? utils.format(date, 'year') : '–'}\n              />\n              <ToolbarButton\n                tabIndex={-1}\n                variant=\"h4\"\n                data-mui-test=\"datetimepicker-toolbar-date\"\n                onClick={() => setOpenView('date')}\n                selected={openView === 'date'}\n                value={dateText}\n              />\n            </div>\n            <div className={classes.timeContainer}>\n              <ToolbarButton\n                tabIndex={-1}\n                variant=\"h3\"\n                data-mui-test=\"hours\"\n                onClick={() => setOpenView('hours')}\n                selected={openView === 'hours'}\n                value={date ? formatHours(date) : '--'}\n                typographyClassName={classes.timeTypography}\n              />\n              <ToolbarText variant=\"h3\" value=\":\" className={classes.separator} />\n              <ToolbarButton\n                tabIndex={-1}\n                variant=\"h3\"\n                data-mui-test=\"minutes\"\n                onClick={() => setOpenView('minutes')}\n                selected={openView === 'minutes'}\n                value={date ? utils.format(date, 'minutes') : '--'}\n                typographyClassName={classes.timeTypography}\n              />\n            </div>\n          </PickerToolbar>\n        )}\n        {showTabs && (\n          <DateTimePickerTabs\n            dateRangeIcon={dateRangeIcon}\n            timeIcon={timeIcon}\n            view={openView as DateTimePickerView}\n            onChange={setOpenView}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n);\n","import { ParsableDate } from '../constants/prop-types';\nimport { MuiPickersAdapter } from '../_shared/hooks/useUtils';\nimport { DateValidationProps, validateDate } from '../_helpers/date-utils';\nimport { TimeValidationProps, validateTime } from '../_helpers/time-utils';\n\nexport function validateDateAndTime<TDate>(\n  utils: MuiPickersAdapter,\n  value: unknown | ParsableDate,\n  {\n    minDate,\n    maxDate,\n    disableFuture,\n    shouldDisableDate,\n    disablePast,\n    ...timeValidationProps\n  }: DateValidationProps<TDate> & TimeValidationProps<TDate>\n) {\n  const dateValidationResult = validateDate(utils, value, {\n    minDate,\n    maxDate,\n    disableFuture,\n    shouldDisableDate,\n    disablePast,\n  });\n\n  if (dateValidationResult !== null) {\n    return dateValidationResult;\n  }\n\n  return validateTime(utils, value, timeValidationProps);\n}\n\nexport type DateAndTimeValidationError = ReturnType<typeof validateDateAndTime>;\n","export * from './DateTimePicker';\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { DateIOFormats } from '@date-io/core/IUtils';\nimport { MuiPickersAdapter } from './_shared/hooks/useUtils';\n\nexport const MuiPickersAdapterContext = React.createContext<MuiPickersAdapter | null>(null);\n\nexport interface LocalizationProviderProps {\n  children?: React.ReactNode;\n  dateAdapter: new (...args: any) => MuiPickersAdapter;\n  dateFormats?: Partial<DateIOFormats>;\n  dateLibInstance?: any;\n  locale?: any;\n}\n\nconst LocalizationProvider: React.FC<LocalizationProviderProps> = (props) => {\n  const { children, dateAdapter: Utils, dateFormats, dateLibInstance, locale } = props;\n  const utils = React.useMemo(\n    () => new Utils({ locale, formats: dateFormats, instance: dateLibInstance }),\n    [Utils, locale, dateFormats, dateLibInstance]\n  );\n\n  return (\n    <MuiPickersAdapterContext.Provider value={utils}>{children}</MuiPickersAdapterContext.Provider>\n  );\n};\n\nLocalizationProvider.propTypes = {\n  dateAdapter: PropTypes.func.isRequired,\n  locale: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n} as any;\n\nexport default LocalizationProvider;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useViews } from '../_shared/hooks/useViews';\nimport { ClockView } from '../views/Clock/ClockView';\nimport { DateTimePickerView } from '../DateTimePicker';\nimport { BasePickerProps } from '../typings/BasePicker';\nimport { DatePickerView } from '../DatePicker/DatePicker';\nimport { CalendarView } from '../views/Calendar/CalendarView';\nimport { withDefaultProps } from '../_shared/withDefaultProps';\nimport { KeyboardDateInput } from '../_shared/KeyboardDateInput';\nimport { useIsLandscape } from '../_shared/hooks/useIsLandscape';\nimport { DIALOG_WIDTH, VIEW_HEIGHT } from '../constants/dimensions';\nimport { PickerSelectionState } from '../_shared/hooks/usePickerState';\nimport { WrapperVariantContext } from '../wrappers/WrapperVariantContext';\nimport { MobileKeyboardInputView } from '../views/MobileKeyboardInputView';\nimport {\n  WithViewsProps,\n  AnyPickerView,\n  SharedPickerProps,\n  CalendarAndClockProps,\n} from './SharedPickerProps';\n\nexport interface ExportedPickerProps<TView extends AnyPickerView>\n  extends Omit<BasePickerProps, 'value' | 'onChange'>,\n    CalendarAndClockProps<unknown>,\n    WithViewsProps<TView> {\n  // TODO move out, cause it is DateTimePickerOnly\n  hideTabs?: boolean;\n  dateRangeIcon?: React.ReactNode;\n  timeIcon?: React.ReactNode;\n}\n\nexport type PickerProps<\n  TView extends AnyPickerView,\n  TInputValue = any,\n  TDateValue = any\n> = ExportedPickerProps<TView> & SharedPickerProps<TInputValue, TDateValue>;\n\nconst muiComponentConfig = { name: 'MuiPickersBasePicker' };\n\nexport const useStyles = makeStyles(\n  {\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    landscape: {\n      flexDirection: 'row',\n    },\n    pickerView: {\n      overflowX: 'hidden',\n      width: DIALOG_WIDTH,\n      maxHeight: VIEW_HEIGHT,\n      display: 'flex',\n      flexDirection: 'column',\n      margin: '0 auto',\n    },\n    pickerViewLandscape: {\n      padding: '0 8px',\n    },\n  },\n  muiComponentConfig\n);\n\nconst MobileKeyboardTextFieldProps = { fullWidth: true };\n\nconst isDatePickerView = (view: DateTimePickerView) =>\n  view === 'year' || view === 'month' || view === 'date';\n\nfunction Picker({\n  className,\n  date,\n  DateInputProps,\n  isMobileKeyboardViewOpen,\n  onDateChange,\n  openTo = 'date',\n  orientation,\n  showToolbar,\n  toggleMobileKeyboardView,\n  ToolbarComponent = () => null,\n  toolbarFormat,\n  toolbarPlaceholder,\n  toolbarTitle,\n  views = ['year', 'month', 'date', 'hours', 'minutes', 'seconds'],\n  ...other\n}: PickerProps<AnyPickerView>) {\n  const classes = useStyles();\n  const isLandscape = useIsLandscape(views, orientation);\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n\n  const toShowToolbar =\n    typeof showToolbar === 'undefined' ? wrapperVariant !== 'desktop' : showToolbar;\n\n  const handleDateChange = React.useCallback(\n    (date: unknown, selectionState?: PickerSelectionState) => {\n      onDateChange(date, wrapperVariant, selectionState);\n    },\n    [onDateChange, wrapperVariant]\n  );\n\n  const { openView, nextView, previousView, setOpenView, handleChangeAndOpenNext } = useViews({\n    views,\n    openTo,\n    onChange: handleDateChange,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView,\n  });\n\n  return (\n    <div\n      className={clsx(classes.root, className, {\n        [classes.landscape]: isLandscape,\n      })}\n    >\n      {toShowToolbar && (\n        <ToolbarComponent\n          {...other}\n          views={views}\n          isLandscape={isLandscape}\n          date={date}\n          onChange={handleDateChange}\n          setOpenView={setOpenView}\n          openView={openView}\n          toolbarTitle={toolbarTitle}\n          toolbarFormat={toolbarFormat}\n          toolbarPlaceholder={toolbarPlaceholder}\n          isMobileKeyboardViewOpen={isMobileKeyboardViewOpen}\n          toggleMobileKeyboardView={toggleMobileKeyboardView}\n        />\n      )}\n\n      <div\n        className={clsx(classes.pickerView, {\n          [classes.pickerViewLandscape]: isLandscape,\n        })}\n      >\n        {isMobileKeyboardViewOpen ? (\n          <MobileKeyboardInputView>\n            <KeyboardDateInput\n              {...DateInputProps}\n              ignoreInvalidInputs\n              disableOpenPicker\n              TextFieldProps={MobileKeyboardTextFieldProps}\n            />\n          </MobileKeyboardInputView>\n        ) : (\n          <React.Fragment>\n            {(openView === 'year' || openView === 'month' || openView === 'date') && (\n              <CalendarView\n                date={date}\n                changeView={setOpenView}\n                // @ts-ignore\n                views={views}\n                onChange={handleChangeAndOpenNext}\n                view={openView as DatePickerView}\n                {...other}\n              />\n            )}\n\n            {(openView === 'hours' || openView === 'minutes' || openView === 'seconds') && (\n              <ClockView\n                {...other}\n                date={date}\n                type={openView as 'hours' | 'minutes' | 'seconds'}\n                onDateChange={handleDateChange}\n                onChange={handleChangeAndOpenNext}\n                openNextView={() => setOpenView(nextView)}\n                openPreviousView={() => setOpenView(previousView)}\n                nextViewAvailable={!nextView}\n                previousViewAvailable={!previousView || isDatePickerView(previousView)}\n                showViewSwitcher={wrapperVariant === 'desktop'}\n              />\n            )}\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default withDefaultProps(muiComponentConfig, Picker);\n","import * as React from 'react';\nimport Picker, { ExportedPickerProps } from './Picker';\nimport { ParsableDate } from '../constants/prop-types';\nimport { MuiPickersAdapter } from '../_shared/hooks/useUtils';\nimport { parsePickerInputValue } from '../_helpers/date-utils';\nimport { withDefaultProps } from '../_shared/withDefaultProps';\nimport { KeyboardDateInput } from '../_shared/KeyboardDateInput';\nimport { SomeWrapper, ExtendWrapper } from '../wrappers/Wrapper';\nimport { ResponsiveWrapper } from '../wrappers/ResponsiveWrapper';\nimport { withDateAdapterProp } from '../_shared/withDateAdapterProp';\nimport { makeWrapperComponent } from '../wrappers/makeWrapperComponent';\nimport { PureDateInput, DateInputProps } from '../_shared/PureDateInput';\nimport { usePickerState, PickerStateValueManager } from '../_shared/hooks/usePickerState';\nimport { AnyPickerView, AllSharedPickerProps, ToolbarComponentProps } from './SharedPickerProps';\n\ntype AllAvailableForOverrideProps = ExportedPickerProps<AnyPickerView>;\n\nexport type AllPickerProps<T, TWrapper extends SomeWrapper = SomeWrapper> = T &\n  AllSharedPickerProps &\n  ExtendWrapper<TWrapper>;\n\nexport interface MakePickerOptions<T extends unknown> {\n  name: string;\n  /**\n   * Hook that running validation for the `value` and input.\n   */\n  useValidation: (value: ParsableDate<unknown>, props: T) => string | null;\n  /**\n   * Intercept props to override or inject default props specifically for picker.\n   */\n  useInterceptProps: (props: AllPickerProps<T>) => AllPickerProps<T> & { inputFormat: string };\n  DefaultToolbarComponent: React.ComponentType<ToolbarComponentProps>;\n}\n\nconst valueManager: PickerStateValueManager<unknown, unknown> = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils: MuiPickersAdapter, a: unknown, b: unknown) => utils.isEqual(a, b),\n};\n\nexport type SharedPickerProps<TDate, TWrapper extends SomeWrapper> = ExtendWrapper<TWrapper> &\n  AllSharedPickerProps<ParsableDate<TDate>, TDate | null> &\n  React.RefAttributes<HTMLInputElement>;\n\ntype PickerComponent<\n  TViewProps extends AllAvailableForOverrideProps,\n  TWrapper extends SomeWrapper\n> = <TDate>(props: TViewProps & SharedPickerProps<TDate, TWrapper>) => JSX.Element;\n\nexport function makePickerWithStateAndWrapper<\n  T extends AllAvailableForOverrideProps,\n  TWrapper extends SomeWrapper = typeof ResponsiveWrapper\n>(\n  Wrapper: TWrapper,\n  { name, useInterceptProps, useValidation, DefaultToolbarComponent }: MakePickerOptions<T>\n): PickerComponent<T, TWrapper> {\n  const WrapperComponent = makeWrapperComponent<DateInputProps<any, any>>(Wrapper, {\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PureDateInputComponent: PureDateInput,\n  });\n\n  function PickerWithState<TDate>(\n    __props: T & AllSharedPickerProps<ParsableDate<TDate>, TDate> & ExtendWrapper<TWrapper>\n  ) {\n    const allProps = useInterceptProps(__props) as AllPickerProps<T, TWrapper>;\n\n    const validationError = useValidation(allProps.value, allProps) !== null;\n    const { pickerProps, inputProps, wrapperProps } = usePickerState<ParsableDate<TDate>, TDate>(\n      allProps,\n      valueManager as PickerStateValueManager<ParsableDate<TDate>, TDate>\n    );\n\n    // Note that we are passing down all the value without spread.\n    // It saves us >1kb gzip and make any prop available automatically on any level down.\n    const { value, onChange, ...other } = allProps;\n    const AllDateInputProps = { ...inputProps, ...other, validationError };\n\n    return (\n      <WrapperComponent wrapperProps={wrapperProps} DateInputProps={AllDateInputProps} {...other}>\n        <Picker\n          {...pickerProps}\n          toolbarTitle={allProps.label || allProps.toolbarTitle}\n          ToolbarComponent={other.ToolbarComponent || DefaultToolbarComponent}\n          DateInputProps={AllDateInputProps}\n          {...other}\n        />\n      </WrapperComponent>\n    );\n  }\n\n  const FinalPickerComponent = withDefaultProps({ name }, withDateAdapterProp(PickerWithState));\n\n  // @ts-ignore Simply ignore generic values in props, because it is impossible\n  // to keep generics without additional cast when using forwardRef\n  // @see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/35834\n  return React.forwardRef<HTMLInputElement, React.ComponentProps<typeof FinalPickerComponent>>(\n    (props, ref) => <FinalPickerComponent {...(props as any)} forwardedRef={ref} />\n  );\n}\n","import React from 'react';\nimport { ClockIcon } from '../_shared/icons/Clock';\nimport { ParsableDate } from '../constants/prop-types';\nimport { TimePickerToolbar } from './TimePickerToolbar';\nimport { ExportedClockViewProps } from '../views/Clock/ClockView';\nimport { ResponsiveWrapper } from '../wrappers/ResponsiveWrapper';\nimport { pick12hOr24hFormat } from '../_helpers/text-field-helper';\nimport { useParsedDate, OverrideParsableDateProps } from '../_shared/hooks/date-helpers-hooks';\nimport { useUtils, MuiPickersAdapter } from '../_shared/hooks/useUtils';\nimport { validateTime, TimeValidationError } from '../_helpers/time-utils';\nimport { WithViewsProps, AllSharedPickerProps } from '../Picker/SharedPickerProps';\nimport { ValidationProps, makeValidationHook } from '../_shared/hooks/useValidation';\nimport { MobileWrapper, DesktopWrapper, StaticWrapper, SomeWrapper } from '../wrappers/Wrapper';\nimport { SharedPickerProps, makePickerWithStateAndWrapper } from '../Picker/makePickerWithState';\n\nexport interface BaseTimePickerProps<TDate = unknown>\n  extends ValidationProps<TimeValidationError, ParsableDate<TDate>>,\n    WithViewsProps<'hours' | 'minutes' | 'seconds'>,\n    OverrideParsableDateProps<TDate, ExportedClockViewProps<TDate>, 'minTime' | 'maxTime'> {}\n\nexport function getTextFieldAriaText(value: ParsableDate, utils: MuiPickersAdapter) {\n  return value && utils.isValid(utils.date(value))\n    ? `Choose time, selected time is ${utils.format(utils.date(value), 'fullTime')}`\n    : 'Choose time';\n}\n\nfunction useInterceptProps({\n  ampm,\n  inputFormat,\n  maxTime: __maxTime,\n  minTime: __minTime,\n  openTo = 'hours',\n  views = ['hours', 'minutes'],\n  ...other\n}: BaseTimePickerProps & AllSharedPickerProps) {\n  const utils = useUtils();\n\n  const minTime = useParsedDate(__minTime);\n  const maxTime = useParsedDate(__maxTime);\n  const willUseAmPm = ampm ?? utils.is12HourCycleInCurrentLocale();\n\n  return {\n    views,\n    openTo,\n    minTime,\n    maxTime,\n    ampm: willUseAmPm,\n    acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n    mask: '__:__',\n    disableMaskedInput: willUseAmPm,\n    getOpenDialogAriaText: getTextFieldAriaText,\n    openPickerIcon: <ClockIcon />,\n    inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n      localized: utils.formats.fullTime,\n      '12h': utils.formats.fullTime12h,\n      '24h': utils.formats.fullTime24h,\n    }),\n    ...other,\n  };\n}\n\nconst timePickerConfig = {\n  useInterceptProps,\n  useValidation: makeValidationHook<\n    TimeValidationError,\n    ParsableDate,\n    BaseTimePickerProps<unknown>\n  >(validateTime),\n  DefaultToolbarComponent: TimePickerToolbar,\n};\n\ntype TimePickerComponent<TWrapper extends SomeWrapper> = <TDate>(\n  props: BaseTimePickerProps<TDate> & SharedPickerProps<TDate, TWrapper>\n) => JSX.Element;\n\nexport const TimePicker = makePickerWithStateAndWrapper<BaseTimePickerProps>(ResponsiveWrapper, {\n  name: 'MuiTimePicker',\n  ...timePickerConfig,\n}) as TimePickerComponent<typeof ResponsiveWrapper>;\n\nexport type TimePickerProps = React.ComponentProps<typeof TimePicker>;\n\nexport const DesktopTimePicker = makePickerWithStateAndWrapper<BaseTimePickerProps>(\n  DesktopWrapper,\n  {\n    name: 'MuiDesktopTimePicker',\n    ...timePickerConfig,\n  }\n) as TimePickerComponent<typeof DesktopWrapper>;\n\nexport type DesktopTimePickerProps = React.ComponentProps<typeof DesktopTimePicker>;\n\nexport const MobileTimePicker = makePickerWithStateAndWrapper<BaseTimePickerProps>(MobileWrapper, {\n  name: 'MuiMobileTimePicker',\n  ...timePickerConfig,\n}) as TimePickerComponent<typeof MobileWrapper>;\n\nexport type MobileTimePickerProps = React.ComponentProps<typeof MobileTimePicker>;\n\nexport const StaticTimePicker = makePickerWithStateAndWrapper<BaseTimePickerProps>(StaticWrapper, {\n  name: 'MuiStaticTimePicker',\n  ...timePickerConfig,\n});\n\nexport type StaticTimePickerProps = React.ComponentProps<typeof StaticTimePicker>;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport ToolbarText from '../_shared/ToolbarText';\nimport { ToolbarButton } from '../_shared/ToolbarButton';\nimport PickerToolbar from '../_shared/PickerToolbar';\nimport { arrayIncludes } from '../_helpers/utils';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { PickerOnChangeFn } from '../_shared/hooks/useViews';\nimport { withDefaultProps } from '../_shared/withDefaultProps';\nimport { ToolbarComponentProps } from '../Picker/SharedPickerProps';\nimport { convertToMeridiem, getMeridiem } from '../_helpers/time-utils';\n\nconst muiComponentConfig = { name: 'MuiPickersTimePickerToolbar' };\n\nexport const useStyles = makeStyles(\n  {\n    separator: {\n      outline: 0,\n      margin: '0 4px 0 2px',\n      cursor: 'default',\n    },\n    hourMinuteLabel: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'flex-end',\n    },\n    hourMinuteLabelLandscape: {\n      marginTop: 'auto',\n    },\n    hourMinuteLabelReverse: {\n      flexDirection: 'row-reverse',\n    },\n    ampmSelection: {\n      display: 'flex',\n      flexDirection: 'column',\n      marginRight: 'auto',\n      marginLeft: 12,\n    },\n    ampmLandscape: {\n      margin: '4px 0 auto',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      flexBasis: '100%',\n    },\n    ampmLabel: {\n      fontSize: 17,\n    },\n    penIconLandscape: {\n      marginTop: 'auto',\n    },\n  },\n  muiComponentConfig\n);\n\nexport function useMeridiemMode<TDate>(\n  date: TDate,\n  ampm: boolean | undefined,\n  onChange: PickerOnChangeFn<TDate>\n) {\n  const utils = useUtils<TDate>();\n  const meridiemMode = getMeridiem(date, utils);\n\n  const handleMeridiemChange = React.useCallback(\n    (mode: 'am' | 'pm') => {\n      const timeWithMeridiem = convertToMeridiem<TDate>(date, mode, Boolean(ampm), utils);\n      onChange(timeWithMeridiem, 'partial');\n    },\n    [ampm, date, onChange, utils]\n  );\n\n  return { meridiemMode, handleMeridiemChange };\n}\n\nconst clockTypographyVariant = 'h3';\n\nexport const TimePickerToolbar: React.FC<ToolbarComponentProps> = withDefaultProps(\n  muiComponentConfig,\n  ({\n    ampm,\n    ampmInClock,\n    date,\n    isLandscape,\n    isMobileKeyboardViewOpen,\n    onChange,\n    openView,\n    setOpenView,\n    toggleMobileKeyboardView,\n    toolbarTitle = 'SELECT TIME',\n    views,\n    ...other\n  }) => {\n    const utils = useUtils();\n    const theme = useTheme();\n    const classes = useStyles();\n    const showAmPmControl = Boolean(ampm && !ampmInClock);\n    const { meridiemMode, handleMeridiemChange } = useMeridiemMode(date, ampm, onChange);\n\n    const formatHours = (time: unknown) =>\n      ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');\n\n    const separator = (\n      <ToolbarText\n        tabIndex={-1}\n        value=\":\"\n        variant={clockTypographyVariant}\n        selected={false}\n        className={classes.separator}\n      />\n    );\n\n    return (\n      <PickerToolbar\n        landscapeDirection=\"row\"\n        toolbarTitle={toolbarTitle}\n        isLandscape={isLandscape}\n        isMobileKeyboardViewOpen={isMobileKeyboardViewOpen}\n        toggleMobileKeyboardView={toggleMobileKeyboardView}\n        penIconClassName={clsx({ [classes.penIconLandscape]: isLandscape })}\n        {...other}\n      >\n        <div\n          className={clsx(classes.hourMinuteLabel, {\n            [classes.hourMinuteLabelLandscape]: isLandscape,\n            [classes.hourMinuteLabelReverse]: theme.direction === 'rtl',\n          })}\n        >\n          {arrayIncludes(views, 'hours') && (\n            <ToolbarButton\n              data-mui-test=\"hours\"\n              tabIndex={-1}\n              variant={clockTypographyVariant}\n              onClick={() => setOpenView('hours')}\n              selected={openView === 'hours'}\n              value={date ? formatHours(date) : '--'}\n            />\n          )}\n          {arrayIncludes(views, ['hours', 'minutes']) && separator}\n          {arrayIncludes(views, 'minutes') && (\n            <ToolbarButton\n              data-mui-test=\"minutes\"\n              tabIndex={-1}\n              variant={clockTypographyVariant}\n              onClick={() => setOpenView('minutes')}\n              selected={openView === 'minutes'}\n              value={date ? utils.format(date, 'minutes') : '--'}\n            />\n          )}\n          {arrayIncludes(views, ['minutes', 'seconds']) && separator}\n          {arrayIncludes(views, 'seconds') && (\n            <ToolbarButton\n              data-mui-test=\"seconds\"\n              variant={clockTypographyVariant}\n              onClick={() => setOpenView('seconds')}\n              selected={openView === 'seconds'}\n              value={date ? utils.format(date, 'seconds') : '--'}\n            />\n          )}\n        </div>\n        {showAmPmControl && (\n          <div\n            className={clsx(classes.ampmSelection, {\n              [classes.ampmLandscape]: isLandscape,\n            })}\n          >\n            <ToolbarButton\n              disableRipple\n              variant=\"subtitle2\"\n              data-mui-test=\"toolbar-am-btn\"\n              selected={meridiemMode === 'am'}\n              typographyClassName={classes.ampmLabel}\n              value={utils.getMeridiemText('am')}\n              onClick={() => handleMeridiemChange('am')}\n            />\n            <ToolbarButton\n              disableRipple\n              variant=\"subtitle2\"\n              data-mui-test=\"toolbar-pm-btn\"\n              selected={meridiemMode === 'pm'}\n              typographyClassName={classes.ampmLabel}\n              value={utils.getMeridiemText('pm')}\n              onClick={() => handleMeridiemChange('pm')}\n            />\n          </div>\n        )}\n      </PickerToolbar>\n    );\n  }\n);\n\nexport default TimePickerToolbar;\n","export * from './TimePicker';\n","import { arrayIncludes } from './utils';\nimport { ParsableDate } from '../constants/prop-types';\nimport { BasePickerProps } from '../typings/BasePicker';\nimport { DatePickerView } from '../DatePicker/DatePicker';\nimport { MuiPickersAdapter } from '../_shared/hooks/useUtils';\nimport { DateRange, RangeInput } from '../DateRangePicker/RangeTypes';\n\ninterface FindClosestDateParams<TDate> {\n  date: TDate;\n  utils: MuiPickersAdapter<TDate>;\n  minDate: TDate;\n  maxDate: TDate;\n  disableFuture: boolean;\n  disablePast: boolean;\n  shouldDisableDate: (date: TDate) => boolean;\n}\n\nexport const findClosestEnabledDate = <TDate>({\n  date,\n  utils,\n  minDate,\n  maxDate,\n  disableFuture,\n  disablePast,\n  shouldDisableDate,\n}: FindClosestDateParams<TDate>) => {\n  const today = utils.startOfDay(utils.date()!);\n\n  if (disablePast && utils.isBefore(minDate!, today)) {\n    minDate = today;\n  }\n\n  if (disableFuture && utils.isAfter(maxDate, today)) {\n    maxDate = today;\n  }\n\n  let forward: TDate | null = date;\n  let backward: TDate | null = date;\n  if (utils.isBefore(date, minDate)) {\n    forward = utils.date(minDate);\n    backward = null;\n  }\n\n  if (utils.isAfter(date, maxDate)) {\n    if (backward) {\n      backward = utils.date(maxDate);\n    }\n\n    forward = null;\n  }\n\n  while (forward || backward) {\n    if (forward && utils.isAfter(forward, maxDate)) {\n      forward = null;\n    }\n    if (backward && utils.isBefore(backward, minDate)) {\n      backward = null;\n    }\n\n    if (forward) {\n      if (!shouldDisableDate(forward)) {\n        return forward;\n      }\n      forward = utils.addDays(forward, 1);\n    }\n\n    if (backward) {\n      if (!shouldDisableDate(backward)) {\n        return backward;\n      }\n      backward = utils.addDays(backward, -1);\n    }\n  }\n\n  // fallback to today if no enabled days\n  return utils.date();\n};\n\nexport const isYearOnlyView = (views: readonly DatePickerView[]) =>\n  views.length === 1 && views[0] === 'year';\n\nexport const isYearAndMonthViews = (views: readonly DatePickerView[]) =>\n  views.length === 2 && arrayIncludes(views, 'month') && arrayIncludes(views, 'year');\n\nexport const getFormatAndMaskByViews = (\n  views: readonly DatePickerView[],\n  utils: MuiPickersAdapter\n) => {\n  if (isYearOnlyView(views)) {\n    return {\n      mask: '____',\n      inputFormat: utils.formats.year,\n    };\n  }\n\n  if (isYearAndMonthViews(views)) {\n    return {\n      disableMaskedInput: true,\n      inputFormat: utils.formats.monthAndYear,\n    };\n  }\n\n  return {\n    mask: '__/__/____',\n    inputFormat: utils.formats.keyboardDate,\n  };\n};\n\nexport function parsePickerInputValue(\n  utils: MuiPickersAdapter,\n  { value }: BasePickerProps\n): unknown | null {\n  const parsedValue = utils.date(value);\n\n  return utils.isValid(parsedValue) ? parsedValue : null;\n}\n\nexport function parseRangeInputValue(\n  utils: MuiPickersAdapter,\n  { value = [null, null] }: BasePickerProps<RangeInput, DateRange>\n) {\n  return value.map((date) =>\n    !utils.isValid(date) || date === null ? null : utils.startOfDay(utils.date(date))\n  ) as DateRange;\n}\n\nexport const isRangeValid = (\n  utils: MuiPickersAdapter,\n  range: DateRange | null\n): range is DateRange => {\n  return Boolean(range && range[0] && range[1] && utils.isBefore(range[0], range[1]));\n};\n\nexport const isWithinRange = (utils: MuiPickersAdapter, day: unknown, range: DateRange | null) => {\n  return isRangeValid(utils, range) && utils.isWithinRange(day, range);\n};\n\nexport const isStartOfRange = (utils: MuiPickersAdapter, day: unknown, range: DateRange | null) => {\n  return isRangeValid(utils, range) && utils.isSameDay(day, range[0]);\n};\n\nexport const isEndOfRange = (utils: MuiPickersAdapter, day: unknown, range: DateRange | null) => {\n  return isRangeValid(utils, range) && utils.isSameDay(day, range[1]);\n};\n\nexport interface DateValidationProps<TDate> {\n  /**\n   * Min selectable date. @DateIOType\n   *\n   * @default Date(1900-01-01)\n   */\n  minDate?: TDate;\n  /**\n   * Max selectable date. @DateIOType\n   *\n   * @default Date(2099-31-12)\n   */\n  maxDate?: TDate;\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate?: (day: unknown) => boolean;\n  /**\n   * Disable past dates.\n   *\n   * @default false\n   */\n  disablePast?: boolean;\n  /**\n   * Disable future dates.\n   *\n   * @default false\n   */\n  disableFuture?: boolean;\n}\n\nexport const validateDate = <TDate>(\n  utils: MuiPickersAdapter,\n  value: TDate | ParsableDate,\n  { minDate, maxDate, disableFuture, shouldDisableDate, disablePast }: DateValidationProps<TDate>\n) => {\n  const now = utils.date();\n  const date = utils.date(value);\n\n  if (value === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(shouldDisableDate && shouldDisableDate(date)):\n      return 'shouldDisableDate';\n\n    case Boolean(disableFuture && utils.isAfterDay(date, now)):\n      return 'disableFuture';\n\n    case Boolean(disablePast && utils.isBeforeDay(date, now)):\n      return 'disablePast';\n\n    case Boolean(minDate && utils.isBeforeDay(date, minDate)):\n      return 'minDate';\n\n    case Boolean(maxDate && utils.isAfterDay(date, maxDate)):\n      return 'maxDate';\n\n    default:\n      return null;\n  }\n};\n\nexport type DateValidationError = ReturnType<typeof validateDate>;\n\ntype DateRangeValidationErrorValue = DateValidationError | 'invalidRange' | null;\n\nexport type DateRangeValidationError = [\n  DateRangeValidationErrorValue,\n  DateRangeValidationErrorValue\n];\n\nexport const validateDateRange = <TDate>(\n  utils: MuiPickersAdapter<TDate>,\n  value: RangeInput<TDate>,\n  dateValidationProps: DateValidationProps<TDate>\n): [DateRangeValidationErrorValue, DateRangeValidationErrorValue] => {\n  const [start, end] = value;\n\n  // for partial input\n  if (start === null || end === null) {\n    return [null, null];\n  }\n\n  const dateValidations = [\n    validateDate(utils, start, dateValidationProps),\n    validateDate(utils, end, dateValidationProps),\n  ] as [DateRangeValidationErrorValue, DateRangeValidationErrorValue];\n\n  if (dateValidations[0] || dateValidations[1]) {\n    return dateValidations;\n  }\n\n  if (!isRangeValid(utils, [utils.date(start), utils.date(end)])) {\n    return ['invalidRange', 'invalidRange'];\n  }\n\n  return [null, null];\n};\n","import { ParsableDate } from '../constants/prop-types';\nimport { MuiPickersAdapter } from '../_shared/hooks/useUtils';\n\nexport function getTextFieldAriaText(rawValue: ParsableDate, utils: MuiPickersAdapter) {\n  return rawValue && utils.isValid(utils.date(rawValue))\n    ? `Choose date, selected date is ${utils.format(utils.date(rawValue), 'fullDate')}`\n    : 'Choose date';\n}\n\nexport const getDisplayDate = (\n  utils: MuiPickersAdapter,\n  value: ParsableDate,\n  inputFormat: string\n) => {\n  const date = utils.date(value);\n  const isEmpty = value === null;\n\n  if (isEmpty) {\n    return '';\n  }\n\n  return utils.isValid(date) ? utils.formatByString(date, inputFormat) : '';\n};\n\nexport function pick12hOr24hFormat(\n  userFormat: string | undefined,\n  ampm: boolean | undefined,\n  formats: { localized: string; '12h': string; '24h': string }\n) {\n  if (userFormat) {\n    return userFormat;\n  }\n\n  if (typeof ampm === 'undefined') {\n    return formats.localized;\n  }\n\n  return ampm ? formats['12h'] : formats['24h'];\n}\n\nconst MASK_USER_INPUT_SYMBOL = '_';\nexport const staticDateWith2DigitTokens = new Date('2019-11-21T22:30:00.000');\nexport const staticDateWith1DigitTokens = new Date('2019-01-01T09:00:00.000');\n\nexport function checkMaskIsValidForCurrentFormat(\n  mask: string,\n  format: string,\n  acceptRegex: RegExp,\n  utils: MuiPickersAdapter\n) {\n  const formattedDateWith1Digit = utils.formatByString(\n    utils.date(staticDateWith1DigitTokens),\n    format\n  );\n  const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(\n    acceptRegex,\n    MASK_USER_INPUT_SYMBOL\n  );\n\n  const inferredFormatPatternWith2Digits = utils\n    .formatByString(utils.date(staticDateWith2DigitTokens), format)\n    .replace(acceptRegex, '_');\n\n  const isMaskValid =\n    inferredFormatPatternWith2Digits === mask && inferredFormatPatternWith1Digits === mask;\n\n  // @ts-ignore Ignore this warning for luxon because it is appearing mostly always (related to the formats structure of luxon itself)\n  if (!isMaskValid && utils.lib !== 'luxon' && process.env.NODE_ENV !== 'production') {\n    console.warn(\n      `The mask \"${mask}\" you passed is not valid for the format used ${format}. Falling down to uncontrolled not-masked input.`\n    );\n  }\n\n  return isMaskValid;\n}\n\nexport const maskedDateFormatter = (mask: string, acceptRegexp: RegExp) => (value: string) => {\n  return value\n    .split('')\n    .map((char, i) => {\n      acceptRegexp.lastIndex = 0;\n\n      if (i > mask.length - 1) {\n        return '';\n      }\n\n      const maskChar = mask[i];\n      const nextMaskChar = mask[i + 1];\n\n      const acceptedChar = acceptRegexp.test(char) ? char : '';\n      const formattedChar =\n        maskChar === MASK_USER_INPUT_SYMBOL ? acceptedChar : maskChar + acceptedChar;\n\n      if (i === value.length - 1 && nextMaskChar && nextMaskChar !== MASK_USER_INPUT_SYMBOL) {\n        // when cursor at the end of mask part (e.g. month) prerender next symbol \"21\" -> \"21/\"\n        return formattedChar ? formattedChar + nextMaskChar : '';\n      }\n\n      return formattedChar;\n    })\n    .join('');\n};\n","import { ParsableDate } from '../constants/prop-types';\nimport { MuiPickersAdapter } from '../_shared/hooks/useUtils';\n\ntype Meridiem = 'am' | 'pm' | null;\n\nexport const getMeridiem = (date: unknown, utils: MuiPickersAdapter): Meridiem => {\n  if (!date) {\n    return null;\n  }\n\n  return utils.getHours(date) >= 12 ? 'pm' : 'am';\n};\n\nexport const convertValueToMeridiem = (value: number, meridiem: Meridiem, ampm: boolean) => {\n  if (ampm) {\n    const currentMeridiem = value >= 12 ? 'pm' : 'am';\n    if (currentMeridiem !== meridiem) {\n      return meridiem === 'am' ? value - 12 : value + 12;\n    }\n  }\n\n  return value;\n};\n\nexport const convertToMeridiem = <TDate>(\n  time: TDate,\n  meridiem: 'am' | 'pm',\n  ampm: boolean,\n  utils: MuiPickersAdapter<TDate>\n) => {\n  const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);\n  return utils.setHours(time, newHoursAmount);\n};\n\nconst clockCenter = {\n  x: 260 / 2,\n  y: 260 / 2,\n};\n\nconst baseClockPoint = {\n  x: clockCenter.x,\n  y: 0,\n};\n\nconst cx = baseClockPoint.x - clockCenter.x;\nconst cy = baseClockPoint.y - clockCenter.y;\n\nconst rad2deg = (rad: number) => rad * 57.29577951308232;\n\nconst getAngleValue = (step: number, offsetX: number, offsetY: number) => {\n  const x = offsetX - clockCenter.x;\n  const y = offsetY - clockCenter.y;\n\n  const atan = Math.atan2(cx, cy) - Math.atan2(x, y);\n\n  let deg = rad2deg(atan);\n  deg = Math.round(deg / step) * step;\n  deg %= 360;\n\n  const value = Math.floor(deg / step) || 0;\n  const delta = x ** 2 + y ** 2;\n  const distance = Math.sqrt(delta);\n\n  return { value, distance };\n};\n\nexport const getMinutes = (offsetX: number, offsetY: number, step = 1) => {\n  const angleStep = step * 6;\n  let { value } = getAngleValue(angleStep, offsetX, offsetY);\n  value = (value * step) % 60;\n\n  return value;\n};\n\nexport const getHours = (offsetX: number, offsetY: number, ampm: boolean) => {\n  const { value, distance } = getAngleValue(30, offsetX, offsetY);\n  let hour = value || 12;\n\n  if (!ampm) {\n    if (distance < 90) {\n      hour += 12;\n      hour %= 24;\n    }\n  } else {\n    hour %= 12;\n  }\n\n  return hour;\n};\n\nexport function getSecondsInDay(date: unknown, utils: MuiPickersAdapter) {\n  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);\n}\n\nexport const createIsAfterIgnoreDatePart = (\n  disableIgnoringDatePartForTimeValidation: boolean,\n  utils: MuiPickersAdapter\n) => (dateLeft: unknown, dateRight: unknown) => {\n  if (disableIgnoringDatePartForTimeValidation) {\n    return utils.isAfter(dateLeft, dateRight);\n  }\n\n  return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);\n};\n\nexport interface TimeValidationProps<TDate> {\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime?: TDate;\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime?: TDate;\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime?: (timeValue: number, clockType: 'hours' | 'minutes' | 'seconds') => boolean;\n  /**\n   * Do not ignore date part when validating min/max time.\n   *\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation?: boolean;\n}\n\nexport const validateTime = <TDate>(\n  utils: MuiPickersAdapter,\n  value: TDate | ParsableDate<TDate>,\n  {\n    minTime,\n    maxTime,\n    shouldDisableTime,\n    disableIgnoringDatePartForTimeValidation,\n  }: TimeValidationProps<TDate>\n) => {\n  const date = utils.date(value);\n  const isAfterComparingFn = createIsAfterIgnoreDatePart(\n    Boolean(disableIgnoringDatePartForTimeValidation),\n    utils\n  );\n\n  if (value === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(minTime && isAfterComparingFn(minTime, date)):\n      return 'minTime';\n\n    case Boolean(maxTime && isAfterComparingFn(date, maxTime)):\n      return 'maxTime';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getHours(date), 'hours')):\n      return 'shouldDisableTime-hours';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getMinutes(date), 'minutes')):\n      return 'shouldDisableTime-minutes';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getSeconds(date), 'seconds')):\n      return 'shouldDisableTime-seconds';\n\n    default:\n      return null;\n  }\n};\n\nexport type TimeValidationError = ReturnType<typeof validateTime>;\n","import * as React from 'react';\n\n/* Use it instead of .includes method for IE support */\nexport function arrayIncludes<T>(array: T[] | readonly T[], itemOrItems: T | T[]) {\n  if (Array.isArray(itemOrItems)) {\n    return itemOrItems.every((item) => array.indexOf(item) !== -1);\n  }\n\n  return array.indexOf(itemOrItems) !== -1;\n}\n\nexport const onSpaceOrEnter = (\n  innerFn: () => void,\n  onFocus?: (event: React.KeyboardEvent<any>) => void\n) => (event: React.KeyboardEvent) => {\n  if (event.key === 'Enter' || event.key === ' ') {\n    innerFn();\n\n    // prevent any side effects\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  if (onFocus) {\n    onFocus(event);\n  }\n};\n\n/* Quick untyped helper to improve function composition readability */\nexport const pipe = (...fns: ((...args: any[]) => any)[]) =>\n  fns.reduceRight(\n    (prevFn, nextFn) => (...args) => nextFn(prevFn(...args)),\n    (value) => value\n  );\n\nexport const executeInTheNextEventLoopTick = (fn: () => void) => {\n  setTimeout(fn, 0);\n};\n\nexport function createDelegatedEventHandler<TEvent>(\n  fn: (event: TEvent) => void,\n  onEvent?: (event: TEvent) => void\n) {\n  return (event: TEvent) => {\n    fn(event);\n\n    if (onEvent) {\n      onEvent(event);\n    }\n  };\n}\n\nexport function mergeRefs<T>(refs: (React.Ref<T | null> | undefined)[]) {\n  return (value: T) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (typeof ref === 'object' && ref != null) {\n        // @ts-ignore .current is not a readonly, hold on ts\n        ref.current = value;\n      }\n    });\n  };\n}\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport IconButton, { IconButtonProps } from '@material-ui/core/IconButton';\nimport { ArrowLeftIcon } from './icons/ArrowLeft';\nimport { ArrowRightIcon } from './icons/ArrowRight';\n\nexport interface ExportedArrowSwitcherProps {\n  /**\n   * Left arrow icon.\n   */\n  leftArrowIcon?: React.ReactNode;\n  /**\n   * Right arrow icon.\n   */\n  rightArrowIcon?: React.ReactNode;\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText?: string;\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText?: string;\n  /**\n   * Props to pass to left arrow button.\n   * @type {Partial<IconButtonProps>}\n   */\n  leftArrowButtonProps?: Partial<IconButtonProps>;\n  /**\n   * Props to pass to right arrow button.\n   * @type {Partial<IconButtonProps>}\n   */\n  rightArrowButtonProps?: Partial<IconButtonProps>;\n}\n\ninterface ArrowSwitcherProps extends ExportedArrowSwitcherProps, React.HTMLProps<HTMLDivElement> {\n  isLeftDisabled: boolean;\n  isLeftHidden?: boolean;\n  isRightDisabled: boolean;\n  isRightHidden?: boolean;\n  onLeftClick: () => void;\n  onRightClick: () => void;\n  text?: string;\n}\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {},\n    iconButton: {\n      zIndex: 1,\n      backgroundColor: theme.palette.background.paper,\n    },\n    previousMonthButtonMargin: {\n      marginRight: 24,\n    },\n    hidden: {\n      visibility: 'hidden',\n    },\n  }),\n  { name: 'MuiPickersArrowSwitcher' }\n);\n\nconst PureArrowSwitcher = React.forwardRef<HTMLDivElement, ArrowSwitcherProps>((props, ref) => {\n  const {\n    className,\n    isLeftDisabled,\n    isLeftHidden,\n    isRightDisabled,\n    isRightHidden,\n    leftArrowButtonProps,\n    leftArrowButtonText,\n    leftArrowIcon = <ArrowLeftIcon />,\n    onLeftClick,\n    onRightClick,\n    rightArrowButtonProps,\n    rightArrowButtonText,\n    rightArrowIcon = <ArrowRightIcon />,\n    text,\n    ...other\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const isRtl = theme.direction === 'rtl';\n\n  return (\n    <div className={clsx(classes.root, className)} ref={ref} {...other}>\n      <IconButton\n        data-mui-test=\"previous-arrow-button\"\n        size=\"small\"\n        aria-label={leftArrowButtonText}\n        {...leftArrowButtonProps}\n        disabled={isLeftDisabled}\n        onClick={onLeftClick}\n        className={clsx(classes.iconButton, leftArrowButtonProps?.className, {\n          [classes.hidden]: isLeftHidden,\n          [classes.previousMonthButtonMargin]: !text,\n        })}\n      >\n        {isRtl ? rightArrowIcon : leftArrowIcon}\n      </IconButton>\n      {text && (\n        <Typography variant=\"subtitle1\" display=\"inline\">\n          {text}\n        </Typography>\n      )}\n      <IconButton\n        data-mui-test=\"next-arrow-button\"\n        size=\"small\"\n        aria-label={rightArrowButtonText}\n        {...rightArrowButtonProps}\n        disabled={isRightDisabled}\n        onClick={onRightClick}\n        className={clsx(classes.iconButton, rightArrowButtonProps?.className, {\n          [classes.hidden]: Boolean(isRightHidden),\n        })}\n      >\n        {isRtl ? leftArrowIcon : rightArrowIcon}\n      </IconButton>\n    </div>\n  );\n});\n\nPureArrowSwitcher.displayName = 'ArrowSwitcher';\n\nexport const ArrowSwitcher = React.memo(PureArrowSwitcher);\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useForkRef } from '@material-ui/core/utils';\nimport { useUtils } from './hooks/useUtils';\nimport { CalendarIcon } from './icons/CalendarIcon';\nimport { useMaskedInput } from './hooks/useMaskedInput';\nimport { DateInputProps, DateInputRefs } from './PureDateInput';\nimport { getTextFieldAriaText } from '../_helpers/text-field-helper';\n\nexport const KeyboardDateInput: React.FC<DateInputProps & DateInputRefs> = ({\n  containerRef,\n  inputRef = null,\n  forwardedRef = null,\n  disableOpenPicker: hideOpenPickerButton,\n  getOpenDialogAriaText = getTextFieldAriaText,\n  InputAdornmentProps,\n  InputProps,\n  openPicker: onOpen,\n  OpenPickerButtonProps,\n  openPickerIcon = <CalendarIcon />,\n  renderInput,\n  ...other\n}) => {\n  const utils = useUtils();\n  const inputRefHandle = useForkRef(inputRef, forwardedRef);\n  const textFieldProps = useMaskedInput(other);\n  const adornmentPosition = InputAdornmentProps?.position || 'end';\n\n  return renderInput({\n    ref: containerRef,\n    inputRef: inputRefHandle,\n    ...textFieldProps,\n    InputProps: {\n      ...InputProps,\n      [`${adornmentPosition}Adornment`]: hideOpenPickerButton ? undefined : (\n        <InputAdornment position={adornmentPosition} {...InputAdornmentProps}>\n          <IconButton\n            edge={adornmentPosition}\n            data-mui-test=\"open-picker-from-keyboard\"\n            disabled={other.disabled}\n            aria-label={getOpenDialogAriaText(other.rawValue, utils)}\n            {...OpenPickerButtonProps}\n            onClick={onOpen}\n          >\n            {openPickerIcon}\n          </IconButton>\n        </InputAdornment>\n      ),\n    },\n  });\n};\n\nKeyboardDateInput.propTypes = {\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  getOpenDialogAriaText: PropTypes.func,\n  mask: PropTypes.string,\n  OpenPickerButtonProps: PropTypes.object,\n  openPickerIcon: PropTypes.node,\n  renderInput: PropTypes.func.isRequired,\n  rifmFormatter: PropTypes.func,\n};\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar, { ToolbarProps } from '@material-ui/core/Toolbar';\nimport { ExtendMui } from '../typings/helpers';\nimport { PenIcon } from './icons/Pen';\nimport { CalendarIcon } from './icons/CalendarIcon';\nimport { ToolbarComponentProps } from '../Picker/SharedPickerProps';\n\nexport const useStyles = makeStyles(\n  (theme) => {\n    const toolbarBackground =\n      theme.palette.type === 'light'\n        ? theme.palette.primary.main\n        : theme.palette.background.default;\n    return {\n      root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        justifyContent: 'space-between',\n        paddingTop: 16,\n        paddingBottom: 16,\n        backgroundColor: toolbarBackground,\n        color: theme.palette.getContrastText(toolbarBackground),\n      },\n      toolbarLandscape: {\n        height: 'auto',\n        maxWidth: 160,\n        padding: 16,\n        justifyContent: 'flex-start',\n        flexWrap: 'wrap',\n      },\n      dateTitleContainer: {\n        flex: 1,\n      },\n    };\n  },\n  { name: 'MuiPickersToolbar' }\n);\n\ninterface PickerToolbarProps\n  extends ExtendMui<ToolbarProps>,\n    Pick<\n      ToolbarComponentProps,\n      | 'getMobileKeyboardInputViewButtonText'\n      | 'isMobileKeyboardViewOpen'\n      | 'toggleMobileKeyboardView'\n    > {\n  toolbarTitle: React.ReactNode;\n  landscapeDirection?: 'row' | 'column';\n  isLandscape: boolean;\n  penIconClassName?: string;\n}\n\nfunction defaultGetKeyboardInputSwitchingButtonText(isKeyboardInputOpen: boolean) {\n  return isKeyboardInputOpen\n    ? 'text input view is open, go to calendar view'\n    : 'calendar view is open, go to text input view';\n}\n\nconst PickerToolbar: React.SFC<PickerToolbarProps> = ({\n  children,\n  className,\n  getMobileKeyboardInputViewButtonText = defaultGetKeyboardInputSwitchingButtonText,\n  isLandscape,\n  isMobileKeyboardViewOpen,\n  landscapeDirection = 'column',\n  penIconClassName,\n  toggleMobileKeyboardView,\n  toolbarTitle,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Toolbar\n      data-mui-test=\"picker-toolbar\"\n      className={clsx(classes.root, { [classes.toolbarLandscape]: isLandscape }, className)}\n    >\n      <Typography data-mui-test=\"picker-toolbar-title\" color=\"inherit\" variant=\"overline\">\n        {toolbarTitle}\n      </Typography>\n      <Grid\n        container\n        justifyContent=\"space-between\"\n        className={classes.dateTitleContainer}\n        direction={isLandscape ? landscapeDirection : 'row'}\n        alignItems={isLandscape ? 'flex-start' : 'flex-end'}\n      >\n        {children}\n        <IconButton\n          onClick={toggleMobileKeyboardView}\n          className={penIconClassName}\n          color=\"inherit\"\n          data-mui-test=\"toggle-mobile-keyboard-view\"\n          aria-label={getMobileKeyboardInputViewButtonText(isMobileKeyboardViewOpen)}\n        >\n          {isMobileKeyboardViewOpen ? (\n            <CalendarIcon color=\"inherit\" />\n          ) : (\n            <PenIcon color=\"inherit\" />\n          )}\n        </IconButton>\n      </Grid>\n    </Toolbar>\n  );\n};\n\nexport default PickerToolbar;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Dialog, { DialogProps } from '@material-ui/core/Dialog';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DIALOG_WIDTH, DIALOG_WIDTH_WIDER } from '../constants/dimensions';\n\nexport interface ExportedPickerModalProps {\n  /**\n   * \"OK\" button text.\n   *\n   * @default \"OK\"\n   */\n  okText?: React.ReactNode;\n  /**\n   * \"CANCEL\" Text message\n   *\n   * @default \"CANCEL\"\n   */\n  cancelText?: React.ReactNode;\n  /**\n   * \"CLEAR\" Text message\n   *\n   * @default \"CLEAR\"\n   */\n  clearText?: React.ReactNode;\n  /**\n   * \"TODAY\" Text message\n   *\n   * @default \"TODAY\"\n   */\n  todayText?: React.ReactNode;\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   *\n   * @default false\n   */\n  clearable?: boolean;\n  /**\n   * If `true`, the today button will be displayed. **Note** that `showClearButton` has a higher priority.\n   *\n   * @default false\n   */\n  showTodayButton?: boolean;\n  showTabs?: boolean;\n  wider?: boolean;\n}\n\nexport interface PickerModalDialogProps extends ExportedPickerModalProps, DialogProps {\n  onAccept: () => void;\n  onClear: () => void;\n  onDismiss: () => void;\n  onSetToday: () => void;\n}\n\nexport const useStyles = makeStyles(\n  {\n    dialogRoot: {\n      minWidth: DIALOG_WIDTH,\n    },\n    dialogRootWider: {\n      minWidth: DIALOG_WIDTH_WIDER,\n    },\n    dialogContainer: {\n      '&:focus > $dialogRoot': {\n        outline: 'auto',\n        '@media (pointer:coarse)': {\n          outline: 0,\n        },\n      },\n    },\n    dialog: {\n      '&:first-child': {\n        padding: 0,\n      },\n    },\n    dialogAction: {\n      // requested for overrides\n    },\n    withAdditionalAction: {\n      // set justifyContent to default value to fix IE11 layout bug\n      // see https://github.com/mui-org/material-ui-pickers/pull/267\n      justifyContent: 'flex-start',\n\n      '& > *:first-child': {\n        marginRight: 'auto',\n      },\n    },\n  },\n  { name: 'MuiPickersModalDialog' }\n);\n\nconst PickersModalDialog: React.FC<PickerModalDialogProps> = (props) => {\n  const {\n    cancelText = 'Cancel',\n    children,\n    classes: MuiDialogClasses,\n    clearable = false,\n    clearText = 'Clear',\n    okText = 'OK',\n    onAccept,\n    onClear,\n    onDismiss,\n    onSetToday,\n    showTabs,\n    showTodayButton = false,\n    todayText = 'Today',\n    wider,\n    ...other\n  } = props;\n  const classes = useStyles();\n\n  return (\n    <Dialog\n      onClose={onDismiss}\n      classes={{\n        container: classes.dialogContainer,\n        paper: clsx(classes.dialogRoot, {\n          [classes.dialogRootWider]: wider,\n        }),\n        ...MuiDialogClasses,\n      }}\n      {...other}\n    >\n      <DialogContent className={classes.dialog}>{children}</DialogContent>\n      <DialogActions\n        className={clsx(classes.dialogAction, {\n          [classes.withAdditionalAction]: clearable || showTodayButton,\n        })}\n      >\n        {clearable && (\n          <Button data-mui-test=\"clear-action-button\" color=\"primary\" onClick={onClear}>\n            {clearText}\n          </Button>\n        )}\n        {showTodayButton && (\n          <Button data-mui-test=\"today-action-button\" color=\"primary\" onClick={onSetToday}>\n            {todayText}\n          </Button>\n        )}\n        {cancelText && (\n          <Button color=\"primary\" onClick={onDismiss}>\n            {cancelText}\n          </Button>\n        )}\n        {okText && (\n          <Button color=\"primary\" onClick={onAccept}>\n            {okText}\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default PickersModalDialog;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Grow from '@material-ui/core/Grow';\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\nimport Popper, { PopperProps } from '@material-ui/core/Popper';\nimport TrapFocus, { TrapFocusProps } from '@material-ui/core/Unstable_TrapFocus';\nimport { useForkRef } from '@material-ui/core/utils';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport { useGlobalKeyDown, keycode } from './hooks/useKeyDown';\nimport { IS_TOUCH_DEVICE_MEDIA } from '../constants/dimensions';\nimport { executeInTheNextEventLoopTick } from '../_helpers/utils';\n\nexport interface ExportedPickerPopperProps {\n  /**\n   * Popper props passed down to [Popper](https://material-ui.com/api/popper/) component.\n   */\n  PopperProps?: Partial<PopperProps>;\n  /**\n   * Custom component for [Transition](https://material-ui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent?: React.ComponentType<TransitionProps>;\n}\n\nexport interface PickerPopperProps extends ExportedPickerPopperProps, PaperProps {\n  role: 'tooltip' | 'dialog';\n  TrapFocusProps?: Partial<TrapFocusProps>;\n  anchorEl: PopperProps['anchorEl'];\n  open: PopperProps['open'];\n  onClose: () => void;\n  onOpen: () => void;\n}\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      zIndex: theme.zIndex.modal,\n    },\n    paper: {\n      transformOrigin: 'top center',\n      '&:focus': {\n        [IS_TOUCH_DEVICE_MEDIA]: {\n          outline: 0,\n        },\n      },\n    },\n    topTransition: {\n      transformOrigin: 'bottom center',\n    },\n  }),\n  { name: 'MuiPickersPopper' }\n);\n\nexport const PickersPopper: React.FC<PickerPopperProps> = (props) => {\n  const {\n    anchorEl,\n    children,\n    innerRef = null,\n    onClose,\n    onOpen,\n    open,\n    PopperProps,\n    role,\n    TransitionComponent = Grow,\n    TrapFocusProps,\n  } = props;\n  const classes = useStyles();\n  const paperRef = React.useRef<HTMLElement>(null);\n  const handlePopperRef = useForkRef(paperRef, innerRef);\n  const lastFocusedElementRef = React.useRef<Element | null>(null);\n  const popperOptions = React.useMemo(() => ({ onCreate: onOpen }), [onOpen]);\n\n  useGlobalKeyDown(open, {\n    [keycode.Esc]: onClose,\n  });\n\n  React.useEffect(() => {\n    if (role === 'tooltip') {\n      return;\n    }\n\n    if (open) {\n      lastFocusedElementRef.current = document.activeElement;\n    } else if (\n      lastFocusedElementRef.current &&\n      lastFocusedElementRef.current instanceof HTMLElement\n    ) {\n      lastFocusedElementRef.current.focus();\n    }\n  }, [open, role]);\n\n  const handleBlur = () => {\n    if (!open) {\n      return;\n    }\n\n    // document.activeElement is updating on the next tick after `blur` called\n    executeInTheNextEventLoopTick(() => {\n      if (paperRef.current?.contains(document.activeElement)) {\n        return;\n      }\n\n      onClose();\n    });\n  };\n\n  return (\n    <Popper\n      transition\n      role={role}\n      open={open}\n      anchorEl={anchorEl}\n      className={clsx(classes.root, PopperProps?.className)}\n      popperOptions={popperOptions}\n      {...PopperProps}\n    >\n      {({ TransitionProps, placement }) => (\n        <TrapFocus\n          open={open}\n          disableAutoFocus\n          disableEnforceFocus={role === 'tooltip'}\n          isEnabled={() => true}\n          getDoc={() => paperRef.current?.ownerDocument ?? document}\n          {...TrapFocusProps}\n        >\n          <TransitionComponent {...TransitionProps}>\n            <Paper\n              tabIndex={-1}\n              elevation={8}\n              ref={handlePopperRef}\n              className={clsx(classes.paper, {\n                [classes.topTransition]: placement === 'top',\n              })}\n              onBlur={handleBlur}\n            >\n              {children}\n            </Paper>\n          </TransitionComponent>\n        </TrapFocus>\n      )}\n    </Popper>\n  );\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { TextFieldProps } from '@material-ui/core/TextField';\nimport { IconButtonProps } from '@material-ui/core/IconButton';\nimport { InputAdornmentProps } from '@material-ui/core/InputAdornment';\nimport { onSpaceOrEnter } from '../_helpers/utils';\nimport { ParsableDate } from '../constants/prop-types';\nimport { useUtils, MuiPickersAdapter } from './hooks/useUtils';\nimport { getDisplayDate, getTextFieldAriaText } from '../_helpers/text-field-helper';\n\nexport type MuiTextFieldProps = TextFieldProps | Omit<TextFieldProps, 'variant'>;\n\nexport interface DateInputProps<TInputValue = ParsableDate<unknown>, TDateValue = unknown> {\n  open: boolean;\n  rawValue: TInputValue;\n  inputFormat: string;\n  onChange: (date: TDateValue, keyboardInputValue?: string) => void;\n  openPicker: () => void;\n  readOnly?: boolean;\n  disabled?: boolean;\n  validationError?: boolean;\n  label?: TextFieldProps['label'];\n  InputProps?: TextFieldProps['InputProps'];\n  TextFieldProps?: Partial<MuiTextFieldProps>;\n  // lib/src/wrappers/DesktopPopperWrapper.tsx:87\n  onBlur?: () => void;\n  // ?? TODO when it will be possible to display \"empty\" date in datepicker use it instead of ignoring invalid inputs\n  ignoreInvalidInputs?: boolean;\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: (props: MuiTextFieldProps) => React.ReactElement;\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon?: React.ReactNode;\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. __/__/____ __:__ or __/__/____ __:__ _M)\n   */\n  mask?: string;\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   *\n   * @default /\\dap/gi\n   */\n  acceptRegex?: RegExp;\n  /**\n   * Props to pass to keyboard input adornment.\n   *\n   * @type {Partial<InputAdornmentProps>}\n   */\n  InputAdornmentProps?: Partial<InputAdornmentProps>;\n  /**\n   * Props to pass to keyboard adornment button.\n   *\n   * @type {Partial<IconButtonProps>}\n   */\n  OpenPickerButtonProps?: Partial<IconButtonProps>;\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter?: (str: string) => string;\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   *\n   * @default false\n   */\n  disableOpenPicker?: boolean;\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   *\n   * @default false\n   */\n  disableMaskedInput?: boolean;\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   *\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText?: (value: ParsableDate, utils: MuiPickersAdapter) => string;\n}\n\nexport type ExportedDateInputProps<TInputValue, TDateValue> = Omit<\n  DateInputProps<TInputValue, TDateValue>,\n  | 'openPicker'\n  | 'inputValue'\n  | 'onChange'\n  | 'inputFormat'\n  | 'validationError'\n  | 'rawValue'\n  | 'forwardedRef'\n  | 'open'\n  | 'TextFieldProps'\n  | 'onBlur'\n>;\n\nexport interface DateInputRefs {\n  inputRef?: React.Ref<HTMLInputElement>;\n  containerRef?: React.Ref<HTMLDivElement>;\n  forwardedRef?: React.Ref<HTMLInputElement>;\n}\n\nexport const PureDateInput: React.FC<DateInputProps & DateInputRefs> = ({\n  containerRef,\n  disabled,\n  forwardedRef,\n  getOpenDialogAriaText = getTextFieldAriaText,\n  inputFormat,\n  InputProps,\n  label,\n  openPicker: onOpen,\n  rawValue,\n  renderInput,\n  TextFieldProps = {},\n  validationError,\n}) => {\n  const utils = useUtils();\n  const PureDateInputProps = React.useMemo(\n    () => ({\n      ...InputProps,\n      readOnly: true,\n    }),\n    [InputProps]\n  );\n\n  const inputValue = getDisplayDate(utils, rawValue, inputFormat);\n\n  return renderInput({\n    label,\n    disabled,\n    ref: containerRef,\n    inputRef: forwardedRef,\n    error: validationError,\n    InputProps: PureDateInputProps,\n    inputProps: {\n      disabled,\n      'aria-readonly': true,\n      'aria-label': getOpenDialogAriaText(rawValue, utils),\n      value: inputValue,\n      onClick: onOpen,\n      onKeyDown: onSpaceOrEnter(onOpen),\n    },\n    ...TextFieldProps,\n  });\n};\n\nPureDateInput.propTypes = {\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  getOpenDialogAriaText: PropTypes.func,\n  mask: PropTypes.string,\n  OpenPickerButtonProps: PropTypes.object,\n  openPickerIcon: PropTypes.node,\n  renderInput: PropTypes.func.isRequired,\n  rifmFormatter: PropTypes.func,\n};\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Button, { ButtonProps } from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TypographyProps } from '@material-ui/core/Typography';\nimport ToolbarText from './ToolbarText';\nimport { ExtendMui } from '../typings/helpers';\n\nexport interface ToolbarButtonProps extends ExtendMui<ButtonProps, 'value' | 'variant'> {\n  align?: TypographyProps['align'];\n  selected: boolean;\n  typographyClassName?: string;\n  value: React.ReactNode;\n  variant: TypographyProps['variant'];\n}\n\nexport const useStyles = makeStyles(\n  {\n    root: {\n      padding: 0,\n      minWidth: '16px',\n      textTransform: 'none',\n    },\n  },\n  { name: 'MuiPickersToolbarButton' }\n);\n\nexport const ToolbarButton: React.FunctionComponent<ToolbarButtonProps> = (props) => {\n  const { align, className, selected, typographyClassName, value, variant, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <Button\n      data-mui-test=\"toolbar-button\"\n      variant=\"text\"\n      className={clsx(classes.root, className)}\n      {...other}\n    >\n      <ToolbarText\n        align={align}\n        className={typographyClassName}\n        variant={variant}\n        value={value}\n        selected={selected}\n      />\n    </Button>\n  );\n};\n\nToolbarButton.displayName = 'ToolbarButton';\n\nexport default ToolbarButton;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport { ExtendMui } from '../typings/helpers';\n\nexport interface ToolbarTextProps extends ExtendMui<TypographyProps> {\n  selected?: boolean;\n  value: React.ReactNode;\n}\n\nexport const useStyles = makeStyles(\n  (theme) => {\n    const textColor =\n      theme.palette.type === 'light'\n        ? theme.palette.primary.contrastText\n        : theme.palette.getContrastText(theme.palette.background.default);\n\n    return {\n      root: {\n        transition: theme.transitions.create('color'),\n        color: fade(textColor, 0.54),\n        '&$selected': {\n          color: textColor,\n        },\n      },\n      selected: {},\n    };\n  },\n  { name: 'MuiPickersToolbarText' }\n);\n\nconst ToolbarText: React.FC<ToolbarTextProps> = (props) => {\n  const { className, selected, value, ...other } = props;\n  const classes = useStyles();\n  return (\n    <Typography\n      className={clsx(classes.root, className, {\n        [classes.selected]: selected,\n      })}\n      {...other}\n    >\n      {value}\n    </Typography>\n  );\n};\n\nexport default ToolbarText;\n","import * as React from 'react';\nimport { useUtils } from './useUtils';\nimport { ParsableDate } from '../../constants/prop-types';\n\nexport type OverrideParsableDateProps<TDate, TProps, TKey extends keyof TProps> = Omit<\n  TProps,\n  TKey\n> &\n  Partial<Record<TKey, ParsableDate<TDate>>>;\n\nexport function useParsedDate<TDate>(\n  possiblyUnparsedValue: ParsableDate<TDate>\n): TDate | undefined {\n  const utils = useUtils<TDate>();\n  return React.useMemo(\n    () =>\n      typeof possiblyUnparsedValue === 'undefined' ? undefined : utils.date(possiblyUnparsedValue)!,\n    [possiblyUnparsedValue, utils]\n  );\n}\n\ninterface MonthValidationOptions {\n  disablePast?: boolean;\n  disableFuture?: boolean;\n  minDate: unknown;\n  maxDate: unknown;\n}\n\nexport function useNextMonthDisabled(\n  month: unknown,\n  { disableFuture, maxDate }: Pick<MonthValidationOptions, 'disableFuture' | 'maxDate'>\n) {\n  const utils = useUtils();\n  return React.useMemo(() => {\n    const now = utils.date();\n    const lastEnabledMonth = utils.startOfMonth(\n      disableFuture && utils.isBefore(now, maxDate) ? now : maxDate\n    );\n    return !utils.isAfter(lastEnabledMonth, month);\n  }, [disableFuture, maxDate, month, utils]);\n}\n\nexport function usePreviousMonthDisabled(\n  month: unknown,\n  { disablePast, minDate }: Pick<MonthValidationOptions, 'disablePast' | 'minDate'>\n) {\n  const utils = useUtils();\n\n  return React.useMemo(() => {\n    const now = utils.date();\n    const firstEnabledMonth = utils.startOfMonth(\n      disablePast && utils.isAfter(now, minDate) ? now : minDate\n    );\n    return !utils.isBefore(firstEnabledMonth, month);\n  }, [disablePast, minDate, month, utils]);\n}\n","import * as React from 'react';\n\nexport const CanAutoFocusContext = React.createContext(true);\n\nexport const useCanAutoFocus = () => React.useContext(CanAutoFocusContext);\n\nexport function useAutoFocusControl(open: boolean) {\n  const [canAutoFocus, setCanAutoFocus] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!open) {\n      setCanAutoFocus(false);\n    }\n  }, [open]);\n\n  return {\n    canAutoFocus,\n    onOpen: React.useCallback(() => setCanAutoFocus(true), []),\n  };\n}\n","import * as React from 'react';\nimport { useIsomorphicEffect } from './useKeyDown';\nimport { arrayIncludes } from '../../_helpers/utils';\nimport { DateTimePickerView } from '../../DateTimePicker';\nimport { BasePickerProps } from '../../typings/BasePicker';\n\nconst getOrientation = () => {\n  if (typeof window === 'undefined') {\n    return 'portrait';\n  }\n\n  if (window.screen && window.screen.orientation && window.screen.orientation.angle) {\n    return Math.abs(window.screen.orientation.angle) === 90 ? 'landscape' : 'portrait';\n  }\n\n  // Support IOS safari\n  if (window.orientation) {\n    return Math.abs(Number(window.orientation)) === 90 ? 'landscape' : 'portrait';\n  }\n\n  return 'portrait';\n};\n\nexport function useIsLandscape(\n  views: DateTimePickerView[],\n  customOrientation?: BasePickerProps['orientation']\n): boolean {\n  const [orientation, setOrientation] = React.useState<BasePickerProps['orientation']>(\n    getOrientation()\n  );\n\n  useIsomorphicEffect(() => {\n    const eventHandler = () => {\n      setOrientation(getOrientation());\n    };\n    window.addEventListener('orientationchange', eventHandler);\n    return () => {\n      window.removeEventListener('orientationchange', eventHandler);\n    };\n  }, []);\n\n  if (arrayIncludes(views, ['hours', 'minutes', 'seconds'])) {\n    // could not display 13:34:44 in landscape mode\n    return false;\n  }\n\n  const orientationToUse = customOrientation || orientation;\n  return orientationToUse === 'landscape';\n}\n","import * as React from 'react';\n\nexport const useIsomorphicEffect =\n  typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\ntype KeyHandlers = Record<number, () => void>;\n\nexport function runKeyHandler(\n  event: KeyboardEvent | React.KeyboardEvent,\n  keyHandlers: KeyHandlers\n) {\n  const handler = keyHandlers[event.keyCode];\n  if (handler) {\n    handler();\n    // if event was handled prevent other side effects (e.g. page scroll)\n    event.preventDefault();\n  }\n}\n\nexport function useKeyDownHandler(active: boolean, keyHandlers: KeyHandlers) {\n  const keyHandlersRef = React.useRef(keyHandlers);\n  keyHandlersRef.current = keyHandlers;\n\n  return React.useCallback(\n    (event: React.KeyboardEvent) => {\n      if (active) {\n        runKeyHandler(event, keyHandlersRef.current);\n      }\n    },\n    [active]\n  );\n}\n\nexport function useGlobalKeyDown(active: boolean, keyHandlers: KeyHandlers) {\n  const keyHandlersRef = React.useRef(keyHandlers);\n  keyHandlersRef.current = keyHandlers;\n\n  useIsomorphicEffect(() => {\n    if (active) {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        runKeyHandler(event, keyHandlersRef.current);\n      };\n      window.addEventListener('keydown', handleKeyDown);\n      return () => {\n        window.removeEventListener('keydown', handleKeyDown);\n      };\n    }\n\n    return undefined;\n  }, [active]);\n}\n\nexport const keycode = {\n  ArrowUp: 38,\n  ArrowDown: 40,\n  ArrowLeft: 37,\n  ArrowRight: 39,\n  Enter: 13,\n  Home: 36,\n  End: 35,\n  PageUp: 33,\n  PageDown: 34,\n  Esc: 27,\n};\n","import * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../../_helpers/utils';\nimport { DateInputProps, MuiTextFieldProps } from '../PureDateInput';\nimport {\n  maskedDateFormatter,\n  getDisplayDate,\n  checkMaskIsValidForCurrentFormat,\n} from '../../_helpers/text-field-helper';\n\ntype MaskedInputProps = Omit<\n  DateInputProps,\n  | 'open'\n  | 'adornmentPosition'\n  | 'renderInput'\n  | 'openPicker'\n  | 'InputProps'\n  | 'InputAdornmentProps'\n  | 'openPickerIcon'\n  | 'disableOpenPicker'\n  | 'getOpenDialogAriaText'\n  | 'OpenPickerButtonProps'\n> & { inputProps?: Partial<React.HTMLProps<HTMLInputElement>> };\n\nexport function useMaskedInput({\n  acceptRegex = /[\\d]/gi,\n  disabled,\n  disableMaskedInput,\n  ignoreInvalidInputs,\n  inputFormat,\n  inputProps,\n  label,\n  mask,\n  onChange,\n  rawValue,\n  readOnly,\n  rifmFormatter,\n  TextFieldProps,\n  validationError,\n}: MaskedInputProps): MuiTextFieldProps {\n  const utils = useUtils();\n  const isFocusedRef = React.useRef(false);\n\n  const getInputValue = React.useCallback(() => getDisplayDate(utils, rawValue, inputFormat), [\n    inputFormat,\n    rawValue,\n    utils,\n  ]);\n\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState<string>(getInputValue());\n\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n\n  const formatter = React.useMemo(\n    () =>\n      shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : (st: string) => st,\n    [acceptRegex, mask, shouldUseMaskedInput]\n  );\n\n  React.useEffect(() => {\n    // We do not need to update the input value on keystroke\n    // Because library formatters can change inputs from 12/12/2 to 12/12/0002\n    if ((rawValue === null || utils.isValid(rawValue)) && !isFocusedRef.current) {\n      setInnerInputValue(getInputValue());\n    }\n  }, [utils, getInputValue, rawValue]);\n\n  const handleChange = (text: string) => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter,\n  });\n\n  const inputStateArgs = shouldUseMaskedInput\n    ? rifmProps\n    : {\n        value: innerInputValue,\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n          handleChange(event.currentTarget.value);\n        },\n      };\n\n  return {\n    label,\n    disabled,\n    error: validationError,\n    helperText: formatHelperText,\n    inputProps: {\n      ...inputStateArgs,\n      disabled, // make spreading in custom input easier\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text',\n      ...inputProps,\n      onFocus: createDelegatedEventHandler(() => {\n        isFocusedRef.current = true;\n      }, inputProps?.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        isFocusedRef.current = false;\n      }, inputProps?.onBlur),\n    },\n    ...TextFieldProps,\n  };\n}\n","import * as React from 'react';\nimport { BasePickerProps } from '../../typings/BasePicker';\n\nexport function useOpenState({ open, onOpen, onClose }: BasePickerProps<any, any>) {\n  const isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  const [openState, setIsOpenState] = React.useState(false);\n\n  // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n  React.useEffect(() => {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n\n  const setIsOpen = React.useCallback(\n    (newIsOpen: boolean) => {\n      if (!isControllingOpenProp) {\n        setIsOpenState(newIsOpen);\n      }\n\n      return newIsOpen ? onOpen && onOpen() : onClose && onClose();\n    },\n    [isControllingOpenProp, onOpen, onClose]\n  );\n\n  return { isOpen: openState, setIsOpen };\n}\n","import * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { WrapperVariant } from '../../wrappers/Wrapper';\nimport { BasePickerProps } from '../../typings/BasePicker';\nimport { useUtils, useNow, MuiPickersAdapter } from './useUtils';\n\nexport interface PickerStateValueManager<TInput, TDateValue> {\n  parseInput: (utils: MuiPickersAdapter, props: BasePickerProps<TInput, TDateValue>) => TDateValue;\n  emptyValue: TDateValue;\n  areValuesEqual: (\n    utils: MuiPickersAdapter,\n    valueLeft: TDateValue,\n    valueRight: TDateValue\n  ) => boolean;\n}\n\nexport type PickerSelectionState = 'partial' | 'shallow' | 'finish';\n\nexport function usePickerState<TInput, TDateValue>(\n  props: BasePickerProps<TInput, TDateValue>,\n  valueManager: PickerStateValueManager<TInput, TDateValue>\n) {\n  const {\n    inputFormat,\n    disabled,\n    readOnly,\n    onAccept,\n    onChange,\n    disableCloseOnSelect,\n    value,\n  } = props;\n\n  if (!inputFormat) {\n    throw new Error('inputFormat prop is required');\n  }\n\n  const now = useNow();\n  const utils = useUtils();\n  const { isOpen, setIsOpen } = useOpenState(props);\n  const [pickerDate, setPickerDate] = React.useState(valueManager.parseInput(utils, props));\n\n  // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    const parsedDateValue = valueManager.parseInput(utils, props);\n    setPickerDate((currentPickerDate) => {\n      if (!valueManager.areValuesEqual(utils, currentPickerDate, parsedDateValue)) {\n        return parsedDateValue;\n      }\n\n      return currentPickerDate;\n    });\n    // We need to react only on value change, because `date` could potentially return new Date() on each render\n  }, [value, utils]); // eslint-disable-line\n\n  const acceptDate = React.useCallback(\n    (acceptedDate: TDateValue, needClosePicker: boolean) => {\n      onChange(acceptedDate);\n\n      if (needClosePicker) {\n        setIsOpen(false);\n\n        if (onAccept) {\n          onAccept(acceptedDate);\n        }\n      }\n    },\n    [onAccept, onChange, setIsOpen]\n  );\n\n  const wrapperProps = React.useMemo(\n    () => ({\n      open: isOpen,\n      onClear: () => acceptDate(valueManager.emptyValue, true),\n      onAccept: () => acceptDate(pickerDate, true),\n      onDismiss: () => setIsOpen(false),\n      onSetToday: () => {\n        // TODO FIX ME\n        setPickerDate(now as any);\n        acceptDate(now as any, !disableCloseOnSelect);\n      },\n    }),\n    [acceptDate, disableCloseOnSelect, isOpen, now, pickerDate, setIsOpen, valueManager.emptyValue]\n  );\n\n  const pickerProps = React.useMemo(\n    () => ({\n      // canAutoFocus,\n      date: pickerDate,\n      isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: () => {\n        if (!isMobileKeyboardViewOpen) {\n          // accept any partial input done by React.user\n          setPickerDate(pickerDate);\n        }\n\n        setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen);\n      },\n      onDateChange: (\n        newDate: TDateValue,\n        wrapperVariant: WrapperVariant,\n        selectionState: PickerSelectionState = 'partial'\n      ) => {\n        setPickerDate(newDate);\n        if (selectionState === 'partial') {\n          acceptDate(newDate, false);\n        }\n\n        if (selectionState === 'finish') {\n          const shouldCloseOnSelect = !(disableCloseOnSelect ?? wrapperVariant === 'mobile');\n          acceptDate(newDate, shouldCloseOnSelect);\n        }\n\n        // if selectionState === \"shallow\" do nothing (we already update picker state)\n      },\n    }),\n    [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, pickerDate]\n  );\n\n  const inputProps = React.useMemo(\n    () => ({\n      onChange,\n      inputFormat,\n      open: isOpen,\n      rawValue: value,\n      openPicker: () => !readOnly && !disabled && setIsOpen(true),\n    }),\n    [onChange, inputFormat, isOpen, value, readOnly, disabled, setIsOpen]\n  );\n\n  const pickerState = { pickerProps, inputProps, wrapperProps };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDate,\n      other: pickerState,\n    },\n  }));\n\n  return pickerState;\n}\n","import * as React from 'react';\nimport { IUtils } from '@date-io/core/IUtils';\nimport { MuiPickersAdapterContext } from '../../LocalizationProvider';\n\nexport type MuiPickersAdapter<TDate = unknown> = IUtils<TDate>;\n\n// TODO uncomment when syntax will be allowed by next babel\nfunction checkUtils(utils: MuiPickersAdapter | null) /* :asserts utils is MuiPickersAdapter */ {\n  if (!utils) {\n    throw new Error(\n      'Can not find utils in context. It looks like you forgot to wrap your component in LocalizationProvider, or pass dateAdapter prop directly.'\n    );\n  }\n}\n\nexport function useUtils<T = unknown>() {\n  const utils = React.useContext(MuiPickersAdapterContext);\n  checkUtils(utils);\n\n  return utils as MuiPickersAdapter<T>;\n}\n\nexport function useNow<TDate = unknown>() {\n  const utils = useUtils<TDate>();\n  const now = React.useRef(utils.date());\n\n  return now.current!;\n}\n","import * as React from 'react';\nimport { useUtils, MuiPickersAdapter } from './useUtils';\n\nexport interface ValidationProps<TError, TDateValue> {\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError?: (reason: TError, value: TDateValue) => void;\n}\n\nexport interface ValidationHookOptions<TError> {\n  defaultValidationError?: TError;\n  isSameError?: (a: TError, b: TError) => boolean;\n}\n\nconst defaultIsSameError = (a: unknown, b: unknown) => a === b;\n\nexport function makeValidationHook<\n  TError,\n  TDateValue,\n  TProps extends ValidationProps<TError, TDateValue>\n>(\n  validateFn: (utils: MuiPickersAdapter, value: TDateValue, props: TProps) => TError,\n  { defaultValidationError, isSameError = defaultIsSameError }: ValidationHookOptions<TError> = {}\n) {\n  return (value: TDateValue, props: TProps) => {\n    const utils = useUtils();\n    const previousValidationErrorRef = React.useRef<TError>(\n      defaultValidationError || null\n    ) as React.MutableRefObject<TError>;\n\n    const validationError = validateFn(utils, value, props);\n\n    React.useEffect(() => {\n      if (props.onError && !isSameError(validationError, previousValidationErrorRef.current)) {\n        props.onError(validationError, value);\n      }\n\n      previousValidationErrorRef.current = validationError;\n    }, [previousValidationErrorRef, props, validationError, value]);\n\n    return validationError;\n  };\n}\n","import * as React from 'react';\nimport { arrayIncludes } from '../../_helpers/utils';\nimport { PickerSelectionState } from './usePickerState';\nimport { AnyPickerView } from '../../Picker/SharedPickerProps';\n\nexport type PickerOnChangeFn<TDate> = (\n  date: TDate | null,\n  selectionState?: PickerSelectionState\n) => void;\n\nexport function useViews({\n  views,\n  openTo,\n  onChange,\n  isMobileKeyboardViewOpen,\n  toggleMobileKeyboardView,\n}: {\n  views: AnyPickerView[];\n  openTo: AnyPickerView;\n  onChange: PickerOnChangeFn<unknown>;\n  isMobileKeyboardViewOpen: boolean;\n  toggleMobileKeyboardView: () => void;\n}) {\n  const [openView, setOpenView] = React.useState(\n    openTo && arrayIncludes(views, openTo) ? openTo : views[0]\n  );\n\n  const setOpenViewEnhanced = React.useCallback(\n    (...args: Parameters<typeof setOpenView>) => {\n      if (isMobileKeyboardViewOpen) {\n        toggleMobileKeyboardView();\n      }\n\n      setOpenView(...args);\n    },\n    [isMobileKeyboardViewOpen, toggleMobileKeyboardView]\n  );\n\n  const previousView = views[views.indexOf(openView!) - 1];\n  const nextView = views[views.indexOf(openView!) + 1];\n\n  const openNext = React.useCallback(() => {\n    if (nextView) {\n      setOpenViewEnhanced(nextView);\n    }\n  }, [nextView, setOpenViewEnhanced]);\n\n  const handleChangeAndOpenNext = React.useCallback(\n    (date: unknown, currentViewSelectionState?: PickerSelectionState) => {\n      const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n      const globalSelectionState =\n        isSelectionFinishedOnCurrentView && Boolean(nextView)\n          ? 'partial'\n          : currentViewSelectionState;\n\n      onChange(date, globalSelectionState);\n      if (isSelectionFinishedOnCurrentView) {\n        openNext();\n      }\n    },\n    [nextView, onChange, openNext]\n  );\n\n  return {\n    nextView,\n    previousView,\n    openNext,\n    handleChangeAndOpenNext,\n    openView,\n    setOpenView: setOpenViewEnhanced,\n  };\n}\n","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const ArrowDropDownIcon = createSvgIcon(<path d=\"M7 10l5 5 5-5z\" />, 'ArrowDropDown');\n","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const ArrowLeftIcon = createSvgIcon(\n  <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />,\n  'ArrowLeft'\n);\n","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const ArrowRightIcon = createSvgIcon(\n  <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\" />,\n  'ArrowRight'\n);\n","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const CalendarIcon = createSvgIcon(\n  <path d=\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\" />,\n  'Calendar'\n);\n","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const ClockIcon = createSvgIcon(\n  <React.Fragment>\n    <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" />\n    <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\" />\n  </React.Fragment>,\n  'Clock'\n);\n","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const DateRangeIcon = createSvgIcon(\n  <path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\" />,\n  'DateRange'\n);\n","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const PenIcon = createSvgIcon(\n  <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\" />,\n  'Pen'\n);\n","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const TimeIcon = createSvgIcon(\n  <React.Fragment>\n    <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" />\n    <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\" />\n  </React.Fragment>,\n  'Time'\n);\n","import * as React from 'react';\nimport { MuiPickersAdapter } from './hooks/useUtils';\nimport { MuiPickersAdapterContext } from '../LocalizationProvider';\n\nexport interface WithDateAdapterProps<TDate> {\n  /**\n   * Allows to pass configured date-io adapter directly. More info [here](https://next.material-ui-pickers.dev/guides/date-adapter-passing)\n   * ```jsx\n   * dateAdapter={new DateFnsAdapter({ locale: ruLocale })}\n   * ```\n   */\n  dateAdapter?: MuiPickersAdapter<TDate>;\n}\n\nexport function withDateAdapterProp<TProps>(\n  Component: React.ComponentType<TProps>\n): React.FC<TProps & WithDateAdapterProps<unknown>> {\n  return ({ dateAdapter, ...other }: TProps & WithDateAdapterProps<unknown>) => {\n    if (dateAdapter) {\n      return (\n        <MuiPickersAdapterContext.Provider value={dateAdapter}>\n          <Component {...(other as TProps)} />\n        </MuiPickersAdapterContext.Provider>\n      );\n    }\n    return <Component {...(other as TProps)} />;\n  };\n}\n","import * as React from 'react';\nimport getThemeProps from '@material-ui/styles/getThemeProps';\nimport { useTheme } from '@material-ui/core/styles';\n\nexport function useDefaultProps<T>(props: T, { name }: { name: string }) {\n  const theme = useTheme();\n\n  return getThemeProps<any, T, string>({\n    props,\n    theme,\n    name,\n  });\n}\n\nexport function withDefaultProps<T>(\n  componentConfig: { name: string },\n  Component: React.ComponentType<T>\n): React.FC<T> {\n  const componentName = componentConfig.name.replace('Mui', '');\n\n  const WithDefaultProps = (props: T) => {\n    Component.displayName = componentName;\n    const propsWithDefault = useDefaultProps(props, componentConfig);\n\n    return <Component {...propsWithDefault} />;\n  };\n\n  WithDefaultProps.displayName = `WithDefaultProps(${componentName})`;\n  return WithDefaultProps;\n}\n","export const DIALOG_WIDTH = 320;\n\nexport const DIALOG_WIDTH_WIDER = 325;\n\nexport const VIEW_HEIGHT = 358;\n\nexport const DAY_SIZE = 36;\n\nexport const DAY_MARGIN = 2;\n\nexport const IS_TOUCH_DEVICE_MEDIA = '@media (pointer: fine)';\n","import * as PropTypes from 'prop-types';\n\nexport const date = PropTypes.oneOfType([\n  PropTypes.object,\n  PropTypes.string,\n  PropTypes.number,\n  PropTypes.instanceOf(Date),\n]);\n\nconst datePickerView = PropTypes.oneOf(['year', 'month', 'day']);\n\nexport type ParsableDate<TDate = unknown> = string | number | Date | null | undefined | TDate;\n\nexport const DomainPropTypes = { date, datePickerView };\n\nexport const defaultMinDate = new Date('1900-01-01') as unknown;\n\nexport const defaultMaxDate = new Date('2099-12-31') as unknown;\n","export * from './DatePicker';\n\nexport { DatePickerToolbar } from './DatePicker/DatePickerToolbar';\n\nexport * from './TimePicker';\n\nexport { TimePickerToolbar } from './TimePicker/TimePickerToolbar';\n\nexport * from './DateTimePicker';\n\nexport { DateTimePickerToolbar } from './DateTimePicker/DateTimePickerToolbar';\n\nexport * from './DateRangePicker/DateRangePicker';\n\nexport { DateRangePickerToolbar } from './DateRangePicker/DateRangePickerToolbar';\n\nexport { Calendar as PickersCalendar } from './views/Calendar/Calendar';\n\nexport { CalendarView as PickersCalendarView } from './views/Calendar/CalendarView';\n\nexport { Day as PickersDay } from './views/Calendar/Day';\n\nexport { ClockView as PickersClockView } from './views/Clock/ClockView';\n\nexport { Clock as PickersClock } from './views/Clock/Clock';\n\nexport { default as PickersBasePickers } from './Picker/Picker';\n\nexport { useUtils } from './_shared/hooks/useUtils';\n\nexport { usePickerState } from './_shared/hooks/usePickerState';\n\nexport * from './typings/BasePicker';\n\nexport {\n  default as LocalizationProvider,\n  MuiPickersAdapterContext as MuiPickersContext,\n} from './LocalizationProvider';\n\n// TODO replace the following syntax with new ts export type { } syntax when will be supported by rollup\n\nexport type PickersCalendarProps<TDate> = import('./views/Calendar/Calendar').CalendarProps<TDate>;\nexport type PickersCalendarViewProps<\n  TDate\n> = import('./views/Calendar/CalendarView').CalendarViewProps<TDate>;\nexport type PickersDayProps<TDate> = import('./views/Calendar/Day').DayProps<TDate>;\nexport type PickersClockViewProps<TDate> = import('./views/Clock/ClockView').ClockViewProps<TDate>;\nexport type PickersClockProps<TDate> = import('./views/Clock/Clock').ClockProps<TDate>;\nexport type ToolbarComponentProps = import('./Picker/SharedPickerProps').ToolbarComponentProps;\nexport type DateRangeDelimiterProps = import('./DateRangePicker/DateRangeDelimiter').DateRangeDelimiterProps;\nexport type LocalizationProviderProps = import('./LocalizationProvider').LocalizationProviderProps;\nexport type DateRange<T> = import('./DateRangePicker/RangeTypes').DateRange<T>;\nexport type RangeInput<T> = import('./DateRangePicker/RangeTypes').RangeInput<T>;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Day, DayProps } from './Day';\nimport { useUtils, useNow } from '../../_shared/hooks/useUtils';\nimport { PickerOnChangeFn } from '../../_shared/hooks/useViews';\nimport { DAY_SIZE, DAY_MARGIN } from '../../constants/dimensions';\nimport { useDefaultProps } from '../../_shared/withDefaultProps';\nimport { PickerSelectionState } from '../../_shared/hooks/usePickerState';\nimport { useGlobalKeyDown, keycode } from '../../_shared/hooks/useKeyDown';\nimport { SlideTransition, SlideDirection, SlideTransitionProps } from './SlideTransition';\n\nexport interface ExportedCalendarProps<TDate>\n  extends Pick<\n    DayProps<TDate>,\n    'disableHighlightToday' | 'showDaysOutsideCurrentMonth' | 'allowSameDateSelection'\n  > {\n  /**\n   * Calendar onChange.\n   */\n  onChange: PickerOnChangeFn<TDate>;\n  /**\n   * Custom renderer for day. Check DayComponentProps api @DateIOType.\n   */\n  renderDay?: (\n    day: TDate,\n    selectedDates: (TDate | null)[],\n    DayComponentProps: DayProps<TDate>\n  ) => JSX.Element;\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   *\n   * @default currentWrapper !== 'static'\n   */\n  allowKeyboardControl?: boolean;\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   *\n   * @default false\n   */\n  loading?: boolean;\n  /**\n   * Component displaying when passed `loading` true.\n   *\n   * @default () => \"...\"\n   */\n  renderLoading?: () => React.ReactNode;\n}\n\nexport interface CalendarProps<TDate> extends ExportedCalendarProps<TDate> {\n  date: TDate | null | Array<TDate | null>;\n  isDateDisabled: (day: TDate) => boolean;\n  slideDirection: SlideDirection;\n  currentMonth: TDate;\n  reduceAnimations: boolean;\n  focusedDay: TDate | null;\n  changeFocusedDay: (newFocusedDay: TDate) => void;\n  isMonthSwitchingAnimating: boolean;\n  onMonthSwitchingAnimationEnd: () => void;\n  TransitionProps?: Partial<SlideTransitionProps>;\n  className?: string;\n}\n\nconst muiComponentConfig = { name: 'MuiPickersCalendar' };\nexport const useStyles = makeStyles((theme) => {\n  const weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 4) * 6;\n  return {\n    root: {\n      minHeight: weeksContainerHeight,\n    },\n    loadingContainer: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minHeight: weeksContainerHeight,\n    },\n    weekContainer: {\n      overflow: 'hidden',\n    },\n    week: {\n      margin: `${DAY_MARGIN}px 0`,\n      display: 'flex',\n      justifyContent: 'center',\n    },\n    iconButton: {\n      zIndex: 1,\n      backgroundColor: theme.palette.background.paper,\n    },\n    previousMonthButton: {\n      marginRight: 12,\n    },\n    daysHeader: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    weekDayLabel: {\n      width: 36,\n      height: 40,\n      margin: '0 2px',\n      textAlign: 'center',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      color: theme.palette.text.secondary,\n    },\n  };\n}, muiComponentConfig);\n\nexport function Calendar<TDate>(props: CalendarProps<TDate>) {\n  const {\n    allowKeyboardControl,\n    allowSameDateSelection,\n    changeFocusedDay,\n    className,\n    currentMonth,\n    date,\n    disableHighlightToday,\n    focusedDay,\n    isDateDisabled,\n    isMonthSwitchingAnimating,\n    loading,\n    onChange,\n    onMonthSwitchingAnimationEnd,\n    reduceAnimations,\n    renderDay,\n    renderLoading = () => <span data-mui-test=\"loading-progress\">...</span>,\n    showDaysOutsideCurrentMonth,\n    slideDirection,\n    TransitionProps,\n  } = useDefaultProps(props, muiComponentConfig);\n\n  const now = useNow<TDate>();\n  const utils = useUtils<TDate>();\n  const theme = useTheme();\n  const classes = useStyles();\n\n  const handleDaySelect = React.useCallback(\n    (day: TDate, isFinish: PickerSelectionState = 'finish') => {\n      // TODO possibly buggy line figure out and add tests\n      const finalDate = Array.isArray(date) ? day : utils.mergeDateAndTime(day, date || now);\n\n      onChange(finalDate, isFinish);\n    },\n    [date, now, onChange, utils]\n  );\n\n  const initialDate = Array.isArray(date) ? date[0] : date;\n\n  const nowFocusedDay = focusedDay || initialDate || now;\n  useGlobalKeyDown(Boolean(allowKeyboardControl), {\n    [keycode.ArrowUp]: () => changeFocusedDay(utils.addDays(nowFocusedDay, -7)),\n    [keycode.ArrowDown]: () => changeFocusedDay(utils.addDays(nowFocusedDay, 7)),\n    [keycode.ArrowLeft]: () =>\n      changeFocusedDay(utils.addDays(nowFocusedDay, theme.direction === 'ltr' ? -1 : 1)),\n    [keycode.ArrowRight]: () =>\n      changeFocusedDay(utils.addDays(nowFocusedDay, theme.direction === 'ltr' ? 1 : -1)),\n    [keycode.Home]: () => changeFocusedDay(utils.startOfWeek(nowFocusedDay)),\n    [keycode.End]: () => changeFocusedDay(utils.endOfWeek(nowFocusedDay)),\n    [keycode.PageUp]: () => changeFocusedDay(utils.getNextMonth(nowFocusedDay)),\n    [keycode.PageDown]: () => changeFocusedDay(utils.getPreviousMonth(nowFocusedDay)),\n  });\n\n  const currentMonthNumber = utils.getMonth(currentMonth);\n  const selectedDates = (Array.isArray(date) ? date : [date])\n    .filter(Boolean)\n    .map((selectedDateItem) => selectedDateItem && utils.startOfDay(selectedDateItem));\n\n  return (\n    <React.Fragment>\n      <div className={classes.daysHeader}>\n        {utils.getWeekdays().map((day, i) => (\n          <Typography\n            aria-hidden\n            key={day + i.toString()}\n            variant=\"caption\"\n            className={classes.weekDayLabel}\n          >\n            {day.charAt(0).toUpperCase()}\n          </Typography>\n        ))}\n      </div>\n      {loading ? (\n        <div className={classes.loadingContainer}>{renderLoading()}</div>\n      ) : (\n        <SlideTransition\n          transKey={currentMonthNumber}\n          onExited={onMonthSwitchingAnimationEnd}\n          reduceAnimations={reduceAnimations}\n          slideDirection={slideDirection}\n          className={clsx(classes.root, className)}\n          {...TransitionProps}\n        >\n          <div role=\"grid\" className={classes.weekContainer}>\n            {utils.getWeekArray(currentMonth).map((week) => (\n              <div role=\"row\" key={`week-${week[0]}`} className={classes.week}>\n                {week.map((day) => {\n                  const disabled = isDateDisabled(day);\n                  const isDayInCurrentMonth = utils.getMonth(day) === currentMonthNumber;\n\n                  const dayProps: DayProps<TDate> = {\n                    key: (day as any)?.toString(),\n                    day,\n                    role: 'cell',\n                    isAnimating: isMonthSwitchingAnimating,\n                    disabled,\n                    allowKeyboardControl,\n                    allowSameDateSelection,\n                    focused:\n                      allowKeyboardControl &&\n                      Boolean(focusedDay) &&\n                      utils.isSameDay(day, nowFocusedDay),\n                    today: utils.isSameDay(day, now),\n                    inCurrentMonth: isDayInCurrentMonth,\n                    selected: selectedDates.some(\n                      (selectedDate) => selectedDate && utils.isSameDay(selectedDate, day)\n                    ),\n                    disableHighlightToday,\n                    showDaysOutsideCurrentMonth,\n                    focusable:\n                      allowKeyboardControl &&\n                      Boolean(nowFocusedDay) &&\n                      utils.toJsDate(nowFocusedDay).getDate() === utils.toJsDate(day).getDate(),\n                    onDayFocus: changeFocusedDay,\n                    onDaySelect: handleDaySelect,\n                  };\n\n                  return renderDay ? (\n                    renderDay(day, selectedDates, dayProps)\n                  ) : (\n                    <Day {...dayProps} />\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        </SlideTransition>\n      )}\n    </React.Fragment>\n  );\n}\n\nCalendar.displayName = 'Calendar';\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Fade from '@material-ui/core/Fade';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport { DatePickerView } from '../../DatePicker';\nimport { SlideDirection } from './SlideTransition';\nimport { useUtils } from '../../_shared/hooks/useUtils';\nimport { FadeTransitionGroup } from './FadeTransitionGroup';\nimport { DateValidationProps } from '../../_helpers/date-utils';\nimport { ArrowDropDownIcon } from '../../_shared/icons/ArrowDropDown';\nimport { ArrowSwitcher, ExportedArrowSwitcherProps } from '../../_shared/ArrowSwitcher';\nimport {\n  usePreviousMonthDisabled,\n  useNextMonthDisabled,\n} from '../../_shared/hooks/date-helpers-hooks';\n\nexport type ExportedCalendarHeaderProps<TDate> = Pick<\n  CalendarHeaderProps<TDate>,\n  | 'leftArrowIcon'\n  | 'rightArrowIcon'\n  | 'leftArrowButtonProps'\n  | 'rightArrowButtonProps'\n  | 'leftArrowButtonText'\n  | 'rightArrowButtonText'\n  | 'getViewSwitchingButtonText'\n>;\n\nexport interface CalendarHeaderProps<TDate>\n  extends ExportedArrowSwitcherProps,\n    Omit<DateValidationProps<TDate>, 'shouldDisableDate'> {\n  view: DatePickerView;\n  views: DatePickerView[];\n  currentMonth: TDate;\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText?: (currentView: DatePickerView) => string;\n  reduceAnimations: boolean;\n  changeView: (view: DatePickerView) => void;\n  onMonthChange: (date: TDate, slideDirection: SlideDirection) => void;\n}\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: 16,\n      marginBottom: 8,\n      paddingLeft: 24,\n      paddingRight: 12,\n      // prevent jumping in safari\n      maxHeight: 30,\n      minHeight: 30,\n    },\n    yearSelectionSwitcher: {\n      marginRight: 'auto',\n    },\n    previousMonthButton: {\n      marginRight: 24,\n    },\n    switchViewDropdown: {\n      willChange: 'transform',\n      transition: theme.transitions.create('transform'),\n      transform: 'rotate(0deg)',\n    },\n    switchViewDropdownDown: {\n      transform: 'rotate(180deg)',\n    },\n    monthTitleContainer: {\n      display: 'flex',\n      maxHeight: 30,\n      overflow: 'hidden',\n      cursor: 'pointer',\n      marginRight: 'auto',\n    },\n    monthText: {\n      marginRight: 4,\n    },\n  }),\n  { name: 'MuiPickersCalendarHeader' }\n);\n\nfunction getSwitchingViewAriaText(view: DatePickerView) {\n  return view === 'year'\n    ? 'year view is open, switch to calendar view'\n    : 'calendar view is open, switch to year view';\n}\n\nexport function CalendarHeader<TDate>(props: CalendarHeaderProps<TDate>) {\n  const {\n    view: currentView,\n    views,\n    currentMonth: month,\n    changeView,\n    minDate,\n    maxDate,\n    disablePast,\n    disableFuture,\n    onMonthChange,\n    reduceAnimations,\n    leftArrowButtonProps,\n    rightArrowButtonProps,\n    leftArrowIcon,\n    rightArrowIcon,\n    leftArrowButtonText = 'previous month',\n    rightArrowButtonText = 'next month',\n    getViewSwitchingButtonText = getSwitchingViewAriaText,\n  } = props;\n\n  const utils = useUtils<TDate>();\n  const classes = useStyles();\n\n  const selectNextMonth = () => onMonthChange(utils.getNextMonth(month), 'left');\n  const selectPreviousMonth = () => onMonthChange(utils.getPreviousMonth(month), 'right');\n\n  const isNextMonthDisabled = useNextMonthDisabled(month, { disableFuture, maxDate });\n  const isPreviousMonthDisabled = usePreviousMonthDisabled(month, { disablePast, minDate });\n\n  const toggleView = () => {\n    if (views.length === 1) {\n      return;\n    }\n\n    if (views.length === 2) {\n      changeView(views.find((view) => view !== currentView) || views[0]);\n    } else {\n      // switching only between first 2\n      const nextIndexToOpen = views.indexOf(currentView) !== 0 ? 0 : 1;\n      changeView(views[nextIndexToOpen]);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.root}>\n        <div className={classes.monthTitleContainer} onClick={toggleView}>\n          <FadeTransitionGroup\n            reduceAnimations={reduceAnimations}\n            transKey={utils.format(month, 'month')}\n          >\n            <Typography\n              aria-live=\"polite\"\n              data-mui-test=\"calendar-month-text\"\n              align=\"center\"\n              variant=\"subtitle1\"\n              className={classes.monthText}\n            >\n              {utils.format(month, 'month')}\n            </Typography>\n          </FadeTransitionGroup>\n          <FadeTransitionGroup\n            reduceAnimations={reduceAnimations}\n            transKey={utils.format(month, 'year')}\n          >\n            <Typography\n              aria-live=\"polite\"\n              data-mui-test=\"calendar-year-text\"\n              align=\"center\"\n              variant=\"subtitle1\"\n            >\n              {utils.format(month, 'year')}\n            </Typography>\n          </FadeTransitionGroup>\n          {views.length > 1 && (\n            <IconButton\n              size=\"small\"\n              data-mui-test=\"calendar-view-switcher\"\n              onClick={toggleView}\n              className={classes.yearSelectionSwitcher}\n              aria-label={getViewSwitchingButtonText(currentView)}\n            >\n              <ArrowDropDownIcon\n                className={clsx(classes.switchViewDropdown, {\n                  [classes.switchViewDropdownDown]: currentView === 'year',\n                })}\n              />\n            </IconButton>\n          )}\n        </div>\n        <Fade in={currentView === 'date'}>\n          <ArrowSwitcher\n            leftArrowButtonProps={leftArrowButtonProps}\n            rightArrowButtonProps={rightArrowButtonProps}\n            leftArrowButtonText={leftArrowButtonText}\n            rightArrowButtonText={rightArrowButtonText}\n            leftArrowIcon={leftArrowIcon}\n            rightArrowIcon={rightArrowIcon}\n            onLeftClick={selectPreviousMonth}\n            onRightClick={selectNextMonth}\n            isLeftDisabled={isPreviousMonthDisabled}\n            isRightDisabled={isNextMonthDisabled}\n          />\n        </Fade>\n      </div>\n    </React.Fragment>\n  );\n}\n\nCalendarHeader.displayName = 'PickersCalendarHeader';\n\nCalendarHeader.propTypes = {\n  leftArrowButtonText: PropTypes.string,\n  leftArrowIcon: PropTypes.node,\n  rightArrowButtonText: PropTypes.string,\n  rightArrowIcon: PropTypes.node,\n};\n\nexport default CalendarHeader;\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { MonthSelection } from './MonthSelection';\nimport { DatePickerView } from '../../DatePicker';\nimport { useCalendarState } from './useCalendarState';\nimport { useUtils } from '../../_shared/hooks/useUtils';\nimport { FadeTransitionGroup } from './FadeTransitionGroup';\nimport { Calendar, ExportedCalendarProps } from './Calendar';\nimport { PickerOnChangeFn } from '../../_shared/hooks/useViews';\nimport { useDefaultProps } from '../../_shared/withDefaultProps';\nimport { DAY_SIZE, DAY_MARGIN } from '../../constants/dimensions';\nimport { CalendarHeader, ExportedCalendarHeaderProps } from './CalendarHeader';\nimport { YearSelection, ExportedYearSelectionProps } from './YearSelection';\nimport { defaultMinDate, defaultMaxDate } from '../../constants/prop-types';\nimport { IsStaticVariantContext } from '../../wrappers/WrapperVariantContext';\nimport { DateValidationProps, findClosestEnabledDate } from '../../_helpers/date-utils';\n\nexport interface CalendarViewProps<TDate>\n  extends DateValidationProps<TDate>,\n    ExportedCalendarProps<TDate>,\n    ExportedYearSelectionProps<TDate>,\n    ExportedCalendarHeaderProps<TDate> {\n  date: TDate;\n  view: DatePickerView;\n  views: DatePickerView[];\n  changeView: (view: DatePickerView) => void;\n  onChange: PickerOnChangeFn<TDate>;\n  /**\n   * Disable heavy animations.\n   *\n   * @default /(android)/i.test(window.navigator.userAgent).\n   */\n  reduceAnimations?: boolean;\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange?: (date: TDate) => void;\n}\n\nexport type ExportedCalendarViewProps<TDate> = Omit<\n  CalendarViewProps<TDate>,\n  'date' | 'view' | 'views' | 'onChange' | 'changeView' | 'slideDirection' | 'currentMonth'\n>;\n\nconst muiComponentConfig = { name: 'MuiPickersCalendarView' };\n\nexport const useStyles = makeStyles(\n  {\n    viewTransitionContainer: {\n      overflowY: 'auto',\n    },\n    fullHeightContainer: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minHeight: (DAY_SIZE + DAY_MARGIN * 4) * 7,\n      height: '100%',\n    },\n  },\n  muiComponentConfig\n);\n\nexport const defaultReduceAnimations =\n  typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent);\n\nexport function CalendarView<TDate>(props: CalendarViewProps<TDate>) {\n  const {\n    allowKeyboardControl: allowKeyboardControlProp,\n    changeView,\n    date,\n    disableFuture,\n    disablePast,\n    loading,\n    maxDate: maxDateProp,\n    minDate: minDateProp,\n    onChange,\n    onMonthChange,\n    reduceAnimations = defaultReduceAnimations,\n    renderLoading,\n    shouldDisableDate,\n    shouldDisableYear,\n    view,\n    ...other\n  } = useDefaultProps(props, muiComponentConfig);\n\n  const utils = useUtils<TDate>();\n  const classes = useStyles();\n  const isStatic = React.useContext(IsStaticVariantContext);\n  const allowKeyboardControl = allowKeyboardControlProp ?? !isStatic;\n\n  const minDate = minDateProp || utils.date(defaultMinDate)!;\n  const maxDate = maxDateProp || utils.date(defaultMaxDate)!;\n\n  const {\n    calendarState,\n    changeFocusedDay,\n    changeMonth,\n    isDateDisabled,\n    handleChangeMonth,\n    onMonthSwitchingAnimationEnd,\n  } = useCalendarState({\n    date,\n    reduceAnimations,\n    onMonthChange,\n    minDate,\n    maxDate,\n    shouldDisableDate,\n    disablePast,\n    disableFuture,\n  });\n\n  React.useEffect(() => {\n    if (date && isDateDisabled(date)) {\n      const closestEnabledDate = findClosestEnabledDate<TDate>({\n        utils,\n        date,\n        minDate,\n        maxDate,\n        disablePast: Boolean(disablePast),\n        disableFuture: Boolean(disableFuture),\n        shouldDisableDate: isDateDisabled,\n      });\n\n      onChange(closestEnabledDate, 'partial');\n    }\n    // This call is too expensive to run it on each prop change.\n    // So just ensure that we are not rendering disabled as selected on mount.\n  }, []); // eslint-disable-line\n\n  React.useEffect(() => {\n    changeMonth(date);\n  }, [date]); // eslint-disable-line\n\n  return (\n    <React.Fragment>\n      <CalendarHeader\n        {...other}\n        view={view}\n        currentMonth={calendarState.currentMonth}\n        changeView={changeView}\n        onMonthChange={(newMonth, direction) => handleChangeMonth({ newMonth, direction })}\n        minDate={minDate}\n        maxDate={maxDate}\n        disablePast={disablePast}\n        disableFuture={disableFuture}\n        reduceAnimations={reduceAnimations}\n      />\n      <FadeTransitionGroup\n        reduceAnimations={reduceAnimations}\n        className={classes.viewTransitionContainer}\n        transKey={view}\n      >\n        <div>\n          {view === 'year' && (\n            <YearSelection\n              {...other}\n              date={date}\n              onChange={onChange}\n              minDate={minDate}\n              maxDate={maxDate}\n              disableFuture={disableFuture}\n              disablePast={disablePast}\n              isDateDisabled={isDateDisabled}\n              allowKeyboardControl={allowKeyboardControl}\n              shouldDisableYear={shouldDisableYear}\n              changeFocusedDay={changeFocusedDay}\n            />\n          )}\n          {view === 'month' && (\n            <MonthSelection\n              {...other}\n              date={date}\n              onChange={onChange}\n              minDate={minDate}\n              maxDate={maxDate}\n              onMonthChange={onMonthChange}\n            />\n          )}\n          {view === 'date' && (\n            <Calendar\n              {...other}\n              {...calendarState}\n              onMonthSwitchingAnimationEnd={onMonthSwitchingAnimationEnd}\n              changeFocusedDay={changeFocusedDay}\n              reduceAnimations={reduceAnimations}\n              date={date}\n              onChange={onChange}\n              isDateDisabled={isDateDisabled}\n              allowKeyboardControl={allowKeyboardControl}\n              loading={loading}\n              renderLoading={renderLoading}\n            />\n          )}\n        </div>\n      </FadeTransitionGroup>\n    </React.Fragment>\n  );\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ButtonBase, { ButtonBaseProps } from '@material-ui/core/ButtonBase';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport { ExtendMui } from '../../typings/helpers';\nimport { onSpaceOrEnter } from '../../_helpers/utils';\nimport { useUtils } from '../../_shared/hooks/useUtils';\nimport { DAY_SIZE, DAY_MARGIN } from '../../constants/dimensions';\nimport { useDefaultProps } from '../../_shared/withDefaultProps';\nimport { useCanAutoFocus } from '../../_shared/hooks/useCanAutoFocus';\nimport { PickerSelectionState } from '../../_shared/hooks/usePickerState';\n\nconst muiComponentConfig = { name: 'MuiPickersDay' };\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      ...theme.typography.caption,\n      width: DAY_SIZE,\n      height: DAY_SIZE,\n      borderRadius: '50%',\n      padding: 0,\n      // background required here to prevent collides with the other days when animating with transition group\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      },\n      '&:focus': {\n        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),\n        '&$selected': {\n          willChange: 'background-color',\n          backgroundColor: theme.palette.primary.dark,\n        },\n      },\n      '&$selected': {\n        color: theme.palette.primary.contrastText,\n        backgroundColor: theme.palette.primary.main,\n        fontWeight: theme.typography.fontWeightMedium,\n        transition: theme.transitions.create('background-color', {\n          duration: theme.transitions.duration.short,\n        }),\n        '&:hover': {\n          willChange: 'background-color',\n          backgroundColor: theme.palette.primary.dark,\n        },\n      },\n      '&$disabled': {\n        color: theme.palette.text.secondary,\n      },\n    },\n    dayWithMargin: {\n      margin: `0 ${DAY_MARGIN}px`,\n    },\n    dayOutsideMonth: {\n      color: theme.palette.text.secondary,\n    },\n    hiddenDaySpacingFiller: {\n      visibility: 'hidden',\n    },\n    today: {\n      '&:not($selected)': {\n        border: `1px solid ${theme.palette.text.secondary}`,\n      },\n    },\n    dayLabel: {\n      // need for overrides\n    },\n    selected: {},\n    disabled: {},\n  }),\n  muiComponentConfig\n);\n\nexport interface DayProps<TDate> extends ExtendMui<ButtonBaseProps> {\n  /**\n   * The date to show.\n   */\n  day: TDate;\n  /**\n   * Is focused by keyboard navigation.\n   */\n  focused?: boolean;\n  /**\n   * Can be focused by tabbing in.\n   */\n  focusable?: boolean;\n  /**\n   * Is day in current month.\n   */\n  inCurrentMonth: boolean;\n  /**\n   * Is switching month animation going on right now.\n   */\n  isAnimating?: boolean;\n  /**\n   * Is today?\n   */\n  today?: boolean;\n  /**\n   * Disabled?.\n   */\n  disabled?: boolean;\n  /**\n   * Selected?\n   */\n  selected?: boolean;\n  /**\n   * Is keyboard control and focus management enabled.\n   */\n  allowKeyboardControl?: boolean;\n  /**\n   * Disable margin between days, useful for displaying range of days.\n   */\n  disableMargin?: boolean;\n  /**\n   * Display disabled dates outside the current month.\n   *\n   * @default false\n   */\n  showDaysOutsideCurrentMonth?: boolean;\n  /**\n   * Disable highlighting today date with a circle.\n   *\n   * @default false\n   */\n  disableHighlightToday?: boolean;\n  /**\n   * Allow selecting the same date (fire onChange even if same date is selected).\n   *\n   * @default false\n   */\n  allowSameDateSelection?: boolean;\n  onDayFocus?: (day: TDate) => void;\n  onDaySelect: (day: TDate, isFinish: PickerSelectionState) => void;\n}\n\nfunction PureDay<TDate>(props: DayProps<TDate>) {\n  const {\n    allowKeyboardControl,\n    allowSameDateSelection = false,\n    className,\n    day,\n    disabled = false,\n    disableHighlightToday = false,\n    disableMargin = false,\n    focusable = false,\n    focused = false,\n    hidden,\n    inCurrentMonth: isInCurrentMonth,\n    isAnimating,\n    onClick,\n    onDayFocus,\n    onDaySelect,\n    onFocus,\n    onKeyDown,\n    selected = false,\n    showDaysOutsideCurrentMonth = false,\n    today: isToday = false,\n    ...other\n  } = useDefaultProps(props, muiComponentConfig);\n\n  const utils = useUtils();\n  const classes = useStyles();\n  const canAutoFocus = useCanAutoFocus();\n  const ref = React.useRef<HTMLButtonElement>(null);\n\n  React.useEffect(() => {\n    if (\n      focused &&\n      !disabled &&\n      !isAnimating &&\n      isInCurrentMonth &&\n      ref.current &&\n      allowKeyboardControl &&\n      canAutoFocus\n    ) {\n      ref.current.focus();\n    }\n  }, [allowKeyboardControl, canAutoFocus, disabled, focused, isAnimating, isInCurrentMonth]);\n\n  const handleFocus = (event: React.FocusEvent<HTMLButtonElement>) => {\n    if (!focused && onDayFocus) {\n      onDayFocus(day);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (!allowSameDateSelection && selected) return;\n\n    if (!disabled) {\n      onDaySelect(day, 'finish');\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  const handleKeyDown = onSpaceOrEnter(() => {\n    if (!disabled) {\n      onDaySelect(day, 'finish');\n    }\n  }, onKeyDown);\n\n  const dayClassName = clsx(\n    classes.root,\n    {\n      [classes.selected]: selected,\n      [classes.dayWithMargin]: !disableMargin,\n      [classes.today]: !disableHighlightToday && isToday,\n      [classes.dayOutsideMonth]: !isInCurrentMonth && showDaysOutsideCurrentMonth,\n    },\n    className\n  );\n\n  if (!isInCurrentMonth && !showDaysOutsideCurrentMonth) {\n    // Do not render button and not attach any listeners for empty days\n    return <div aria-hidden className={clsx(dayClassName, classes.hiddenDaySpacingFiller)} />;\n  }\n\n  return (\n    <ButtonBase\n      ref={ref}\n      centerRipple\n      data-mui-test=\"day\"\n      disabled={disabled}\n      aria-label={utils.format(day, 'fullDate')}\n      tabIndex={focused || focusable ? 0 : -1}\n      className={dayClassName}\n      {...other}\n      onFocus={handleFocus}\n      onKeyDown={handleKeyDown}\n      onClick={handleClick}\n    >\n      <span className={classes.dayLabel}>{utils.format(day, 'dayOfMonth')}</span>\n    </ButtonBase>\n  );\n}\n\nexport const areDayPropsEqual = (prevProps: DayProps<any>, nextProps: DayProps<any>) => {\n  return (\n    prevProps.focused === nextProps.focused &&\n    prevProps.focusable === nextProps.focusable &&\n    prevProps.isAnimating === nextProps.isAnimating &&\n    prevProps.today === nextProps.today &&\n    prevProps.disabled === nextProps.disabled &&\n    prevProps.selected === nextProps.selected &&\n    prevProps.allowKeyboardControl === nextProps.allowKeyboardControl &&\n    prevProps.disableMargin === nextProps.disableMargin &&\n    prevProps.showDaysOutsideCurrentMonth === nextProps.showDaysOutsideCurrentMonth &&\n    prevProps.disableHighlightToday === nextProps.disableHighlightToday &&\n    prevProps.className === nextProps.className &&\n    prevProps.inCurrentMonth === nextProps.inCurrentMonth &&\n    prevProps.onDayFocus === nextProps.onDayFocus &&\n    prevProps.onDaySelect === nextProps.onDaySelect\n  );\n};\n\nPureDay.displayName = 'PickersDay';\n\nPureDay.propTypes = {\n  disabled: PropTypes.bool,\n  selected: PropTypes.bool,\n  today: PropTypes.bool,\n};\n\n// keep typings of original component and not loose generic\nexport const Day = (React.memo(PureDay, areDayPropsEqual) as unknown) as typeof PureDay;\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\ninterface FadeTransitionProps {\n  transKey: React.Key;\n  className?: string;\n  reduceAnimations: boolean;\n  children: React.ReactElement;\n}\n\nconst animationDuration = 500;\nexport const useStyles = makeStyles(\n  (theme) => {\n    return {\n      root: {\n        display: 'block',\n        position: 'relative',\n      },\n      fadeEnter: {\n        willChange: 'transform',\n        opacity: 0,\n      },\n      fadeEnterActive: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n          duration: animationDuration,\n        }),\n      },\n      fadeExit: {\n        opacity: 1,\n      },\n      fadeExitActive: {\n        opacity: 0,\n        transition: theme.transitions.create('opacity', {\n          duration: animationDuration / 2,\n        }),\n      },\n    };\n  },\n  { name: 'MuiPickersFadeTransition' }\n);\n\nexport const FadeTransitionGroup: React.FC<FadeTransitionProps> = ({\n  children,\n  className,\n  reduceAnimations,\n  transKey,\n}) => {\n  const classes = useStyles();\n  if (reduceAnimations) {\n    return children;\n  }\n\n  const transitionClasses = {\n    exit: classes.fadeExit,\n    enterActive: classes.fadeEnterActive,\n    enter: classes.fadeEnter,\n    exitActive: classes.fadeExitActive,\n  };\n\n  return (\n    <TransitionGroup\n      className={clsx(classes.root, className)}\n      childFactory={(element) =>\n        React.cloneElement(element, {\n          classNames: transitionClasses,\n        })\n      }\n    >\n      <CSSTransition\n        mountOnEnter\n        unmountOnExit\n        key={transKey}\n        timeout={{ appear: animationDuration, enter: animationDuration / 2, exit: 0 }}\n        classNames={transitionClasses}\n      >\n        {children}\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { onSpaceOrEnter } from '../../_helpers/utils';\n\nexport interface MonthProps {\n  children: React.ReactNode;\n  disabled?: boolean;\n  onSelect: (value: any) => void;\n  selected?: boolean;\n  value: any;\n}\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      flex: '1 0 33.33%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      cursor: 'pointer',\n      outline: 'none',\n      height: 64,\n      transition: theme.transitions.create('font-size', { duration: '100ms' }),\n      '&:focus': {\n        color: theme.palette.primary.main,\n        fontWeight: theme.typography.fontWeightMedium,\n      },\n      '&:disabled': {\n        pointerEvents: 'none',\n        color: theme.palette.text.secondary,\n      },\n      '&$selected': {\n        color: theme.palette.primary.main,\n        fontWeight: theme.typography.fontWeightMedium,\n      },\n    },\n    selected: {},\n  }),\n  { name: 'MuiPickersMonth' }\n);\n\nexport const Month: React.FC<MonthProps> = (props) => {\n  const { disabled, onSelect, selected, value, ...other } = props;\n  const classes = useStyles();\n  const handleSelection = () => {\n    onSelect(value);\n  };\n\n  return (\n    <Typography\n      data-mui-test=\"month\"\n      role=\"button\"\n      component=\"div\"\n      className={clsx(classes.root, {\n        [classes.selected]: selected,\n      })}\n      tabIndex={disabled ? -1 : 0}\n      onClick={handleSelection}\n      onKeyDown={onSpaceOrEnter(handleSelection)}\n      color={selected ? 'primary' : undefined}\n      variant={selected ? 'h5' : 'subtitle1'}\n      {...other}\n    />\n  );\n};\n\nMonth.displayName = 'Month';\n\nexport default Month;\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Month } from './Month';\nimport { useUtils, useNow } from '../../_shared/hooks/useUtils';\nimport { PickerOnChangeFn } from '../../_shared/hooks/useViews';\n\nexport interface MonthSelectionProps<TDate> {\n  date: TDate | null;\n  minDate: TDate;\n  maxDate: TDate;\n  onChange: PickerOnChangeFn<TDate>;\n  disablePast?: boolean | null | undefined;\n  disableFuture?: boolean | null | undefined;\n  onMonthChange?: (date: TDate) => void | Promise<void>;\n}\n\nexport const useStyles = makeStyles(\n  {\n    root: {\n      width: 310,\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignContent: 'stretch',\n    },\n  },\n  { name: 'MuiPickersMonthSelection' }\n);\n\nexport function MonthSelection<TDate>({\n  date,\n  disableFuture,\n  disablePast,\n  maxDate,\n  minDate,\n  onChange,\n  onMonthChange,\n}: MonthSelectionProps<TDate>) {\n  const utils = useUtils<TDate>();\n  const now = useNow<TDate>();\n  const classes = useStyles();\n  const currentMonth = utils.getMonth(date || now);\n\n  const shouldDisableMonth = (month: TDate) => {\n    const firstEnabledMonth = utils.startOfMonth(\n      disablePast && utils.isAfter(now, minDate) ? now : minDate\n    );\n\n    const lastEnabledMonth = utils.startOfMonth(\n      disableFuture && utils.isBefore(now, maxDate) ? now : maxDate\n    );\n\n    const isBeforeFirstEnabled = utils.isBefore(month, firstEnabledMonth);\n    const isAfterLastEnabled = utils.isAfter(month, lastEnabledMonth);\n\n    return isBeforeFirstEnabled || isAfterLastEnabled;\n  };\n\n  const onMonthSelect = React.useCallback(\n    (month: number) => {\n      const newDate = utils.setMonth(date || now, month);\n\n      onChange(newDate, 'finish');\n      if (onMonthChange) {\n        onMonthChange(newDate);\n      }\n    },\n    [date, now, onChange, onMonthChange, utils]\n  );\n\n  return (\n    <div className={classes.root}>\n      {utils.getMonthArray(date || now).map((month) => {\n        const monthNumber = utils.getMonth(month);\n        const monthText = utils.format(month, 'monthShort');\n\n        return (\n          <Month\n            key={monthText}\n            value={monthNumber}\n            selected={monthNumber === currentMonth}\n            onSelect={onMonthSelect}\n            disabled={shouldDisableMonth(month)}\n          >\n            {monthText}\n          </Month>\n        );\n      })}\n    </div>\n  );\n}\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { CSSTransitionProps } from 'react-transition-group/CSSTransition';\n\nexport type SlideDirection = 'right' | 'left';\nexport interface SlideTransitionProps extends Omit<CSSTransitionProps, 'timeout'> {\n  transKey: React.Key;\n  className?: string;\n  reduceAnimations: boolean;\n  slideDirection: SlideDirection;\n  children: React.ReactElement;\n}\n\nexport const slideAnimationDuration = 350;\nexport const useStyles = makeStyles(\n  (theme) => {\n    const slideTransition = theme.transitions.create('transform', {\n      duration: slideAnimationDuration,\n      easing: 'cubic-bezier(0.35, 0.8, 0.4, 1)',\n    });\n\n    return {\n      root: {\n        display: 'block',\n        position: 'relative',\n        overflowX: 'hidden',\n        '& > *': {\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          left: 0,\n        },\n      },\n      'slideEnter-left': {\n        willChange: 'transform',\n        transform: 'translate(100%)',\n        zIndex: 1,\n      },\n      'slideEnter-right': {\n        willChange: 'transform',\n        transform: 'translate(-100%)',\n        zIndex: 1,\n      },\n      slideEnterActive: {\n        transform: 'translate(0%)',\n        transition: slideTransition,\n      },\n      slideExit: {\n        transform: 'translate(0%)',\n      },\n      'slideExitActiveLeft-left': {\n        willChange: 'transform',\n        transform: 'translate(-100%)',\n        transition: slideTransition,\n        zIndex: 0,\n      },\n      'slideExitActiveLeft-right': {\n        willChange: 'transform',\n        transform: 'translate(100%)',\n        transition: slideTransition,\n        zIndex: 0,\n      },\n    };\n  },\n  { name: 'MuiPickersSlideTransition' }\n);\n\nexport const SlideTransition: React.SFC<SlideTransitionProps> = ({\n  children,\n  className,\n  reduceAnimations,\n  slideDirection,\n  transKey,\n  ...other\n}) => {\n  const classes = useStyles();\n  if (reduceAnimations) {\n    return <div className={clsx(classes.root, className)}>{children}</div>;\n  }\n\n  const transitionClasses = {\n    exit: classes.slideExit,\n    enterActive: classes.slideEnterActive,\n    // @ts-ignore\n    enter: classes[`slideEnter-${slideDirection}`],\n    // @ts-ignore\n    exitActive: classes[`slideExitActiveLeft-${slideDirection}`],\n  };\n\n  return (\n    <TransitionGroup\n      className={clsx(classes.root, className)}\n      childFactory={(element) =>\n        React.cloneElement(element, {\n          classNames: transitionClasses,\n        })\n      }\n    >\n      <CSSTransition\n        mountOnEnter\n        unmountOnExit\n        key={transKey}\n        timeout={slideAnimationDuration}\n        classNames={transitionClasses}\n        {...other}\n      >\n        {children}\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport { useForkRef } from '@material-ui/core/utils';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport { onSpaceOrEnter } from '../../_helpers/utils';\nimport { useCanAutoFocus } from '../../_shared/hooks/useCanAutoFocus';\nimport { WrapperVariantContext } from '../../wrappers/WrapperVariantContext';\n\nexport interface YearProps {\n  children: React.ReactNode;\n  disabled?: boolean;\n  onSelect: (value: any) => void;\n  selected: boolean;\n  focused: boolean;\n  value: any;\n  allowKeyboardControl?: boolean;\n  forwardedRef?: React.Ref<HTMLButtonElement>;\n}\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      flexBasis: '33.3%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      '&$disabled': {\n        color: theme.palette.text.secondary,\n      },\n      '&$selected': {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        backgroundColor: theme.palette.primary.main,\n        '&:focus, &:hover': {\n          backgroundColor: theme.palette.primary.dark,\n        },\n      },\n    },\n    modeDesktop: {\n      flexBasis: '25%',\n    },\n    yearButton: {\n      color: 'unset',\n      backgroundColor: 'transparent',\n      border: 'none',\n      outline: 0,\n      ...theme.typography.subtitle1,\n      margin: '8px 0',\n      height: 36,\n      width: 72,\n      borderRadius: 16,\n      cursor: 'pointer',\n      '&:focus, &:hover': {\n        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      },\n    },\n    disabled: {},\n    selected: {},\n  }),\n  { name: 'MuiPickersYear' }\n);\n\nexport const Year: React.FC<YearProps> = (props) => {\n  const {\n    allowKeyboardControl,\n    children,\n    disabled,\n    focused,\n    forwardedRef,\n    onSelect,\n    selected,\n    value,\n  } = props;\n  const classes = useStyles();\n  const ref = React.useRef<HTMLButtonElement>(null);\n  const refHandle = useForkRef(ref, forwardedRef as React.Ref<HTMLButtonElement>);\n  const canAutoFocus = useCanAutoFocus();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n\n  React.useEffect(() => {\n    if (canAutoFocus && focused && ref.current && !disabled && allowKeyboardControl) {\n      ref.current.focus();\n    }\n  }, [allowKeyboardControl, canAutoFocus, disabled, focused]);\n\n  return (\n    <div\n      data-mui-test=\"year\"\n      className={clsx(classes.root, {\n        [classes.modeDesktop]: wrapperVariant === 'desktop',\n      })}\n    >\n      <button\n        ref={refHandle}\n        disabled={disabled}\n        type=\"button\"\n        data-mui-test={`year-${children}`}\n        tabIndex={selected ? 0 : -1}\n        onClick={() => onSelect(value)}\n        onKeyDown={onSpaceOrEnter(() => onSelect(value))}\n        className={clsx(classes.yearButton, {\n          [classes.disabled]: disabled,\n          [classes.selected]: selected,\n        })}\n      >\n        {children}\n      </button>\n    </div>\n  );\n};\n\nexport default React.forwardRef<HTMLButtonElement, YearProps>((props, ref) => (\n  <Year {...props} forwardedRef={ref} />\n));\n","import * as React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n// eslint-disable-next-line import/no-named-as-default\nimport Year from './Year';\nimport { useUtils, useNow } from '../../_shared/hooks/useUtils';\nimport { PickerOnChangeFn } from '../../_shared/hooks/useViews';\nimport { findClosestEnabledDate } from '../../_helpers/date-utils';\nimport { PickerSelectionState } from '../../_shared/hooks/usePickerState';\nimport { WrapperVariantContext } from '../../wrappers/WrapperVariantContext';\nimport { useGlobalKeyDown, keycode as keys } from '../../_shared/hooks/useKeyDown';\n\nexport interface ExportedYearSelectionProps<TDate> {\n  /**\n   * Callback firing on year change @DateIOType.\n   */\n  onYearChange?: (date: unknown) => void;\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view. @DateIOType.\n   */\n  shouldDisableYear?: (day: unknown) => boolean;\n}\n\nexport interface YearSelectionProps<TDate> extends ExportedYearSelectionProps<TDate> {\n  allowKeyboardControl?: boolean;\n  changeFocusedDay: (day: TDate) => void;\n  date: TDate;\n  disableFuture?: boolean | null | undefined;\n  disablePast?: boolean | null | undefined;\n  isDateDisabled: (day: TDate) => boolean;\n  maxDate: TDate;\n  minDate: TDate;\n  onChange: PickerOnChangeFn<TDate>;\n}\n\nexport const useStyles = makeStyles(\n  {\n    root: {\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      overflowY: 'auto',\n      height: '100%',\n      margin: '0 4px',\n    },\n  },\n  { name: 'MuiPickersYearSelection' }\n);\n\nexport function YearSelection<TDate>({\n  allowKeyboardControl,\n  changeFocusedDay,\n  date: __dateOrNull,\n  isDateDisabled,\n  maxDate,\n  minDate,\n  disableFuture,\n  disablePast,\n  onChange,\n  onYearChange,\n  shouldDisableYear,\n}: YearSelectionProps<TDate>) {\n  const now = useNow<TDate>();\n  const theme = useTheme();\n  const utils = useUtils<TDate>();\n  const classes = useStyles();\n\n  const selectedDate = __dateOrNull || now;\n  const currentYear = utils.getYear(selectedDate);\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const selectedYearRef = React.useRef<HTMLButtonElement>(null);\n  const [focusedYear, setFocusedYear] = React.useState<number | null>(currentYear);\n\n  const handleYearSelection = React.useCallback(\n    (year: number, isFinish: PickerSelectionState = 'finish') => {\n      const submitDate = (newDate: TDate | null) => {\n        onChange(newDate, isFinish);\n        changeFocusedDay(newDate || now);\n\n        if (onYearChange) {\n          onYearChange(newDate);\n        }\n      };\n\n      const newDate = utils.setYear(selectedDate, year);\n      if (isDateDisabled(newDate)) {\n        const closestEnabledDate = findClosestEnabledDate({\n          utils,\n          date: newDate,\n          minDate,\n          maxDate,\n          disablePast: Boolean(disablePast),\n          disableFuture: Boolean(disableFuture),\n          shouldDisableDate: isDateDisabled,\n        });\n\n        submitDate(closestEnabledDate);\n      } else {\n        submitDate(newDate);\n      }\n    },\n    [\n      utils,\n      now,\n      selectedDate,\n      isDateDisabled,\n      onChange,\n      changeFocusedDay,\n      onYearChange,\n      minDate,\n      maxDate,\n      disablePast,\n      disableFuture,\n    ]\n  );\n\n  const focusYear = React.useCallback(\n    (year: number) => {\n      if (!isDateDisabled(utils.setYear(selectedDate, year))) {\n        setFocusedYear(year);\n      }\n    },\n    [selectedDate, isDateDisabled, utils]\n  );\n\n  const yearsInRow = wrapperVariant === 'desktop' ? 4 : 3;\n  const nowFocusedYear = focusedYear || currentYear;\n  useGlobalKeyDown(Boolean(allowKeyboardControl), {\n    [keys.ArrowUp]: () => focusYear(nowFocusedYear - yearsInRow),\n    [keys.ArrowDown]: () => focusYear(nowFocusedYear + yearsInRow),\n    [keys.ArrowLeft]: () => focusYear(nowFocusedYear + (theme.direction === 'ltr' ? -1 : 1)),\n    [keys.ArrowRight]: () => focusYear(nowFocusedYear + (theme.direction === 'ltr' ? 1 : -1)),\n  });\n\n  return (\n    <div className={classes.root}>\n      {utils.getYearRange(minDate, maxDate).map((year) => {\n        const yearNumber = utils.getYear(year);\n        const selected = yearNumber === currentYear;\n\n        return (\n          <Year\n            key={utils.format(year, 'year')}\n            selected={selected}\n            value={yearNumber}\n            onSelect={handleYearSelection}\n            allowKeyboardControl={allowKeyboardControl}\n            focused={yearNumber === focusedYear}\n            ref={selected ? selectedYearRef : undefined}\n            disabled={\n              (disablePast && utils.isBeforeYear(year, now)) ||\n              (disableFuture && utils.isAfterYear(year, now)) ||\n              (shouldDisableYear && shouldDisableYear(year))\n            }\n          >\n            {utils.format(year, 'year')}\n          </Year>\n        );\n      })}\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { CalendarViewProps } from './CalendarView';\nimport { SlideDirection } from './SlideTransition';\nimport { validateDate } from '../../_helpers/date-utils';\nimport { MuiPickersAdapter, useUtils, useNow } from '../../_shared/hooks/useUtils';\n\ninterface CalendarState<TDate> {\n  isMonthSwitchingAnimating: boolean;\n  currentMonth: TDate;\n  focusedDay: TDate;\n  slideDirection: SlideDirection;\n}\n\ntype ReducerAction<TType, TAdditional = {}> = { type: TType } & TAdditional;\n\ninterface ChangeMonthPayload<TDate> {\n  direction: SlideDirection;\n  newMonth: TDate;\n}\n\nexport const createCalendarStateReducer = <TDate extends unknown>(\n  reduceAnimations: boolean,\n  disableSwitchToMonthOnDayFocus: boolean,\n  utils: MuiPickersAdapter<TDate>\n) => (\n  state: CalendarState<TDate>,\n  action:\n    | ReducerAction<'finishMonthSwitchingAnimation'>\n    | ReducerAction<'changeMonth', ChangeMonthPayload<TDate>>\n    | ReducerAction<'changeFocusedDay', { focusedDay: TDate }>\n): CalendarState<TDate> => {\n  switch (action.type) {\n    case 'changeMonth':\n      return {\n        ...state,\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations,\n      };\n\n    case 'finishMonthSwitchingAnimation':\n      return {\n        ...state,\n        isMonthSwitchingAnimating: false,\n      };\n\n    case 'changeFocusedDay': {\n      const needMonthSwitch =\n        Boolean(action.focusedDay) &&\n        !disableSwitchToMonthOnDayFocus &&\n        !utils.isSameMonth(state.currentMonth, action.focusedDay);\n\n      return {\n        ...state,\n        focusedDay: action.focusedDay,\n        isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations,\n        currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n        slideDirection: utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right',\n      };\n    }\n\n    default:\n      throw new Error('missing support');\n  }\n};\n\ntype CalendarStateInput<TDate> = Pick<\n  CalendarViewProps<TDate>,\n  | 'disableFuture'\n  | 'disablePast'\n  | 'shouldDisableDate'\n  | 'date'\n  | 'reduceAnimations'\n  | 'onMonthChange'\n> & {\n  minDate: TDate;\n  maxDate: TDate;\n  disableSwitchToMonthOnDayFocus?: boolean;\n};\n\nexport function useCalendarState<TDate>({\n  date,\n  disableFuture,\n  disablePast,\n  disableSwitchToMonthOnDayFocus = false,\n  maxDate,\n  minDate,\n  onMonthChange,\n  reduceAnimations,\n  shouldDisableDate,\n}: CalendarStateInput<TDate>) {\n  const now = useNow<TDate>();\n  const utils = useUtils<TDate>();\n  const dateForMonth = date || now;\n  const reducerFn = React.useRef(\n    createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)\n  ).current;\n\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: date,\n    currentMonth: utils.startOfMonth(dateForMonth),\n    slideDirection: 'left',\n  });\n\n  const handleChangeMonth = React.useCallback(\n    (payload: ChangeMonthPayload<TDate>) => {\n      dispatch({\n        type: 'changeMonth',\n        ...payload,\n      });\n\n      if (onMonthChange) {\n        onMonthChange(payload.newMonth);\n      }\n    },\n    [onMonthChange]\n  );\n\n  const changeMonth = React.useCallback(\n    (newDate: TDate) => {\n      const newDateRequested = newDate ?? now;\n      if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n        return;\n      }\n\n      handleChangeMonth({\n        newMonth: utils.startOfMonth(newDateRequested),\n        direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth)\n          ? 'left'\n          : 'right',\n      });\n    },\n    [calendarState.currentMonth, handleChangeMonth, now, utils]\n  );\n\n  const isDateDisabled = React.useCallback(\n    (day: TDate | null) =>\n      validateDate(utils, day, {\n        disablePast,\n        disableFuture,\n        minDate,\n        maxDate,\n        shouldDisableDate,\n      }) !== null,\n    [disableFuture, disablePast, maxDate, minDate, shouldDisableDate, utils]\n  );\n\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({ type: 'finishMonthSwitchingAnimation' });\n  }, []);\n\n  const changeFocusedDay = React.useCallback(\n    (newFocusedDate: TDate) => {\n      if (!isDateDisabled(newFocusedDate)) {\n        dispatch({ type: 'changeFocusedDay', focusedDay: newFocusedDate });\n      }\n    },\n    [isDateDisabled]\n  );\n\n  return {\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth,\n  };\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ClockPointer from './ClockPointer';\nimport { useUtils } from '../../_shared/hooks/useUtils';\nimport { VIEW_HEIGHT } from '../../constants/dimensions';\nimport { ClockViewType } from '../../constants/ClockType';\nimport { PickerOnChangeFn } from '../../_shared/hooks/useViews';\nimport { getHours, getMinutes } from '../../_helpers/time-utils';\nimport { useDefaultProps } from '../../_shared/withDefaultProps';\nimport { useMeridiemMode } from '../../TimePicker/TimePickerToolbar';\nimport { PickerSelectionState } from '../../_shared/hooks/usePickerState';\nimport { useGlobalKeyDown, keycode } from '../../_shared/hooks/useKeyDown';\nimport { WrapperVariantContext } from '../../wrappers/WrapperVariantContext';\n\nexport interface ClockProps<TDate> extends ReturnType<typeof useMeridiemMode> {\n  date: TDate | null;\n  type: ClockViewType;\n  value: number;\n  isTimeDisabled: (timeValue: number, type: ClockViewType) => boolean;\n  children: React.ReactElement<any>[];\n  onDateChange: PickerOnChangeFn<TDate>;\n  onChange: (value: number, isFinish?: PickerSelectionState) => void;\n  ampm?: boolean;\n  minutesStep?: number;\n  ampmInClock?: boolean;\n  allowKeyboardControl?: boolean;\n}\n\nconst muiComponentConfig = {\n  name: 'MuiPickersClock',\n};\n\nexport const useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      position: 'relative',\n      minHeight: VIEW_HEIGHT,\n      alignItems: 'center',\n    },\n    clock: {\n      backgroundColor: 'rgba(0,0,0,.07)',\n      borderRadius: '50%',\n      height: 260,\n      width: 260,\n      position: 'relative',\n      pointerEvents: 'none',\n    },\n    squareMask: {\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'auto',\n      outline: 'none',\n      touchActions: 'none',\n      userSelect: 'none',\n      '&:active': {\n        cursor: 'move',\n      },\n    },\n    pin: {\n      width: 6,\n      height: 6,\n      borderRadius: '50%',\n      backgroundColor: theme.palette.primary.main,\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n    },\n    amButton: {\n      zIndex: 1,\n      left: 8,\n      position: 'absolute',\n      bottom: 8,\n    },\n    pmButton: {\n      zIndex: 1,\n      position: 'absolute',\n      bottom: 8,\n      right: 8,\n    },\n    meridiemButtonSelected: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.primary.contrastText,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.light,\n      },\n    },\n  }),\n  muiComponentConfig\n);\n\nexport function Clock<TDate>(props: ClockProps<TDate>) {\n  const {\n    allowKeyboardControl,\n    ampm,\n    ampmInClock = false,\n    children: numbersElementsArray,\n    date,\n    handleMeridiemChange,\n    isTimeDisabled,\n    meridiemMode,\n    minutesStep = 1,\n    onChange,\n    type,\n    value,\n  } = useDefaultProps(props, muiComponentConfig);\n\n  const utils = useUtils();\n  const classes = useStyles();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const isMoving = React.useRef(false);\n\n  const isSelectedTimeDisabled = isTimeDisabled(value, type);\n  const isPointerInner = !ampm && type === 'hours' && (value < 1 || value > 12);\n\n  const handleValueChange = (newValue: number, isFinish: PickerSelectionState) => {\n    if (isTimeDisabled(newValue, type)) {\n      return;\n    }\n\n    onChange(newValue, isFinish);\n  };\n\n  const setTime = (e: any, isFinish: PickerSelectionState) => {\n    let { offsetX, offsetY } = e;\n\n    if (typeof offsetX === 'undefined') {\n      const rect = e.target.getBoundingClientRect();\n\n      offsetX = e.changedTouches[0].clientX - rect.left;\n      offsetY = e.changedTouches[0].clientY - rect.top;\n    }\n\n    const value =\n      type === 'seconds' || type === 'minutes'\n        ? getMinutes(offsetX, offsetY, minutesStep)\n        : getHours(offsetX, offsetY, Boolean(ampm));\n\n    handleValueChange(value, isFinish);\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    isMoving.current = true;\n    setTime(e, 'shallow');\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent) => {\n    if (isMoving.current) {\n      setTime(e, 'finish');\n      isMoving.current = false;\n    }\n  };\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    // MouseEvent.which is deprecated, but MouseEvent.buttons is not supported in Safari\n    const isButtonPressed =\n      typeof e.buttons === 'undefined' ? e.nativeEvent.which === 1 : e.buttons === 1;\n\n    if (isButtonPressed) {\n      setTime(e.nativeEvent, 'shallow');\n    }\n  };\n\n  const handleMouseUp = (e: React.MouseEvent) => {\n    if (isMoving.current) {\n      isMoving.current = false;\n    }\n\n    setTime(e.nativeEvent, 'finish');\n  };\n\n  const hasSelected = React.useMemo(() => {\n    if (type === 'hours') {\n      return true;\n    }\n\n    return value % 5 === 0;\n  }, [type, value]);\n\n  const keyboardControlStep = type === 'minutes' ? minutesStep : 1;\n  useGlobalKeyDown(\n    Boolean(allowKeyboardControl ?? wrapperVariant !== 'static') && !isMoving.current,\n    {\n      [keycode.Home]: () => handleValueChange(0, 'partial'), // annulate both hours and minutes\n      [keycode.End]: () => handleValueChange(type === 'minutes' ? 59 : 23, 'partial'),\n      [keycode.ArrowUp]: () => handleValueChange(value + keyboardControlStep, 'partial'),\n      [keycode.ArrowDown]: () => handleValueChange(value - keyboardControlStep, 'partial'),\n    }\n  );\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.clock}>\n        <div\n          role=\"menu\"\n          tabIndex={-1}\n          className={classes.squareMask}\n          onTouchMove={handleTouchMove}\n          onTouchEnd={handleTouchEnd}\n          onMouseUp={handleMouseUp}\n          onMouseMove={handleMouseMove}\n        />\n        {!isSelectedTimeDisabled && (\n          <React.Fragment>\n            <div className={classes.pin} />\n            {date && (\n              <ClockPointer\n                type={type}\n                value={value}\n                isInner={isPointerInner}\n                hasSelected={hasSelected}\n                aria-live=\"polite\"\n                aria-label={`Selected time ${utils.format(date, 'fullTime')}`}\n              />\n            )}\n          </React.Fragment>\n        )}\n        {numbersElementsArray}\n      </div>\n      {ampm && (wrapperVariant === 'desktop' || ampmInClock) && (\n        <React.Fragment>\n          <IconButton\n            data-mui-test=\"in-clock-am-btn\"\n            onClick={() => handleMeridiemChange('am')}\n            disabled={meridiemMode === null}\n            className={clsx(classes.amButton, {\n              [classes.meridiemButtonSelected]: meridiemMode === 'am',\n            })}\n          >\n            <Typography variant=\"caption\">AM</Typography>\n          </IconButton>\n          <IconButton\n            disabled={meridiemMode === null}\n            data-mui-test=\"in-clock-pm-btn\"\n            onClick={() => handleMeridiemChange('pm')}\n            className={clsx(classes.pmButton, {\n              [classes.meridiemButtonSelected]: meridiemMode === 'pm',\n            })}\n          >\n            <Typography variant=\"caption\">PM</Typography>\n          </IconButton>\n        </React.Fragment>\n      )}\n    </div>\n  );\n}\n\nClock.propTypes = {\n  ampm: PropTypes.bool,\n  minutesStep: PropTypes.number,\n} as any;\n\nClock.displayName = 'Clock';\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport { onSpaceOrEnter } from '../../_helpers/utils';\nimport { useCanAutoFocus } from '../../_shared/hooks/useCanAutoFocus';\nimport { PickerSelectionState } from '../../_shared/hooks/usePickerState';\n\nconst positions: Record<number, [number, number]> = {\n  0: [0, 40],\n  1: [55, 19.6],\n  2: [94.4, 59.5],\n  3: [109, 114],\n  4: [94.4, 168.5],\n  5: [54.5, 208.4],\n  6: [0, 223],\n  7: [-54.5, 208.4],\n  8: [-94.4, 168.5],\n  9: [-109, 114],\n  10: [-94.4, 59.5],\n  11: [-54.5, 19.6],\n  12: [0, 5],\n  13: [36.9, 49.9],\n  14: [64, 77],\n  15: [74, 114],\n  16: [64, 151],\n  17: [37, 178],\n  18: [0, 188],\n  19: [-37, 178],\n  20: [-64, 151],\n  21: [-74, 114],\n  22: [-64, 77],\n  23: [-37, 50],\n};\n\nexport interface ClockNumberProps {\n  disabled: boolean;\n  getClockNumberText: (currentItemText: string) => string;\n  index: number;\n  isInner?: boolean;\n  label: string;\n  onSelect: (isFinish: PickerSelectionState) => void;\n  selected: boolean;\n}\n\nexport const useStyles = makeStyles(\n  (theme) => {\n    const size = 32;\n    const clockNumberColor =\n      theme.palette.type === 'light' ? theme.palette.text.primary : theme.palette.text.secondary;\n\n    return {\n      root: {\n        outline: 0,\n        width: size,\n        height: size,\n        userSelect: 'none',\n        position: 'absolute',\n        left: `calc((100% - ${size}px) / 2)`,\n        display: 'inline-flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderRadius: '50%',\n        color: clockNumberColor,\n        '&:focused': {\n          backgroundColor: theme.palette.background.paper,\n        },\n      },\n      clockNumberSelected: {\n        color: theme.palette.primary.contrastText,\n      },\n      clockNumberDisabled: {\n        pointerEvents: 'none',\n        color: fade(clockNumberColor, 0.2),\n      },\n    };\n  },\n  { name: 'MuiPickersClockNumber' }\n);\n\nexport const ClockNumber: React.FC<ClockNumberProps> = (props) => {\n  const { disabled, getClockNumberText, index, isInner, label, onSelect, selected } = props;\n  const classes = useStyles();\n  const canAutoFocus = useCanAutoFocus();\n  const ref = React.useRef<HTMLSpanElement>(null);\n  const className = clsx(classes.root, {\n    [classes.clockNumberSelected]: selected,\n    [classes.clockNumberDisabled]: disabled,\n  });\n\n  const transformStyle = React.useMemo(() => {\n    const position = positions[index];\n\n    return {\n      transform: `translate(${position[0]}px, ${position[1]}px`,\n    };\n  }, [index]);\n\n  React.useEffect(() => {\n    if (canAutoFocus && selected && ref.current) {\n      ref.current.focus();\n    }\n  }, [canAutoFocus, selected]);\n\n  return (\n    <ButtonBase\n      focusRipple\n      centerRipple\n      ref={ref}\n      aria-disabled={disabled}\n      tabIndex={disabled ? -1 : 0}\n      component=\"span\"\n      className={className}\n      style={transformStyle}\n      aria-label={getClockNumberText(label)}\n      onKeyDown={onSpaceOrEnter(() => onSelect('finish'))}\n    >\n      <Typography variant={isInner ? 'body2' : 'body1'}>{label}</Typography>\n    </ButtonBase>\n  );\n};\n\nexport default ClockNumber;\n","import * as React from 'react';\nimport { ClockNumber } from './ClockNumber';\nimport { MuiPickersAdapter } from '../../_shared/hooks/useUtils';\nimport { PickerSelectionState } from '../../_shared/hooks/usePickerState';\n\ninterface GetHourNumbersOptions {\n  ampm: boolean;\n  date: unknown;\n  getClockNumberText: (hour: string) => string;\n  isDisabled: (value: number) => boolean;\n  onChange: (value: number, isFinish?: PickerSelectionState) => void;\n  utils: MuiPickersAdapter;\n}\n\nexport const getHourNumbers = ({\n  ampm,\n  date,\n  getClockNumberText,\n  isDisabled,\n  onChange,\n  utils,\n}: GetHourNumbersOptions) => {\n  const currentHours = date ? utils.getHours(date) : null;\n\n  const hourNumbers: JSX.Element[] = [];\n  const startHour = ampm ? 1 : 0;\n  const endHour = ampm ? 12 : 23;\n\n  const isSelected = (hour: number) => {\n    if (currentHours === null) {\n      return false;\n    }\n\n    if (ampm) {\n      if (hour === 12) {\n        return currentHours === 12 || currentHours === 0;\n      }\n\n      return currentHours === hour || currentHours - 12 === hour;\n    }\n\n    return currentHours === hour;\n  };\n\n  for (let hour = startHour; hour <= endHour; hour += 1) {\n    let label = hour.toString();\n\n    if (hour === 0) {\n      label = '00';\n    }\n\n    const isInner = !ampm && (hour === 0 || hour > 12);\n    hourNumbers.push(\n      <ClockNumber\n        key={hour}\n        index={hour}\n        isInner={isInner}\n        selected={isSelected(hour)}\n        disabled={isDisabled(hour)}\n        label={utils.formatNumber(label)}\n        onSelect={() => onChange(hour, 'finish')}\n        getClockNumberText={getClockNumberText}\n      />\n    );\n  }\n\n  return hourNumbers;\n};\n\nexport const getMinutesNumbers = ({\n  utils,\n  value,\n  onChange,\n  isDisabled,\n  getClockNumberText,\n}: Omit<GetHourNumbersOptions, 'ampm' | 'date'> & { value: number }) => {\n  const f = utils.formatNumber;\n\n  return ([\n    [5, f('05')],\n    [10, f('10')],\n    [15, f('15')],\n    [20, f('20')],\n    [25, f('25')],\n    [30, f('30')],\n    [35, f('35')],\n    [40, f('40')],\n    [45, f('45')],\n    [50, f('50')],\n    [55, f('55')],\n    [0, f('00')],\n  ] as const).map(([numberValue, label], index) => (\n    <ClockNumber\n      key={numberValue}\n      label={label}\n      index={index + 1}\n      disabled={isDisabled(numberValue)}\n      selected={numberValue === value}\n      onSelect={(isFinish) => onChange(numberValue, isFinish)}\n      getClockNumberText={getClockNumberText}\n    />\n  ));\n};\n","import * as React from 'react';\nimport clsx from 'clsx';\nimport { withStyles, createStyles, Theme, WithStyles } from '@material-ui/core/styles';\nimport { ClockViewType } from '../../constants/ClockType';\n\nexport const styles = (theme: Theme) =>\n  createStyles({\n    pointer: {\n      width: 2,\n      backgroundColor: theme.palette.primary.main,\n      position: 'absolute',\n      left: 'calc(50% - 1px)',\n      bottom: '50%',\n      transformOrigin: 'center bottom 0px',\n    },\n    animateTransform: {\n      transition: theme.transitions.create(['transform', 'height']),\n    },\n    thumb: {\n      width: 4,\n      height: 4,\n      backgroundColor: theme.palette.primary.contrastText,\n      borderRadius: '100%',\n      position: 'absolute',\n      top: -21,\n      left: -15,\n      border: `14px solid ${theme.palette.primary.main}`,\n      boxSizing: 'content-box',\n    },\n    noPoint: {\n      backgroundColor: theme.palette.primary.main,\n    },\n  });\n\nexport interface ClockPointerProps\n  extends React.HTMLProps<HTMLDivElement>,\n    WithStyles<typeof styles> {\n  value: number;\n  hasSelected: boolean;\n  isInner: boolean;\n  type: ClockViewType;\n}\n\nclass ClockPointer extends React.Component<ClockPointerProps> {\n  public static getDerivedStateFromProps = (\n    nextProps: ClockPointerProps,\n    state: ClockPointer['state']\n  ) => {\n    if (nextProps.type !== state.previousType) {\n      return {\n        toAnimateTransform: true,\n        previousType: nextProps.type,\n      };\n    }\n\n    return {\n      toAnimateTransform: false,\n      previousType: nextProps.type,\n    };\n  };\n\n  public state = {\n    toAnimateTransform: false,\n    // eslint-disable-next-line react/no-unused-state\n    previousType: undefined,\n  };\n\n  public getAngleStyle = () => {\n    const { value, isInner, type } = this.props;\n\n    const max = type === 'hours' ? 12 : 60;\n    let angle = (360 / max) * value;\n\n    if (type === 'hours' && value > 12) {\n      angle -= 360; // round up angle to max 360 degrees\n    }\n\n    return {\n      height: isInner ? '26%' : '40%',\n      transform: `rotateZ(${angle}deg)`,\n    };\n  };\n\n  public render() {\n    const { classes, hasSelected, isInner, type, value, ...other } = this.props;\n\n    return (\n      <div\n        {...other}\n        style={this.getAngleStyle()}\n        className={clsx(classes.pointer, {\n          [classes.animateTransform]: this.state.toAnimateTransform,\n        })}\n      >\n        <div\n          className={clsx(classes.thumb, {\n            [classes.noPoint]: hasSelected,\n          })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, {\n  name: 'MuiPickersClockPointer',\n})(ClockPointer as React.ComponentType<ClockPointerProps>);\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Clock } from './Clock';\nimport { pipe } from '../../_helpers/utils';\nimport { useUtils, useNow } from '../../_shared/hooks/useUtils';\nimport { PickerOnChangeFn } from '../../_shared/hooks/useViews';\nimport { useDefaultProps } from '../../_shared/withDefaultProps';\nimport { getHourNumbers, getMinutesNumbers } from './ClockNumbers';\nimport { useMeridiemMode } from '../../TimePicker/TimePickerToolbar';\nimport { PickerSelectionState } from '../../_shared/hooks/usePickerState';\nimport { ArrowSwitcher, ExportedArrowSwitcherProps } from '../../_shared/ArrowSwitcher';\nimport {\n  convertValueToMeridiem,\n  createIsAfterIgnoreDatePart,\n  TimeValidationProps,\n} from '../../_helpers/time-utils';\n\nexport interface ExportedClockViewProps<TDate> extends TimeValidationProps<TDate> {\n  /**\n   * 12h/24h view for hour selection clock.\n   *\n   * @default true\n   */\n  ampm?: boolean;\n  /**\n   * Step over minutes.\n   *\n   * @default 1\n   */\n  minutesStep?: number;\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   *\n   * @default false\n   */\n  ampmInClock?: boolean;\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   *\n   * @default currentWrapper !== 'static'\n   */\n  allowKeyboardControl?: boolean;\n}\n\nexport interface ClockViewProps<TDate>\n  extends ExportedClockViewProps<TDate>,\n    ExportedArrowSwitcherProps {\n  /**\n   * Selected date @DateIOType.\n   */\n  date: TDate | null;\n  /**\n   * Clock type.\n   */\n  type: 'hours' | 'minutes' | 'seconds';\n  /**\n   * On change date without moving between views @DateIOType.\n   */\n  onDateChange: PickerOnChangeFn<TDate>;\n  /**\n   * On change callback @DateIOType.\n   */\n  onChange: PickerOnChangeFn<TDate>;\n  /**\n   * Get clock number aria-text for hours.\n   */\n  getHoursClockNumberText?: (hoursText: string) => string;\n  /**\n   * Get clock number aria-text for minutes.\n   */\n  getMinutesClockNumberText?: (minutesText: string) => string;\n  /**\n   * Get clock number aria-text for seconds.\n   */\n  getSecondsClockNumberText?: (secondsText: string) => string;\n  openNextView: () => void;\n  openPreviousView: () => void;\n  nextViewAvailable: boolean;\n  previousViewAvailable: boolean;\n  showViewSwitcher?: boolean;\n}\n\nconst muiPickersComponentConfig = { name: 'MuiPickersClockView' };\n\nexport const useStyles = makeStyles(\n  () => ({\n    arrowSwitcher: {\n      position: 'absolute',\n      right: 12,\n      top: 15,\n    },\n  }),\n  muiPickersComponentConfig\n);\n\nfunction getMinutesAriaText(minute: string) {\n  return `${minute} minutes`;\n}\n\nconst getHoursAriaText = (hour: string) => `${hour} hours`;\n\nconst getSecondsAriaText = (seconds: string) => `${seconds} seconds`;\n\nexport function ClockView<TDate>(props: ClockViewProps<TDate>) {\n  const {\n    allowKeyboardControl,\n    ampm,\n    ampmInClock,\n    date,\n    disableIgnoringDatePartForTimeValidation,\n    getHoursClockNumberText = getHoursAriaText,\n    getMinutesClockNumberText = getMinutesAriaText,\n    getSecondsClockNumberText = getSecondsAriaText,\n    leftArrowButtonProps,\n    leftArrowButtonText = 'open previous view',\n    leftArrowIcon,\n    maxTime,\n    minTime,\n    minutesStep = 1,\n    nextViewAvailable,\n    onChange,\n    onDateChange,\n    openNextView,\n    openPreviousView,\n    previousViewAvailable,\n    rightArrowButtonProps,\n    rightArrowButtonText = 'open next view',\n    rightArrowIcon,\n    shouldDisableTime,\n    showViewSwitcher,\n    type,\n  } = useDefaultProps(props, muiPickersComponentConfig);\n\n  const now = useNow<TDate>();\n  const utils = useUtils<TDate>();\n  const classes = useStyles();\n  const dateOrNow = date || now;\n\n  const { meridiemMode, handleMeridiemChange } = useMeridiemMode<TDate>(\n    dateOrNow,\n    ampm,\n    onDateChange\n  );\n\n  const isTimeDisabled = React.useCallback(\n    (rawValue: number, type: 'hours' | 'minutes' | 'seconds') => {\n      if (date === null) {\n        return false;\n      }\n\n      const validateTimeValue = (getRequestedTimePoint: (when: 'start' | 'end') => TDate) => {\n        const isAfterComparingFn = createIsAfterIgnoreDatePart(\n          Boolean(disableIgnoringDatePartForTimeValidation),\n          utils\n        );\n\n        return Boolean(\n          (minTime && isAfterComparingFn(minTime, getRequestedTimePoint('end'))) ||\n            (maxTime && isAfterComparingFn(getRequestedTimePoint('start'), maxTime)) ||\n            (shouldDisableTime && shouldDisableTime(rawValue, type))\n        );\n      };\n\n      switch (type) {\n        case 'hours': {\n          const hoursWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, Boolean(ampm));\n          return validateTimeValue((when: 'start' | 'end') =>\n            pipe(\n              (currentDate) => utils.setHours(currentDate, hoursWithMeridiem),\n              (dateWithHours) => utils.setMinutes(dateWithHours, when === 'start' ? 0 : 59),\n              (dateWithMinutes) => utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59)\n            )(date)\n          );\n        }\n\n        case 'minutes':\n          return validateTimeValue((when: 'start' | 'end') =>\n            pipe(\n              (currentDate) => utils.setMinutes(currentDate, rawValue),\n              (dateWithMinutes) => utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59)\n            )(date)\n          );\n\n        case 'seconds':\n          return validateTimeValue(() => utils.setSeconds(date, rawValue));\n\n        default:\n          throw new Error('not supported');\n      }\n    },\n    [\n      ampm,\n      date,\n      disableIgnoringDatePartForTimeValidation,\n      maxTime,\n      meridiemMode,\n      minTime,\n      shouldDisableTime,\n      utils,\n    ]\n  );\n\n  const viewProps = React.useMemo(() => {\n    switch (type) {\n      case 'hours': {\n        const handleHoursChange = (value: number, isFinish?: PickerSelectionState) => {\n          const valueWithMeridiem = convertValueToMeridiem(value, meridiemMode, Boolean(ampm));\n          onChange(utils.setHours(dateOrNow, valueWithMeridiem), isFinish);\n        };\n\n        return {\n          onChange: handleHoursChange,\n          value: utils.getHours(dateOrNow),\n          children: getHourNumbers({\n            date,\n            utils,\n            ampm: Boolean(ampm),\n            onChange: handleHoursChange,\n            getClockNumberText: getHoursClockNumberText,\n            isDisabled: (value) => isTimeDisabled(value, 'hours'),\n          }),\n        };\n      }\n\n      case 'minutes': {\n        const minutesValue = utils.getMinutes(dateOrNow);\n        const handleMinutesChange = (value: number, isFinish?: PickerSelectionState) => {\n          onChange(utils.setMinutes(dateOrNow, value), isFinish);\n        };\n\n        return {\n          value: minutesValue,\n          onChange: handleMinutesChange,\n          children: getMinutesNumbers({\n            utils,\n            value: minutesValue,\n            onChange: handleMinutesChange,\n            getClockNumberText: getMinutesClockNumberText,\n            isDisabled: (value) => isTimeDisabled(value, 'minutes'),\n          }),\n        };\n      }\n\n      case 'seconds': {\n        const secondsValue = utils.getSeconds(dateOrNow);\n        const handleSecondsChange = (value: number, isFinish?: PickerSelectionState) => {\n          onChange(utils.setSeconds(dateOrNow, value), isFinish);\n        };\n\n        return {\n          value: secondsValue,\n          onChange: handleSecondsChange,\n          children: getMinutesNumbers({\n            utils,\n            value: secondsValue,\n            onChange: handleSecondsChange,\n            getClockNumberText: getSecondsClockNumberText,\n            isDisabled: (value) => isTimeDisabled(value, 'seconds'),\n          }),\n        };\n      }\n\n      default:\n        throw new Error('You must provide the type for ClockView');\n    }\n  }, [\n    type,\n    utils,\n    date,\n    ampm,\n    getHoursClockNumberText,\n    getMinutesClockNumberText,\n    getSecondsClockNumberText,\n    meridiemMode,\n    onChange,\n    dateOrNow,\n    isTimeDisabled,\n  ]);\n\n  return (\n    <React.Fragment>\n      {showViewSwitcher && (\n        <ArrowSwitcher\n          className={classes.arrowSwitcher}\n          leftArrowButtonProps={leftArrowButtonProps}\n          rightArrowButtonProps={rightArrowButtonProps}\n          leftArrowButtonText={leftArrowButtonText}\n          rightArrowButtonText={rightArrowButtonText}\n          leftArrowIcon={leftArrowIcon}\n          rightArrowIcon={rightArrowIcon}\n          onLeftClick={openPreviousView}\n          onRightClick={openNextView}\n          isLeftDisabled={previousViewAvailable}\n          isRightDisabled={nextViewAvailable}\n        />\n      )}\n\n      <Clock\n        date={date}\n        ampmInClock={ampmInClock}\n        // @ts-expect-error FIX ME\n        onDateChange={onDateChange}\n        type={type}\n        ampm={ampm}\n        minutesStep={minutesStep}\n        allowKeyboardControl={allowKeyboardControl}\n        isTimeDisabled={isTimeDisabled}\n        meridiemMode={meridiemMode}\n        handleMeridiemChange={handleMeridiemChange}\n        {...viewProps}\n      />\n    </React.Fragment>\n  );\n}\n\nClockView.propTypes = {\n  ampm: PropTypes.bool,\n  date: PropTypes.object,\n  minutesStep: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(['minutes', 'hours', 'seconds']).isRequired,\n} as any;\n\nClockView.displayName = 'ClockView';\n","import { styled } from '@material-ui/core/styles';\n\nexport const MobileKeyboardInputView = styled('div')(\n  {\n    padding: '16px 24px',\n  },\n  { name: 'MuiPickersMobileKeyboardInputView' }\n);\n","import * as React from 'react';\nimport { WrapperProps } from './Wrapper';\nimport { StaticWrapperProps } from './StaticWrapper';\nimport { InnerMobileWrapperProps } from './MobileWrapper';\nimport { InnerDesktopWrapperProps } from './DesktopWrapper';\nimport { WrapperVariantContext } from './WrapperVariantContext';\nimport { KeyboardDateInput } from '../_shared/KeyboardDateInput';\nimport { executeInTheNextEventLoopTick } from '../_helpers/utils';\nimport { ExportedPickerPopperProps, PickersPopper } from '../_shared/PickersPopper';\nimport { CanAutoFocusContext, useAutoFocusControl } from '../_shared/hooks/useCanAutoFocus';\n\nexport interface InnerDesktopTooltipWrapperProps extends ExportedPickerPopperProps {}\n\nexport interface DesktopTooltipWrapperProps\n  extends InnerDesktopTooltipWrapperProps,\n    WrapperProps,\n    Partial<InnerMobileWrapperProps & StaticWrapperProps & InnerDesktopWrapperProps> {}\n\nexport const DesktopTooltipWrapper: React.FC<DesktopTooltipWrapperProps> = (props) => {\n  const {\n    open,\n    children,\n    PopperProps,\n    onDismiss,\n    DateInputProps,\n    TransitionComponent,\n    KeyboardDateInputComponent = KeyboardDateInput,\n  } = props;\n  const inputRef = React.useRef<HTMLDivElement>(null);\n  const popperRef = React.useRef<HTMLElement>(null);\n  const { canAutoFocus, onOpen } = useAutoFocusControl(open);\n\n  const handleBlur = () => {\n    executeInTheNextEventLoopTick(() => {\n      if (\n        inputRef.current?.contains(document.activeElement) ||\n        popperRef.current?.contains(document.activeElement)\n      ) {\n        return;\n      }\n\n      onDismiss();\n    });\n  };\n\n  return (\n    <WrapperVariantContext.Provider value=\"desktop\">\n      <CanAutoFocusContext.Provider value={canAutoFocus}>\n        <KeyboardDateInputComponent\n          {...DateInputProps}\n          containerRef={inputRef}\n          onBlur={handleBlur}\n        />\n        <PickersPopper\n          role=\"tooltip\"\n          open={open}\n          innerRef={popperRef}\n          anchorEl={inputRef.current}\n          TransitionComponent={TransitionComponent}\n          PopperProps={PopperProps}\n          onBlur={handleBlur}\n          onClose={onDismiss}\n          onOpen={onOpen}\n        >\n          {children}\n        </PickersPopper>\n      </CanAutoFocusContext.Provider>\n    </WrapperVariantContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { WrapperProps } from './Wrapper';\nimport { StaticWrapperProps } from './StaticWrapper';\nimport { InnerMobileWrapperProps } from './MobileWrapper';\nimport { WrapperVariantContext } from './WrapperVariantContext';\nimport { KeyboardDateInput } from '../_shared/KeyboardDateInput';\nimport { InnerDesktopTooltipWrapperProps } from './DesktopTooltipWrapper';\nimport { PickersPopper, ExportedPickerPopperProps } from '../_shared/PickersPopper';\nimport { CanAutoFocusContext, useAutoFocusControl } from '../_shared/hooks/useCanAutoFocus';\n\nexport interface InnerDesktopWrapperProps extends ExportedPickerPopperProps {}\n\nexport interface DesktopWrapperProps\n  extends InnerDesktopWrapperProps,\n    WrapperProps,\n    Partial<InnerMobileWrapperProps & InnerDesktopTooltipWrapperProps & StaticWrapperProps> {}\n\nexport const DesktopWrapper: React.FC<DesktopWrapperProps> = (props) => {\n  const {\n    children,\n    DateInputProps,\n    KeyboardDateInputComponent = KeyboardDateInput,\n    onDismiss,\n    open,\n    PopperProps,\n    TransitionComponent,\n  } = props;\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const { canAutoFocus, onOpen } = useAutoFocusControl(open);\n\n  return (\n    <WrapperVariantContext.Provider value=\"desktop\">\n      <CanAutoFocusContext.Provider value={canAutoFocus}>\n        <KeyboardDateInputComponent {...DateInputProps} inputRef={inputRef} />\n        <PickersPopper\n          role=\"dialog\"\n          open={open}\n          anchorEl={inputRef.current}\n          TransitionComponent={TransitionComponent}\n          PopperProps={PopperProps}\n          onClose={onDismiss}\n          onOpen={onOpen}\n        >\n          {children}\n        </PickersPopper>\n      </CanAutoFocusContext.Provider>\n    </WrapperVariantContext.Provider>\n  );\n};\n\nDesktopWrapper.propTypes = {\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n} as any;\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { DialogProps as MuiDialogProps } from '@material-ui/core/Dialog';\nimport { WrapperProps } from './Wrapper';\nimport { StaticWrapperProps } from './StaticWrapper';\nimport { PureDateInput } from '../_shared/PureDateInput';\nimport { InnerDesktopWrapperProps } from './DesktopWrapper';\nimport { WrapperVariantContext } from './WrapperVariantContext';\nimport PickersModalDialog, { ExportedPickerModalProps } from '../_shared/PickersModalDialog';\n\nexport interface InnerMobileWrapperProps extends ExportedPickerModalProps {\n  /**\n   * Props to be passed directly to material-ui Dialog\n   * @type {Partial<MuiDialogProps>}\n   */\n  DialogProps?: Partial<MuiDialogProps>;\n}\n\nexport interface MobileWrapperProps\n  extends InnerMobileWrapperProps,\n    WrapperProps,\n    Partial<InnerDesktopWrapperProps & StaticWrapperProps> {}\n\nexport const MobileWrapper: React.FC<MobileWrapperProps> = (props) => {\n  const {\n    cancelText,\n    children,\n    clearable,\n    clearText,\n    DateInputProps,\n    DialogProps,\n    displayStaticWrapperAs,\n    KeyboardDateInputComponent,\n    okText,\n    onAccept,\n    onClear,\n    onDismiss,\n    onSetToday,\n    open,\n    PopperProps,\n    PureDateInputComponent = PureDateInput,\n    showTabs,\n    showTodayButton,\n    todayText,\n    wider,\n    ...other\n  } = props;\n  return (\n    <WrapperVariantContext.Provider value=\"mobile\">\n      <PureDateInputComponent {...other} {...DateInputProps} />\n      <PickersModalDialog\n        wider={wider}\n        showTabs={showTabs}\n        open={open}\n        onClear={onClear}\n        onAccept={onAccept}\n        onDismiss={onDismiss}\n        onSetToday={onSetToday}\n        clearText={clearText}\n        todayText={todayText}\n        okText={okText}\n        cancelText={cancelText}\n        clearable={clearable}\n        showTodayButton={showTodayButton}\n        data-mui-test=\"mobile-wrapper-dialog\"\n        {...DialogProps}\n      >\n        {children}\n      </PickersModalDialog>\n    </WrapperVariantContext.Provider>\n  );\n};\n\nMobileWrapper.propTypes = {\n  cancelText: PropTypes.node,\n  clearable: PropTypes.bool,\n  clearText: PropTypes.node,\n  DialogProps: PropTypes.object,\n  okText: PropTypes.node,\n  showTodayButton: PropTypes.bool,\n  todayText: PropTypes.node,\n};\n","import * as React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { IS_TOUCH_DEVICE_MEDIA } from '../constants/dimensions';\nimport { MobileWrapperProps, MobileWrapper } from './MobileWrapper';\nimport { DesktopWrapperProps, DesktopWrapper } from './DesktopWrapper';\nimport { DesktopTooltipWrapperProps, DesktopTooltipWrapper } from './DesktopTooltipWrapper';\n\nexport interface ResponsiveWrapperProps\n  extends DesktopWrapperProps,\n    DesktopTooltipWrapperProps,\n    MobileWrapperProps {\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   *\n   * @default \"@media (pointer: fine)\"\n   * @example \"@media (min-width: 720px)\" or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery?: string;\n}\n\nexport const makeResponsiveWrapper = (\n  DesktopWrapperComponent: React.FC<DesktopWrapperProps | DesktopTooltipWrapperProps>,\n  MobileWrapperComponent: React.FC<MobileWrapperProps>\n) => {\n  const ResponsiveWrapper: React.FC<ResponsiveWrapperProps> = ({\n    cancelText,\n    clearable,\n    clearText,\n    desktopModeMediaQuery = IS_TOUCH_DEVICE_MEDIA,\n    DialogProps,\n    displayStaticWrapperAs,\n    okText,\n    PopperProps,\n    showTodayButton,\n    todayText,\n    TransitionComponent,\n    ...other\n  }) => {\n    const isDesktop = useMediaQuery(desktopModeMediaQuery);\n\n    return isDesktop ? (\n      <DesktopWrapperComponent\n        PopperProps={PopperProps}\n        TransitionComponent={TransitionComponent}\n        {...other}\n      />\n    ) : (\n      <MobileWrapperComponent\n        okText={okText}\n        cancelText={cancelText}\n        clearText={clearText}\n        todayText={todayText}\n        showTodayButton={showTodayButton}\n        clearable={clearable}\n        DialogProps={DialogProps}\n        {...other}\n      />\n    );\n  };\n\n  return ResponsiveWrapper;\n};\n\nexport const ResponsiveWrapper = makeResponsiveWrapper(DesktopWrapper, MobileWrapper);\n\nexport const ResponsiveTooltipWrapper = makeResponsiveWrapper(DesktopTooltipWrapper, MobileWrapper);\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DIALOG_WIDTH } from '../constants/dimensions';\nimport { WrapperVariantContext, IsStaticVariantContext } from './WrapperVariantContext';\n\nconst useStyles = makeStyles(\n  (theme) => ({\n    root: {\n      overflow: 'hidden',\n      minWidth: DIALOG_WIDTH,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: theme.palette.background.paper,\n    },\n  }),\n  { name: 'MuiPickersStaticWrapper' }\n);\n\nexport interface StaticWrapperProps {\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode\n   *\n   * @default \"static\"\n   */\n  displayStaticWrapperAs?: 'desktop' | 'mobile' | 'static';\n}\n\nexport const StaticWrapper: React.FC<StaticWrapperProps> = (props) => {\n  const { displayStaticWrapperAs = 'static', children } = props;\n  const classes = useStyles();\n  const isStatic = true;\n\n  return (\n    <IsStaticVariantContext.Provider value={isStatic}>\n      <WrapperVariantContext.Provider value={displayStaticWrapperAs}>\n        <div className={classes.root}>{children}</div>\n      </WrapperVariantContext.Provider>\n    </IsStaticVariantContext.Provider>\n  );\n};\n","import { DateInputProps } from '../_shared/PureDateInput';\nimport { StaticWrapper, StaticWrapperProps } from './StaticWrapper';\nimport { MobileWrapper, MobileWrapperProps } from './MobileWrapper';\nimport { DesktopWrapper, DesktopWrapperProps } from './DesktopWrapper';\nimport { ResponsiveWrapper, ResponsiveWrapperProps } from './ResponsiveWrapper';\nimport { DesktopTooltipWrapper, DesktopTooltipWrapperProps } from './DesktopTooltipWrapper';\n\nexport type DateInputPropsLike<TInputValue, TDateValue> = Omit<\n  DateInputProps<TInputValue, TDateValue>,\n  'renderInput' | 'validationError'\n> & {\n  renderInput: (...args: any) => JSX.Element;\n  validationError?: any;\n};\n\nexport interface WrapperProps<TInputProps = DateInputPropsLike<any, any>> {\n  open: boolean;\n  onAccept: () => void;\n  onDismiss: () => void;\n  onClear: () => void;\n  onSetToday: () => void;\n  DateInputProps: TInputProps;\n  KeyboardDateInputComponent?: React.ComponentType<TInputProps>;\n  PureDateInputComponent?: React.ComponentType<TInputProps>;\n}\n\nexport type OmitInnerWrapperProps<T extends WrapperProps<any>> = Omit<T, keyof WrapperProps<any>>;\n\nexport type SomeWrapper =\n  | typeof ResponsiveWrapper\n  | typeof StaticWrapper\n  | typeof MobileWrapper\n  | typeof DesktopWrapper\n  | typeof DesktopTooltipWrapper;\n\nexport type ExtendWrapper<TWrapper extends SomeWrapper> = TWrapper extends typeof StaticWrapper\n  ? StaticWrapperProps\n  : TWrapper extends typeof ResponsiveWrapper\n  ? OmitInnerWrapperProps<ResponsiveWrapperProps>\n  : TWrapper extends typeof MobileWrapper\n  ? OmitInnerWrapperProps<MobileWrapperProps>\n  : TWrapper extends typeof DesktopWrapper\n  ? OmitInnerWrapperProps<DesktopWrapperProps>\n  : TWrapper extends typeof DesktopWrapper\n  ? OmitInnerWrapperProps<DesktopWrapperProps>\n  : TWrapper extends typeof DesktopTooltipWrapper\n  ? OmitInnerWrapperProps<DesktopTooltipWrapperProps>\n  : never;\n\nexport function getWrapperVariant(wrapper: SomeWrapper) {\n  if (wrapper === DesktopWrapper) {\n    return 'desktop';\n  }\n  if (wrapper === StaticWrapper) {\n    return 'static';\n  }\n  if (wrapper === MobileWrapper) {\n    return 'mobile';\n  }\n\n  return null;\n}\n\nexport type WrapperVariant = ReturnType<typeof getWrapperVariant>;\n\nexport { StaticWrapper, MobileWrapper, DesktopWrapper };\n","import * as React from 'react';\nimport { WrapperVariant } from './Wrapper';\n\n// consider getting rid from wrapper variant\nexport const WrapperVariantContext = React.createContext<WrapperVariant | null>(null);\n\nexport const IsStaticVariantContext = React.createContext(false);\n","import React from 'react';\nimport { StaticWrapperProps } from './StaticWrapper';\nimport { BasePickerProps } from '../typings/BasePicker';\nimport { DateInputProps } from '../_shared/PureDateInput';\nimport { ResponsiveWrapperProps } from './ResponsiveWrapper';\nimport { OmitInnerWrapperProps, SomeWrapper, WrapperProps, DateInputPropsLike } from './Wrapper';\n\ninterface MakePickerOptions<TInputProps> {\n  PureDateInputComponent?: React.FC<TInputProps>;\n  KeyboardDateInputComponent?: React.FC<TInputProps>;\n}\n\ninterface WithWrapperProps<TInputProps = DateInputProps> {\n  children: React.ReactNode;\n  DateInputProps: TInputProps;\n  wrapperProps: Omit<WrapperProps, 'DateInputProps'>;\n}\n\n/* Creates a component that rendering modal/popover/nothing and spreading props down to text field */\nexport function makeWrapperComponent<\n  TInputProps extends DateInputPropsLike<any, any>,\n  TWrapper extends SomeWrapper = any\n>(\n  Wrapper: TWrapper,\n  { KeyboardDateInputComponent, PureDateInputComponent }: MakePickerOptions<TInputProps>\n) {\n  function WrapperComponent(\n    props: Partial<BasePickerProps<any, any>> &\n      WithWrapperProps<TInputProps> &\n      Partial<OmitInnerWrapperProps<ResponsiveWrapperProps> & StaticWrapperProps>\n  ) {\n    const {\n      disableCloseOnSelect,\n      cancelText,\n      children,\n      clearable,\n      clearText,\n      DateInputProps,\n      DialogProps,\n      displayStaticWrapperAs,\n      inputFormat,\n      okText,\n      onAccept,\n      onChange,\n      onClose,\n      onOpen,\n      open,\n      PopperProps,\n      showTabs,\n      todayText,\n      value,\n      wider,\n      wrapperProps,\n      ...restPropsForTextField\n    } = props;\n\n    const WrapperComponent = Wrapper as SomeWrapper;\n\n    return (\n      <WrapperComponent\n        clearable={clearable}\n        clearText={clearText}\n        DialogProps={DialogProps}\n        PopperProps={PopperProps}\n        okText={okText}\n        todayText={todayText}\n        cancelText={cancelText}\n        DateInputProps={DateInputProps}\n        // @ts-ignore\n        KeyboardDateInputComponent={KeyboardDateInputComponent}\n        // @ts-ignore\n        PureDateInputComponent={PureDateInputComponent}\n        wider={wider}\n        showTabs={showTabs}\n        displayStaticWrapperAs={displayStaticWrapperAs}\n        {...wrapperProps}\n        {...restPropsForTextField}\n      >\n        {children}\n      </WrapperComponent>\n    );\n  }\n\n  return WrapperComponent;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AASA;AACA;AAKA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAQA;AA1BA;AAiCA;AAGA;AAHA;AAUA;AAGA;AAHA;AAUA;AAGA;AAHA;AAUA;AAGA;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AALA;AAaA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AA+BA;AAKA;AACA;AAAA;AAAA;AAFA;AAKA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AACA;AAKA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAOA;AAEA;AACA;AACA;AAJA;AACA;AAMA;AAEA;AACA;AAHA;AACA;AAhBA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAOA;AAOA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtLA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AAEA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAHA;AAKA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AADA;AADA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AADA;AAVA;AAeA;AACA;AAlEA;AAAA;AAoEA;AAAA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAEA;AAEA;AACA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9KA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AADA;AAXA;AAAA;AAgBA;AAAA;AAuCA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAbA;AAmBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAbA;AAmBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzLA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AANA;AA0BA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAIA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJ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;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAiCA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AAWA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AAIA;AAKA;AAIA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAzBA;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AATA;AAmCA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;;;;;;;;;;;;;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAHA;AAMA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AAyCA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AATA;AAAA;AAaA;AAAA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AACA;AAiBA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA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ACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvDA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAKA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AAEA;AAoBA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAMA;AACA;AAXA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAZA;AALA;AAqBA;;;;;;;;;;;;;;;;;;AC5HA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AAGA;AAcA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAqBA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA5BA;AAAA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAOA;AACA;;;;;;;;;;;;AC7IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAkBA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA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AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AAYA;AACA;AADA;AA/BA;AAmCA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AADA;AADA;AAKA;AAAA;AAGA;AACA;AAtDA;AAAA;AACA;AAyHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwBA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAgBA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;ACjRA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAFA;AAlBA;AAyBA;AACA;AAAA;AAGA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAAA;AAEA;AADA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAjBA;AAsBA;AAvBA;AAAA;AAyBA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AAAA;AAGA;AAQA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAnCA;AA0CA;AACA;AAAA;AAGA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAAA;AAEA;AADA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAHA;AARA;AAgBA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAXA;AAeA;AACA;AApCA;AAAA;AAsCA;AAAA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AA0BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAUA;AAAA;AAGA;AAYA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AAgBA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAGA;;;;;;;;;;;;;;;;;;;;;;;ACjKA;AAGA;AACA;AAgBA;AAAA;AAWA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAEA;AAFA;AACA;AAIA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AA/BA;AAiCA;AA5CA;AA4DA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAJA;AARA;AAAA;AAAA;AACA;AAcA;AAEA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AADA;AAWA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAgBA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AADA;AAHA;AAlDA;AAAA;AA6DA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAecA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrQA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAqCA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAZA;AAgBA;AACA;AADA;AAGA;AACA;AACA;AAFA;AApBA;AAyBA;AACA;AAAA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC3HA;AACA;AAaA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhCA;AACA;AAsBA;AAAA;AAoBA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAaA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AADA;AAvBA;AADA;AACA;AAqCA;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA1DA;AACA;AADA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA4CA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAuEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA6BA;AACA;AACA;AACA;AACA;AAlCA;AAAA;AAAA;AACA;AAwCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAJA;AAOA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAHA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAxBA;AA0BA;AAaA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAHA;AAYA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAHA;AAWA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAHA;AAWA;AACA;AACA;AACA;AA5DA;AA8DA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;;;;;ACpUA;AAAA;AAAA;AAAA;AAEA;AAEA;AADA;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAKA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AAAA;AAAA;AACA;AAaA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AAIA;AACA;AAEA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AACA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AAIA;AAEA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AAeA;AAIA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AASA;AAAA;AAYA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA8CA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAiBA;AACA;AAMA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAVA;AAYA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;;;;A","sourceRoot":""}